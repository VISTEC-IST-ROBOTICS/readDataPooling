
readDataPooling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08007040  08007040  00017040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073cc  080073cc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d4  080073d4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080073dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001d8  080075b4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080075b4  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e729  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8a  00000000  00000000  0002e974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00030800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a00  00000000  00000000  00031518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f5d  00000000  00000000  00031f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3fa  00000000  00000000  00048e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bbee  00000000  00000000  0005626f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004650  00000000  00000000  000e1e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e64b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007028 	.word	0x08007028

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007028 	.word	0x08007028

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb8:	f000 fcc4 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebc:	f000 f888 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec0:	f000 f94e 	bl	8001160 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ec4:	f000 f922 	bl	800110c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000ec8:	f000 f8ea 	bl	80010a0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
//  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000ecc:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <main+0xf0>)
 8000ece:	4a36      	ldr	r2, [pc, #216]	; (8000fa8 <main+0xf4>)
 8000ed0:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <main+0xf0>)
 8000ed4:	4a35      	ldr	r2, [pc, #212]	; (8000fac <main+0xf8>)
 8000ed6:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <main+0xf0>)
 8000eda:	4a35      	ldr	r2, [pc, #212]	; (8000fb0 <main+0xfc>)
 8000edc:	60da      	str	r2, [r3, #12]
//  dev_ctx.handle = &hspi2;
//  stmdev_ctx_t dev_ctx;

  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fa3c 	bl	800135c <platform_delay>

  /* Check device ID */
  iis3dwb_device_id_get(&dev_ctx, &whoamI);
 8000ee4:	4933      	ldr	r1, [pc, #204]	; (8000fb4 <main+0x100>)
 8000ee6:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <main+0xf0>)
 8000ee8:	f003 fbd1 	bl	800468e <iis3dwb_device_id_get>
   while (whoamI != IIS3DWB_ID)
 8000eec:	e00b      	b.n	8000f06 <main+0x52>
	    {
	  iis3dwb_device_id_get(&dev_ctx, &whoamI);
 8000eee:	4931      	ldr	r1, [pc, #196]	; (8000fb4 <main+0x100>)
 8000ef0:	482c      	ldr	r0, [pc, #176]	; (8000fa4 <main+0xf0>)
 8000ef2:	f003 fbcc 	bl	800468e <iis3dwb_device_id_get>
	  a += 1;
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <main+0x104>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <main+0x104>)
 8000efe:	6013      	str	r3, [r2, #0]
	  HAL_Delay(50);
 8000f00:	2032      	movs	r0, #50	; 0x32
 8000f02:	f000 fd11 	bl	8001928 <HAL_Delay>
   while (whoamI != IIS3DWB_ID)
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <main+0x100>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b7b      	cmp	r3, #123	; 0x7b
 8000f0c:	d1ef      	bne.n	8000eee <main+0x3a>
  }
//   iis3dwb_xl_full_scale_set(&dev_ctx, IIS3DWB_2g);
   iis3dwb_write_reg(&dev_ctx, IIS3DWB_CTRL1_XL, &scale_CTRL1, 1);
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4a2a      	ldr	r2, [pc, #168]	; (8000fbc <main+0x108>)
 8000f12:	2110      	movs	r1, #16
 8000f14:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <main+0xf0>)
 8000f16:	f003 fb40 	bl	800459a <iis3dwb_write_reg>
   HAL_Delay(10);
 8000f1a:	200a      	movs	r0, #10
 8000f1c:	f000 fd04 	bl	8001928 <HAL_Delay>
   iis3dwb_read_reg(&dev_ctx, IIS3DWB_CTRL1_XL, &scale_return_CTRL1, 1);
 8000f20:	2301      	movs	r3, #1
 8000f22:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <main+0x10c>)
 8000f24:	2110      	movs	r1, #16
 8000f26:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <main+0xf0>)
 8000f28:	f003 fb20 	bl	800456c <iis3dwb_read_reg>
   HAL_Delay(10);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f000 fcfb 	bl	8001928 <HAL_Delay>

   iis3dwb_read_reg(&dev_ctx, IIS3DWB_CTRL3_C, &scale_return_CTRL3, 1);
 8000f32:	2301      	movs	r3, #1
 8000f34:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <main+0x110>)
 8000f36:	2112      	movs	r1, #18
 8000f38:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <main+0xf0>)
 8000f3a:	f003 fb17 	bl	800456c <iis3dwb_read_reg>
   HAL_Delay(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f000 fcf2 	bl	8001928 <HAL_Delay>
//              "TEMP [degC]:%6.2f\r\n", temperature_degC);

//	  memcpy((char *)tx_buffer, "TEMP [degC]:%6.2f\r\n", temperature_degC);
//	  HAL_UART_Transmit(&huart2, tx_buffer, sizeof(tx_buffer), 1000);

      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8000f44:	2206      	movs	r2, #6
 8000f46:	2100      	movs	r1, #0
 8000f48:	481f      	ldr	r0, [pc, #124]	; (8000fc8 <main+0x114>)
 8000f4a:	f004 f91c 	bl	8005186 <memset>
      iis3dwb_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8000f4e:	491e      	ldr	r1, [pc, #120]	; (8000fc8 <main+0x114>)
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <main+0xf0>)
 8000f52:	f003 fb51 	bl	80045f8 <iis3dwb_acceleration_raw_get>
      acceleration_mg[0] =
        iis3dwb_from_fs4g_to_mg(data_raw_acceleration[0]);
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <main+0x114>)
 8000f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fb33 	bl	80045c8 <iis3dwb_from_fs4g_to_mg>
 8000f62:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[0] =
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <main+0x118>)
 8000f68:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] =
        iis3dwb_from_fs4g_to_mg(data_raw_acceleration[1]);
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <main+0x114>)
 8000f6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 fb28 	bl	80045c8 <iis3dwb_from_fs4g_to_mg>
 8000f78:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[1] =
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <main+0x118>)
 8000f7e:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] =
        iis3dwb_from_fs4g_to_mg(data_raw_acceleration[2]);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <main+0x114>)
 8000f84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fb1d 	bl	80045c8 <iis3dwb_from_fs4g_to_mg>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[2] =
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <main+0x118>)
 8000f94:	edc3 7a02 	vstr	s15, [r3, #8]



//      tx_com(tx_buffer, strlen((char const *)tx_buffer));

	  HAL_Delay(500);
 8000f98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9c:	f000 fcc4 	bl	8001928 <HAL_Delay>
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8000fa0:	e7d0      	b.n	8000f44 <main+0x90>
 8000fa2:	bf00      	nop
 8000fa4:	200002ac 	.word	0x200002ac
 8000fa8:	08001291 	.word	0x08001291
 8000fac:	080012ed 	.word	0x080012ed
 8000fb0:	200001f4 	.word	0x200001f4
 8000fb4:	200002a8 	.word	0x200002a8
 8000fb8:	20000290 	.word	0x20000290
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000001 	.word	0x20000001
 8000fc4:	20000002 	.word	0x20000002
 8000fc8:	20000294 	.word	0x20000294
 8000fcc:	2000029c 	.word	0x2000029c

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 f8d1 	bl	8005186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <SystemClock_Config+0xc8>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <SystemClock_Config+0xc8>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <SystemClock_Config+0xc8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <SystemClock_Config+0xcc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a20      	ldr	r2, [pc, #128]	; (800109c <SystemClock_Config+0xcc>)
 800101a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <SystemClock_Config+0xcc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001034:	2310      	movs	r3, #16
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103c:	2300      	movs	r3, #0
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001044:	2354      	movs	r3, #84	; 0x54
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f000 ffe7 	bl	8002028 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001060:	f000 f9c2 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2302      	movs	r3, #2
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2102      	movs	r1, #2
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fa49 	bl	8002518 <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800108c:	f000 f9ac 	bl	80013e8 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	; 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_SPI2_Init+0x64>)
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <MX_SPI2_Init+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_SPI2_Init+0x64>)
 80010ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_SPI2_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_SPI2_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_SPI2_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_SPI2_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_SPI2_Init+0x64>)
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_SPI2_Init+0x64>)
 80010d4:	2220      	movs	r2, #32
 80010d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <MX_SPI2_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_SPI2_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <MX_SPI2_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_SPI2_Init+0x64>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_SPI2_Init+0x64>)
 80010f2:	f001 fc31 	bl	8002958 <HAL_SPI_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010fc:	f000 f974 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200001f4 	.word	0x200001f4
 8001108:	40003800 	.word	0x40003800

0800110c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_USART2_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001144:	f002 fafe 	bl	8003744 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f000 f94b 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000024c 	.word	0x2000024c
 800115c:	40004400 	.word	0x40004400

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <MX_GPIO_Init+0x120>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a40      	ldr	r2, [pc, #256]	; (8001280 <MX_GPIO_Init+0x120>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <MX_GPIO_Init+0x120>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <MX_GPIO_Init+0x120>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a39      	ldr	r2, [pc, #228]	; (8001280 <MX_GPIO_Init+0x120>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <MX_GPIO_Init+0x120>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b33      	ldr	r3, [pc, #204]	; (8001280 <MX_GPIO_Init+0x120>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a32      	ldr	r2, [pc, #200]	; (8001280 <MX_GPIO_Init+0x120>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <MX_GPIO_Init+0x120>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <MX_GPIO_Init+0x120>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <MX_GPIO_Init+0x120>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_GPIO_Init+0x120>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2120      	movs	r1, #32
 80011ea:	4826      	ldr	r0, [pc, #152]	; (8001284 <MX_GPIO_Init+0x124>)
 80011ec:	f000 fee8 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSC_GPIO_Port, SSC_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2104      	movs	r1, #4
 80011f4:	4824      	ldr	r0, [pc, #144]	; (8001288 <MX_GPIO_Init+0x128>)
 80011f6:	f000 fee3 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001200:	4821      	ldr	r0, [pc, #132]	; (8001288 <MX_GPIO_Init+0x128>)
 8001202:	f000 fedd 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800120c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	481b      	ldr	r0, [pc, #108]	; (800128c <MX_GPIO_Init+0x12c>)
 800121e:	f000 fd4b 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001222:	2320      	movs	r3, #32
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <MX_GPIO_Init+0x124>)
 800123a:	f000 fd3d 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSC_Pin */
  GPIO_InitStruct.Pin = SSC_Pin;
 800123e:	2304      	movs	r3, #4
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SSC_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_GPIO_Init+0x128>)
 8001256:	f000 fd2f 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800125a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_GPIO_Init+0x128>)
 8001274:	f000 fd20 	bl	8001cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800

08001290 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	461a      	mov	r2, r3
 800129c:	460b      	mov	r3, r1
 800129e:	72fb      	strb	r3, [r7, #11]
 80012a0:	4613      	mov	r3, r2
 80012a2:	813b      	strh	r3, [r7, #8]
	  tx_buf_rmt[ 0 ] = reg;
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <platform_write+0x50>)
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	7013      	strb	r3, [r2, #0]
	  tx_buf_rmt[ 1 ] = *bufp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <platform_write+0x50>)
 80012b0:	705a      	strb	r2, [r3, #1]
	  tx_set_cs = 1;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <platform_write+0x54>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012be:	480a      	ldr	r0, [pc, #40]	; (80012e8 <platform_write+0x58>)
 80012c0:	f000 fe7e 	bl	8001fc0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_IT(handle, tx_buf_rmt, len+1);
 80012c4:	893b      	ldrh	r3, [r7, #8]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	4904      	ldr	r1, [pc, #16]	; (80012e0 <platform_write+0x50>)
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f001 fbcc 	bl	8002a6c <HAL_SPI_Transmit_IT>

	  return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002c0 	.word	0x200002c0
 80012e4:	200002bc 	.word	0x200002bc
 80012e8:	40020400 	.word	0x40020400

080012ec <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	461a      	mov	r2, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	72fb      	strb	r3, [r7, #11]
 80012fc:	4613      	mov	r3, r2
 80012fe:	813b      	strh	r3, [r7, #8]
	  tx_buf_rmt[ 0 ] = reg;
 8001300:	4a13      	ldr	r2, [pc, #76]	; (8001350 <platform_read+0x64>)
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	7013      	strb	r3, [r2, #0]
	  tx_buf_rmt[ 0 ] |= 0x80;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <platform_read+0x64>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <platform_read+0x64>)
 8001312:	701a      	strb	r2, [r3, #0]
	  tx_buf_rmt[ 1 ] = 0x00;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <platform_read+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	705a      	strb	r2, [r3, #1]

	  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <platform_read+0x68>)
 8001322:	f000 fe4d 	bl	8001fc0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_IT(handle, tx_buf_rmt, 2);
 8001326:	2202      	movs	r2, #2
 8001328:	4909      	ldr	r1, [pc, #36]	; (8001350 <platform_read+0x64>)
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f001 fb9e 	bl	8002a6c <HAL_SPI_Transmit_IT>
	  HAL_SPI_Receive_IT(handle, bufp, len);
 8001330:	893b      	ldrh	r3, [r7, #8]
 8001332:	461a      	mov	r2, r3
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f001 fc22 	bl	8002b80 <HAL_SPI_Receive_IT>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800133c:	2120      	movs	r1, #32
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <platform_read+0x6c>)
 8001340:	f000 fe57 	bl	8001ff2 <HAL_GPIO_TogglePin>
	  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002c0 	.word	0x200002c0
 8001354:	40020400 	.word	0x40020400
 8001358:	40020000 	.word	0x40020000

0800135c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fadf 	bl	8001928 <HAL_Delay>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_SPI_TxCpltCallback>:
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
    }
  }
}
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

	if(hspi->Instance == hspi2.Instance)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_SPI_TxCpltCallback+0x38>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d10c      	bne.n	80013a2 <HAL_SPI_TxCpltCallback+0x2e>
		 {
			if(tx_set_cs){
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_SPI_TxCpltCallback+0x3c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_SPI_TxCpltCallback+0x2e>
				HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <HAL_SPI_TxCpltCallback+0x40>)
 8001398:	f000 fe12 	bl	8001fc0 <HAL_GPIO_WritePin>
				tx_set_cs = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_SPI_TxCpltCallback+0x3c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
			}
		 }
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200001f4 	.word	0x200001f4
 80013b0:	200002bc 	.word	0x200002bc
 80013b4:	40020400 	.word	0x40020400

080013b8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	if(hspi->Instance == hspi2.Instance)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_SPI_RxCpltCallback+0x28>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d105      	bne.n	80013d8 <HAL_SPI_RxCpltCallback+0x20>
	 {
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <HAL_SPI_RxCpltCallback+0x2c>)
 80013d4:	f000 fdf4 	bl	8001fc0 <HAL_GPIO_WritePin>
//		Rxflag = 1;
	 }
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200001f4 	.word	0x200001f4
 80013e4:	40020400 	.word	0x40020400

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <Error_Handler+0x8>
	...

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_MspInit+0x4c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x4c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001432:	2007      	movs	r0, #7
 8001434:	f000 fb6c 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2c      	ldr	r2, [pc, #176]	; (8001514 <HAL_SPI_MspInit+0xd0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d152      	bne.n	800150c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_SPI_MspInit+0xd4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ba:	230c      	movs	r3, #12
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ca:	2305      	movs	r3, #5
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <HAL_SPI_MspInit+0xd8>)
 80014d6:	f000 fbef 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ec:	2305      	movs	r3, #5
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	480a      	ldr	r0, [pc, #40]	; (8001520 <HAL_SPI_MspInit+0xdc>)
 80014f8:	f000 fbde 	bl	8001cb8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2024      	movs	r0, #36	; 0x24
 8001502:	f000 fb10 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001506:	2024      	movs	r0, #36	; 0x24
 8001508:	f000 fb29 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40003800 	.word	0x40003800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020800 	.word	0x40020800
 8001520:	40020400 	.word	0x40020400

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_UART_MspInit+0x94>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d133      	bne.n	80015ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_UART_MspInit+0x98>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <HAL_UART_MspInit+0x98>)
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_UART_MspInit+0x98>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_UART_MspInit+0x98>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a14      	ldr	r2, [pc, #80]	; (80015bc <HAL_UART_MspInit+0x98>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_UART_MspInit+0x98>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800157e:	230c      	movs	r3, #12
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158e:	2307      	movs	r3, #7
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <HAL_UART_MspInit+0x9c>)
 800159a:	f000 fb8d 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2026      	movs	r0, #38	; 0x26
 80015a4:	f000 fabf 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a8:	2026      	movs	r0, #38	; 0x26
 80015aa:	f000 fad8 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40004400 	.word	0x40004400
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f000 f96a 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <SPI2_IRQHandler+0x10>)
 800161e:	f001 fbe1 	bl	8002de4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200001f4 	.word	0x200001f4

0800162c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <USART2_IRQHandler+0x10>)
 8001632:	f002 f8d5 	bl	80037e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000024c 	.word	0x2000024c

08001640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_kill>:

int _kill(int pid, int sig)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165a:	f003 fde7 	bl	800522c <__errno>
 800165e:	4603      	mov	r3, r0
 8001660:	2216      	movs	r2, #22
 8001662:	601a      	str	r2, [r3, #0]
  return -1;
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_exit>:

void _exit (int status)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ffe7 	bl	8001650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0x12>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e00a      	b.n	80016ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	4601      	mov	r1, r0
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	60ba      	str	r2, [r7, #8]
 80016a2:	b2ca      	uxtb	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbf0      	blt.n	8001696 <_read+0x12>
  }

  return len;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e009      	b.n	80016e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf1      	blt.n	80016d0 <_write+0x12>
  }
  return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_close>:

int _close(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171e:	605a      	str	r2, [r3, #4]
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_isatty>:

int _isatty(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f003 fd4c 	bl	800522c <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_sbrk+0x64>)
 80017b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20020000 	.word	0x20020000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	200002c4 	.word	0x200002c4
 80017c8:	20000418 	.word	0x20000418

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
	}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <LoopFillZerobss+0x26>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181a:	f7ff ffd7 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f003 fd0b 	bl	8005238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fb47 	bl	8000eb4 <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001834:	080073dc 	.word	0x080073dc
  ldr r2, =_sbss
 8001838:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800183c:	20000418 	.word	0x20000418

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f94f 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fdbc 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f967 	bl	8001b7a <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f92f 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000004 	.word	0x20000004
 80018e0:	2000000c 	.word	0x2000000c
 80018e4:	20000008 	.word	0x20000008

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2000000c 	.word	0x2000000c
 800190c:	200002c8 	.word	0x200002c8

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200002c8 	.word	0x200002c8

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000000c 	.word	0x2000000c

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff29 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff3e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff31 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff feb6 	bl	8001910 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d008      	beq.n	8001bc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e052      	b.n	8001c6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0216 	bic.w	r2, r2, #22
 8001bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <HAL_DMA_Abort+0x62>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0208 	bic.w	r2, r2, #8
 8001c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c14:	e013      	b.n	8001c3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c16:	f7ff fe7b 	bl	8001910 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d90c      	bls.n	8001c3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e015      	b.n	8001c6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e4      	bne.n	8001c16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e00c      	b.n	8001caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2205      	movs	r2, #5
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e159      	b.n	8001f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8148 	bne.w	8001f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d017      	beq.n	8001da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a2 	beq.w	8001f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_GPIO_Init+0x2ec>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x2f0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d019      	beq.n	8001eba <HAL_GPIO_Init+0x202>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_GPIO_Init+0x2f4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0x1fe>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a47      	ldr	r2, [pc, #284]	; (8001fb0 <HAL_GPIO_Init+0x2f8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00d      	beq.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a46      	ldr	r2, [pc, #280]	; (8001fb4 <HAL_GPIO_Init+0x2fc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d007      	beq.n	8001eae <HAL_GPIO_Init+0x1f6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_GPIO_Init+0x300>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_GPIO_Init+0x1f2>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e008      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e004      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f002 0203 	and.w	r2, r2, #3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	4093      	lsls	r3, r2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ecc:	4935      	ldr	r1, [pc, #212]	; (8001fa4 <HAL_GPIO_Init+0x2ec>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efe:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	f67f aea2 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40013800 	.word	0x40013800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43d9      	mvns	r1, r3
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	400b      	ands	r3, r1
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e267      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d00c      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b85      	ldr	r3, [pc, #532]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800205a:	2b08      	cmp	r3, #8
 800205c:	d112      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4b82      	ldr	r3, [pc, #520]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206a:	d10b      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b7e      	ldr	r3, [pc, #504]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d157      	bne.n	8002130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e242      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x74>
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6f      	ldr	r2, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6c      	ldr	r2, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 80020c0:	4b69      	ldr	r3, [pc, #420]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fc16 	bl	8001910 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fc12 	bl	8001910 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e207      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xc0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc02 	bl	8001910 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fbfe 	bl	8001910 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1f3      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0xe8>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b44      	ldr	r3, [pc, #272]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_OscConfig+0x244>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7ff fbb7 	bl	8001910 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a6:	f7ff fbb3 	bl	8001910 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1a8      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4925      	ldr	r1, [pc, #148]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x244>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff fb96 	bl	8001910 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e8:	f7ff fb92 	bl	8001910 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e187      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d036      	beq.n	8002280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff fb76 	bl	8001910 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fb72 	bl	8001910 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e167      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x200>
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7ff fb5f 	bl	8001910 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	e00e      	b.n	8002274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002256:	f7ff fb5b 	bl	8001910 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d907      	bls.n	8002274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e150      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ea      	bne.n	8002256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8097 	beq.w	80023bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b81      	ldr	r3, [pc, #516]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b77      	ldr	r3, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b74      	ldr	r3, [pc, #464]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a73      	ldr	r2, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7ff fb1b 	bl	8001910 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7ff fb17 	bl	8001910 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e10c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x2ea>
 8002304:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x30c>
 800231a:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	4b55      	ldr	r3, [pc, #340]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7ff fadc 	bl	8001910 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7ff fad8 	bl	8001910 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0cb      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ee      	beq.n	800235c <HAL_RCC_OscConfig+0x334>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7ff fac6 	bl	8001910 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7ff fac2 	bl	8001910 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0b5      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	4a38      	ldr	r2, [pc, #224]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a1 	beq.w	8002508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d05c      	beq.n	800248c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d141      	bne.n	800245e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fa96 	bl	8001910 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fa92 	bl	8001910 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e087      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7ff fa6b 	bl	8001910 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243e:	f7ff fa67 	bl	8001910 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e05c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x416>
 800245c:	e054      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fa54 	bl	8001910 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff fa50 	bl	8001910 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e038      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
 80024a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x4ec>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d121      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11a      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cc      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d90c      	bls.n	8002554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d044      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e067      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4934      	ldr	r1, [pc, #208]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7ff f982 	bl	8001910 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7ff f97e 	bl	8001910 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d20c      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f8e2 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08007040 	.word	0x08007040
 80026dc:	20000004 	.word	0x20000004
 80026e0:	20000008 	.word	0x20000008

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e8:	b094      	sub	sp, #80	; 0x50
 80026ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	647b      	str	r3, [r7, #68]	; 0x44
 80026f0:	2300      	movs	r3, #0
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f4:	2300      	movs	r3, #0
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fc:	4b79      	ldr	r3, [pc, #484]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d00d      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x40>
 8002708:	2b08      	cmp	r3, #8
 800270a:	f200 80e1 	bhi.w	80028d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x34>
 8002712:	2b04      	cmp	r3, #4
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x3a>
 8002716:	e0db      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800271a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800271c:	e0db      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800271e:	4b73      	ldr	r3, [pc, #460]	; (80028ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002720:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002722:	e0d8      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800272c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272e:	4b6d      	ldr	r3, [pc, #436]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d063      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	2200      	movs	r2, #0
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
 8002744:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
 800274e:	2300      	movs	r3, #0
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
 8002752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002756:	4622      	mov	r2, r4
 8002758:	462b      	mov	r3, r5
 800275a:	f04f 0000 	mov.w	r0, #0
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	0159      	lsls	r1, r3, #5
 8002764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002768:	0150      	lsls	r0, r2, #5
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4621      	mov	r1, r4
 8002770:	1a51      	subs	r1, r2, r1
 8002772:	6139      	str	r1, [r7, #16]
 8002774:	4629      	mov	r1, r5
 8002776:	eb63 0301 	sbc.w	r3, r3, r1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002788:	4659      	mov	r1, fp
 800278a:	018b      	lsls	r3, r1, #6
 800278c:	4651      	mov	r1, sl
 800278e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002792:	4651      	mov	r1, sl
 8002794:	018a      	lsls	r2, r1, #6
 8002796:	4651      	mov	r1, sl
 8002798:	ebb2 0801 	subs.w	r8, r2, r1
 800279c:	4659      	mov	r1, fp
 800279e:	eb63 0901 	sbc.w	r9, r3, r1
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b6:	4690      	mov	r8, r2
 80027b8:	4699      	mov	r9, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	eb18 0303 	adds.w	r3, r8, r3
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	462b      	mov	r3, r5
 80027c4:	eb49 0303 	adc.w	r3, r9, r3
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027d6:	4629      	mov	r1, r5
 80027d8:	024b      	lsls	r3, r1, #9
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027e0:	4621      	mov	r1, r4
 80027e2:	024a      	lsls	r2, r1, #9
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027f4:	f7fe f9e0 	bl	8000bb8 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002800:	e058      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	2200      	movs	r2, #0
 800280a:	4618      	mov	r0, r3
 800280c:	4611      	mov	r1, r2
 800280e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800281c:	4642      	mov	r2, r8
 800281e:	464b      	mov	r3, r9
 8002820:	f04f 0000 	mov.w	r0, #0
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	0159      	lsls	r1, r3, #5
 800282a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282e:	0150      	lsls	r0, r2, #5
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4641      	mov	r1, r8
 8002836:	ebb2 0a01 	subs.w	sl, r2, r1
 800283a:	4649      	mov	r1, r9
 800283c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800284c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002854:	ebb2 040a 	subs.w	r4, r2, sl
 8002858:	eb63 050b 	sbc.w	r5, r3, fp
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	00eb      	lsls	r3, r5, #3
 8002866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286a:	00e2      	lsls	r2, r4, #3
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	4643      	mov	r3, r8
 8002872:	18e3      	adds	r3, r4, r3
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	464b      	mov	r3, r9
 8002878:	eb45 0303 	adc.w	r3, r5, r3
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800288a:	4629      	mov	r1, r5
 800288c:	028b      	lsls	r3, r1, #10
 800288e:	4621      	mov	r1, r4
 8002890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002894:	4621      	mov	r1, r4
 8002896:	028a      	lsls	r2, r1, #10
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289e:	2200      	movs	r2, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	61fa      	str	r2, [r7, #28]
 80028a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a8:	f7fe f986 	bl	8000bb8 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4613      	mov	r3, r2
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3750      	adds	r7, #80	; 0x50
 80028dc:	46bd      	mov	sp, r7
 80028de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	007a1200 	.word	0x007a1200

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000004 	.word	0x20000004

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800290c:	f7ff fff0 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	08007050 	.word	0x08007050

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002934:	f7ff ffdc 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08007050 	.word	0x08007050

08002958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e07b      	b.n	8002a62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297a:	d009      	beq.n	8002990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
 8002982:	e005      	b.n	8002990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fd4a 	bl	8001444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	ea42 0103 	orr.w	r1, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0104 	and.w	r1, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f003 0210 	and.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_SPI_Transmit_IT+0x20>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e06f      	b.n	8002b6c <HAL_SPI_Transmit_IT+0x100>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_SPI_Transmit_IT+0x34>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aa4:	e05d      	b.n	8002b62 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ab6:	e054      	b.n	8002b62 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2203      	movs	r2, #3
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <HAL_SPI_Transmit_IT+0x10c>)
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
 8002afe:	e002      	b.n	8002b06 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_SPI_Transmit_IT+0x110>)
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0e:	d10f      	bne.n	8002b30 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002b3e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b40      	cmp	r3, #64	; 0x40
 8002b4c:	d008      	beq.n	8002b60 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e000      	b.n	8002b62 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8002b60:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	08003275 	.word	0x08003275
 8002b7c:	0800322f 	.word	0x0800322f

08002b80 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d110      	bne.n	8002bbc <HAL_SPI_Receive_IT+0x3c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba2:	d10b      	bne.n	8002bbc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f882 	bl	8002cbc <HAL_SPI_TransmitReceive_IT>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	e076      	b.n	8002caa <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_SPI_Receive_IT+0x4a>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e06f      	b.n	8002caa <HAL_SPI_Receive_IT+0x12a>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d002      	beq.n	8002be4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002be2:	e05d      	b.n	8002ca0 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_SPI_Receive_IT+0x70>
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bf4:	e054      	b.n	8002ca0 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_SPI_Receive_IT+0x134>)
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3c:	e002      	b.n	8002c44 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <HAL_SPI_Receive_IT+0x138>)
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4c:	d10f      	bne.n	8002c6e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002c7c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d008      	beq.n	8002c9e <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e000      	b.n	8002ca0 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8002c9e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	080031e9 	.word	0x080031e9
 8002cb8:	0800319f 	.word	0x0800319f

08002cbc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_SPI_TransmitReceive_IT+0x20>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e075      	b.n	8002dc8 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cf2:	7dbb      	ldrb	r3, [r7, #22]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d00d      	beq.n	8002d14 <HAL_SPI_TransmitReceive_IT+0x58>
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cfe:	d106      	bne.n	8002d0e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HAL_SPI_TransmitReceive_IT+0x52>
 8002d08:	7dbb      	ldrb	r3, [r7, #22]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d002      	beq.n	8002d14 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d12:	e054      	b.n	8002dbe <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d2a:	e048      	b.n	8002dbe <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d003      	beq.n	8002d40 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	887a      	ldrh	r2, [r7, #2]
 8002d56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	887a      	ldrh	r2, [r7, #2]
 8002d62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
 8002d7e:	e005      	b.n	8002d8c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <HAL_SPI_TransmitReceive_IT+0x120>)
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <HAL_SPI_TransmitReceive_IT+0x124>)
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d008      	beq.n	8002dbc <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e000      	b.n	8002dbe <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002dbc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	080030e1 	.word	0x080030e1
 8002dd8:	08003141 	.word	0x08003141
 8002ddc:	0800301d 	.word	0x0800301d
 8002de0:	08003081 	.word	0x08003081

08002de4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10e      	bne.n	8002e24 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
    return;
 8002e22:	e0ce      	b.n	8002fc2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_SPI_IRQHandler+0x5e>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
    return;
 8002e40:	e0bf      	b.n	8002fc2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_SPI_IRQHandler+0x7e>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80b0 	beq.w	8002fc2 <HAL_SPI_IRQHandler+0x1de>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80aa 	beq.w	8002fc2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d011      	beq.n	8002ea8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
        return;
 8002ebe:	e080      	b.n	8002fc2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d014      	beq.n	8002ef4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	f043 0208 	orr.w	r2, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d04f      	beq.n	8002fc0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f2e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <HAL_SPI_IRQHandler+0x168>
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d034      	beq.n	8002fb6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0203 	bic.w	r2, r2, #3
 8002f5a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d011      	beq.n	8002f88 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_SPI_IRQHandler+0x1e4>)
 8002f6a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fe7e 	bl	8001c72 <HAL_DMA_Abort_IT>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d016      	beq.n	8002fbe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_SPI_IRQHandler+0x1e4>)
 8002f96:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fe68 	bl	8001c72 <HAL_DMA_Abort_IT>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002fb4:	e003      	b.n	8002fbe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f812 	bl	8002fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002fbc:	e000      	b.n	8002fc0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002fbe:	bf00      	nop
    return;
 8002fc0:	bf00      	nop
  }
}
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	08002ff5 	.word	0x08002ff5

08002fcc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff ffe6 	bl	8002fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f103 020c 	add.w	r2, r3, #12
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10f      	bne.n	8003078 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003066:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa50 	bl	8003518 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10f      	bne.n	80030d8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa20 	bl	8003518 <SPI_CloseRxTx_ISR>
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	b292      	uxth	r2, r2
 80030f4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	1c9a      	adds	r2, r3, #2
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10f      	bne.n	8003138 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003126:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9f0 	bl	8003518 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003184:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f9c1 	bl	8003518 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f103 020c 	add.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	7812      	ldrb	r2, [r2, #0]
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa10 	bl	8003600 <SPI_CloseRx_ISR>
  }
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	b292      	uxth	r2, r2
 80031fc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f9ed 	bl	8003600 <SPI_CloseRx_ISR>
  }
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fa0a 	bl	8003680 <SPI_CloseTx_ISR>
  }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f9e8 	bl	8003680 <SPI_CloseTx_ISR>
  }
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c8:	f7fe fb22 	bl	8001910 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d8:	f7fe fb1a 	bl	8001910 <HAL_GetTick>
 80032dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	015b      	lsls	r3, r3, #5
 80032e4:	0d1b      	lsrs	r3, r3, #20
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ee:	e054      	b.n	800339a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d050      	beq.n	800339a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f8:	f7fe fb0a 	bl	8001910 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	429a      	cmp	r2, r3
 8003306:	d902      	bls.n	800330e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d13d      	bne.n	800338a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800331c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003326:	d111      	bne.n	800334c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	d004      	beq.n	800333c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d107      	bne.n	800334c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003354:	d10f      	bne.n	8003376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e017      	b.n	80033ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3b01      	subs	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d19b      	bne.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000004 	.word	0x20000004

080033c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033dc:	d111      	bne.n	8003402 <SPI_EndRxTransaction+0x3a>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e6:	d004      	beq.n	80033f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f0:	d107      	bne.n	8003402 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340a:	d12a      	bne.n	8003462 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d012      	beq.n	800343c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff ff49 	bl	80032b8 <SPI_WaitFlagStateUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02d      	beq.n	8003488 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e026      	b.n	800348a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2200      	movs	r2, #0
 8003444:	2101      	movs	r1, #1
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff36 	bl	80032b8 <SPI_WaitFlagStateUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01a      	beq.n	8003488 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e013      	b.n	800348a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2200      	movs	r2, #0
 800346a:	2101      	movs	r1, #1
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff ff23 	bl	80032b8 <SPI_WaitFlagStateUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e000      	b.n	800348a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <SPI_EndRxTxTransaction+0x7c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <SPI_EndRxTxTransaction+0x80>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0d5b      	lsrs	r3, r3, #21
 80034ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034be:	d112      	bne.n	80034e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2200      	movs	r2, #0
 80034c8:	2180      	movs	r1, #128	; 0x80
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff fef4 	bl	80032b8 <SPI_WaitFlagStateUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e00f      	b.n	8003506 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d0f2      	beq.n	80034e6 <SPI_EndRxTxTransaction+0x52>
 8003500:	e000      	b.n	8003504 <SPI_EndRxTxTransaction+0x70>
        break;
 8003502:	bf00      	nop
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000004 	.word	0x20000004
 8003514:	165e9f81 	.word	0x165e9f81

08003518 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <SPI_CloseRxTx_ISR+0xe0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a35      	ldr	r2, [pc, #212]	; (80035fc <SPI_CloseRxTx_ISR+0xe4>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0a5b      	lsrs	r3, r3, #9
 800352c:	2264      	movs	r2, #100	; 0x64
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003534:	f7fe f9ec 	bl	8001910 <HAL_GetTick>
 8003538:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0220 	bic.w	r2, r2, #32
 8003548:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d106      	bne.n	800355e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800355c:	e009      	b.n	8003572 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	3b01      	subs	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0eb      	beq.n	800354a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	2164      	movs	r1, #100	; 0x64
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff8c 	bl	8003494 <SPI_EndRxTxTransaction>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d115      	bne.n	80035e0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d107      	bne.n	80035d0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fd fef5 	bl	80013b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80035ce:	e00e      	b.n	80035ee <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fcf7 	bl	8002fcc <HAL_SPI_TxRxCpltCallback>
}
 80035de:	e006      	b.n	80035ee <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff fcf9 	bl	8002fe0 <HAL_SPI_ErrorCallback>
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000004 	.word	0x20000004
 80035fc:	057619f1 	.word	0x057619f1

08003600 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003616:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003618:	f7fe f97a 	bl	8001910 <HAL_GetTick>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	2164      	movs	r1, #100	; 0x64
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fed0 	bl	80033c8 <SPI_EndRxTransaction>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd fea5 	bl	80013b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800366e:	e002      	b.n	8003676 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fcb5 	bl	8002fe0 <HAL_SPI_ErrorCallback>
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003688:	4b2c      	ldr	r3, [pc, #176]	; (800373c <SPI_CloseTx_ISR+0xbc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <SPI_CloseTx_ISR+0xc0>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0a5b      	lsrs	r3, r3, #9
 8003694:	2264      	movs	r2, #100	; 0x64
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800369c:	f7fe f938 	bl	8001910 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036b4:	e009      	b.n	80036ca <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0eb      	beq.n	80036a2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	2164      	movs	r1, #100	; 0x64
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fed8 	bl	8003494 <SPI_EndRxTxTransaction>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff fc5b 	bl	8002fe0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800372a:	e002      	b.n	8003732 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7fd fe21 	bl	8001374 <HAL_SPI_TxCpltCallback>
}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000004 	.word	0x20000004
 8003740:	057619f1 	.word	0x057619f1

08003744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e03f      	b.n	80037d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd feda 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fc7b 	bl	8004084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800379c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b0ba      	sub	sp, #232	; 0xe8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800381e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_UART_IRQHandler+0x66>
 8003832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fb65 	bl	8003f0e <UART_Receive_IT>
      return;
 8003844:	e256      	b.n	8003cf4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80de 	beq.w	8003a0c <HAL_UART_IRQHandler+0x22c>
 8003850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800385c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003860:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80d1 	beq.w	8003a0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_UART_IRQHandler+0xae>
 8003876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_UART_IRQHandler+0xd2>
 800389a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f043 0202 	orr.w	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_UART_IRQHandler+0xf6>
 80038be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f043 0204 	orr.w	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d011      	beq.n	8003906 <HAL_UART_IRQHandler+0x126>
 80038e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0208 	orr.w	r2, r3, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 81ed 	beq.w	8003cea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_UART_IRQHandler+0x14e>
 800391c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 faf0 	bl	8003f0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <HAL_UART_IRQHandler+0x17a>
 8003952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04f      	beq.n	80039fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9f8 	bl	8003d50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d141      	bne.n	80039f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3314      	adds	r3, #20
 8003996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800399a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800399e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1d9      	bne.n	800396e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d013      	beq.n	80039ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	4a7d      	ldr	r2, [pc, #500]	; (8003bbc <HAL_UART_IRQHandler+0x3dc>)
 80039c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe f94f 	bl	8001c72 <HAL_DMA_Abort_IT>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d016      	beq.n	8003a08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039e4:	4610      	mov	r0, r2
 80039e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	e00e      	b.n	8003a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f99a 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	e00a      	b.n	8003a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f996 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e006      	b.n	8003a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f992 	bl	8003d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a06:	e170      	b.n	8003cea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	bf00      	nop
    return;
 8003a0a:	e16e      	b.n	8003cea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f040 814a 	bne.w	8003caa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8143 	beq.w	8003caa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 813c 	beq.w	8003caa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	f040 80b4 	bne.w	8003bc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8140 	beq.w	8003cee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a76:	429a      	cmp	r2, r3
 8003a78:	f080 8139 	bcs.w	8003cee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8e:	f000 8088 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	330c      	adds	r3, #12
 8003a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003abe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1d9      	bne.n	8003a92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3314      	adds	r3, #20
 8003afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e1      	bne.n	8003ade <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3314      	adds	r3, #20
 8003b20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e3      	bne.n	8003b1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b72:	f023 0310 	bic.w	r3, r3, #16
 8003b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b84:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e3      	bne.n	8003b60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fd fff8 	bl	8001b92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8c0 	bl	8003d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb8:	e099      	b.n	8003cee <HAL_UART_IRQHandler+0x50e>
 8003bba:	bf00      	nop
 8003bbc:	08003e17 	.word	0x08003e17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 808b 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8086 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c0a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e3      	bne.n	8003be6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c42:	633a      	str	r2, [r7, #48]	; 0x30
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e3      	bne.n	8003c1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0310 	bic.w	r3, r3, #16
 8003c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c88:	61fa      	str	r2, [r7, #28]
 8003c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	617b      	str	r3, [r7, #20]
   return(result);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e3      	bne.n	8003c64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f848 	bl	8003d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca8:	e023      	b.n	8003cf2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_UART_IRQHandler+0x4ea>
 8003cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8bb 	bl	8003e3e <UART_Transmit_IT>
    return;
 8003cc8:	e014      	b.n	8003cf4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x514>
 8003cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f8fb 	bl	8003ede <UART_EndTransmit_IT>
    return;
 8003ce8:	e004      	b.n	8003cf4 <HAL_UART_IRQHandler+0x514>
    return;
 8003cea:	bf00      	nop
 8003cec:	e002      	b.n	8003cf4 <HAL_UART_IRQHandler+0x514>
      return;
 8003cee:	bf00      	nop
 8003cf0:	e000      	b.n	8003cf4 <HAL_UART_IRQHandler+0x514>
      return;
 8003cf2:	bf00      	nop
  }
}
 8003cf4:	37e8      	adds	r7, #232	; 0xe8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop

08003cfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b095      	sub	sp, #84	; 0x54
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d78:	643a      	str	r2, [r7, #64]	; 0x40
 8003d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d119      	bne.n	8003dfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f023 0310 	bic.w	r3, r3, #16
 8003dde:	647b      	str	r3, [r7, #68]	; 0x44
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de8:	61ba      	str	r2, [r7, #24]
 8003dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	6979      	ldr	r1, [r7, #20]
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	613b      	str	r3, [r7, #16]
   return(result);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e5      	bne.n	8003dc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e0a:	bf00      	nop
 8003e0c:	3754      	adds	r7, #84	; 0x54
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff ff77 	bl	8003d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b21      	cmp	r3, #33	; 0x21
 8003e50:	d13e      	bne.n	8003ed0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	d114      	bne.n	8003e86 <UART_Transmit_IT+0x48>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d110      	bne.n	8003e86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	621a      	str	r2, [r3, #32]
 8003e84:	e008      	b.n	8003e98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	1c59      	adds	r1, r3, #1
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6211      	str	r1, [r2, #32]
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10f      	bne.n	8003ecc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fefc 	bl	8003cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b08c      	sub	sp, #48	; 0x30
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b22      	cmp	r3, #34	; 0x22
 8003f20:	f040 80ab 	bne.w	800407a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d117      	bne.n	8003f5e <UART_Receive_IT+0x50>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d113      	bne.n	8003f5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f5c:	e026      	b.n	8003fac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f70:	d007      	beq.n	8003f82 <UART_Receive_IT+0x74>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <UART_Receive_IT+0x82>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e008      	b.n	8003fa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d15a      	bne.n	8004076 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0220 	bic.w	r2, r2, #32
 8003fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d135      	bne.n	800406c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	613b      	str	r3, [r7, #16]
   return(result);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f023 0310 	bic.w	r3, r3, #16
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004026:	623a      	str	r2, [r7, #32]
 8004028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	69f9      	ldr	r1, [r7, #28]
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	61bb      	str	r3, [r7, #24]
   return(result);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e5      	bne.n	8004006 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b10      	cmp	r3, #16
 8004046:	d10a      	bne.n	800405e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fe67 	bl	8003d38 <HAL_UARTEx_RxEventCallback>
 800406a:	e002      	b.n	8004072 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff fe4f 	bl	8003d10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e002      	b.n	800407c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3730      	adds	r7, #48	; 0x30
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004088:	b0c0      	sub	sp, #256	; 0x100
 800408a:	af00      	add	r7, sp, #0
 800408c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	68d9      	ldr	r1, [r3, #12]
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	ea40 0301 	orr.w	r3, r0, r1
 80040ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040dc:	f021 010c 	bic.w	r1, r1, #12
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040ea:	430b      	orrs	r3, r1
 80040ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	6999      	ldr	r1, [r3, #24]
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	ea40 0301 	orr.w	r3, r0, r1
 800410a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4b8f      	ldr	r3, [pc, #572]	; (8004350 <UART_SetConfig+0x2cc>)
 8004114:	429a      	cmp	r2, r3
 8004116:	d005      	beq.n	8004124 <UART_SetConfig+0xa0>
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b8d      	ldr	r3, [pc, #564]	; (8004354 <UART_SetConfig+0x2d0>)
 8004120:	429a      	cmp	r2, r3
 8004122:	d104      	bne.n	800412e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7fe fc04 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 8004128:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800412c:	e003      	b.n	8004136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800412e:	f7fe fbeb 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8004132:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004140:	f040 810c 	bne.w	800435c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004148:	2200      	movs	r2, #0
 800414a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800414e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	1891      	adds	r1, r2, r2
 800415c:	65b9      	str	r1, [r7, #88]	; 0x58
 800415e:	415b      	adcs	r3, r3
 8004160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004166:	4621      	mov	r1, r4
 8004168:	eb12 0801 	adds.w	r8, r2, r1
 800416c:	4629      	mov	r1, r5
 800416e:	eb43 0901 	adc.w	r9, r3, r1
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800417e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004186:	4690      	mov	r8, r2
 8004188:	4699      	mov	r9, r3
 800418a:	4623      	mov	r3, r4
 800418c:	eb18 0303 	adds.w	r3, r8, r3
 8004190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004194:	462b      	mov	r3, r5
 8004196:	eb49 0303 	adc.w	r3, r9, r3
 800419a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041b2:	460b      	mov	r3, r1
 80041b4:	18db      	adds	r3, r3, r3
 80041b6:	653b      	str	r3, [r7, #80]	; 0x50
 80041b8:	4613      	mov	r3, r2
 80041ba:	eb42 0303 	adc.w	r3, r2, r3
 80041be:	657b      	str	r3, [r7, #84]	; 0x54
 80041c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041c8:	f7fc fcf6 	bl	8000bb8 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4b61      	ldr	r3, [pc, #388]	; (8004358 <UART_SetConfig+0x2d4>)
 80041d2:	fba3 2302 	umull	r2, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	011c      	lsls	r4, r3, #4
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	1891      	adds	r1, r2, r2
 80041f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80041f4:	415b      	adcs	r3, r3
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041fc:	4641      	mov	r1, r8
 80041fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004202:	4649      	mov	r1, r9
 8004204:	eb43 0b01 	adc.w	fp, r3, r1
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800421c:	4692      	mov	sl, r2
 800421e:	469b      	mov	fp, r3
 8004220:	4643      	mov	r3, r8
 8004222:	eb1a 0303 	adds.w	r3, sl, r3
 8004226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800422a:	464b      	mov	r3, r9
 800422c:	eb4b 0303 	adc.w	r3, fp, r3
 8004230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004240:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004248:	460b      	mov	r3, r1
 800424a:	18db      	adds	r3, r3, r3
 800424c:	643b      	str	r3, [r7, #64]	; 0x40
 800424e:	4613      	mov	r3, r2
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	647b      	str	r3, [r7, #68]	; 0x44
 8004256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800425a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800425e:	f7fc fcab 	bl	8000bb8 <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4611      	mov	r1, r2
 8004268:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <UART_SetConfig+0x2d4>)
 800426a:	fba3 2301 	umull	r2, r3, r3, r1
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2264      	movs	r2, #100	; 0x64
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	1acb      	subs	r3, r1, r3
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800427e:	4b36      	ldr	r3, [pc, #216]	; (8004358 <UART_SetConfig+0x2d4>)
 8004280:	fba3 2302 	umull	r2, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800428c:	441c      	add	r4, r3
 800428e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004298:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800429c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80042a8:	415b      	adcs	r3, r3
 80042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042b0:	4641      	mov	r1, r8
 80042b2:	1851      	adds	r1, r2, r1
 80042b4:	6339      	str	r1, [r7, #48]	; 0x30
 80042b6:	4649      	mov	r1, r9
 80042b8:	414b      	adcs	r3, r1
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042c8:	4659      	mov	r1, fp
 80042ca:	00cb      	lsls	r3, r1, #3
 80042cc:	4651      	mov	r1, sl
 80042ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d2:	4651      	mov	r1, sl
 80042d4:	00ca      	lsls	r2, r1, #3
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	4642      	mov	r2, r8
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042e4:	464b      	mov	r3, r9
 80042e6:	460a      	mov	r2, r1
 80042e8:	eb42 0303 	adc.w	r3, r2, r3
 80042ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004304:	460b      	mov	r3, r1
 8004306:	18db      	adds	r3, r3, r3
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
 800430a:	4613      	mov	r3, r2
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800431a:	f7fc fc4d 	bl	8000bb8 <__aeabi_uldivmod>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <UART_SetConfig+0x2d4>)
 8004324:	fba3 1302 	umull	r1, r3, r3, r2
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	2164      	movs	r1, #100	; 0x64
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	3332      	adds	r3, #50	; 0x32
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <UART_SetConfig+0x2d4>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	f003 0207 	and.w	r2, r3, #7
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4422      	add	r2, r4
 800434a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800434c:	e106      	b.n	800455c <UART_SetConfig+0x4d8>
 800434e:	bf00      	nop
 8004350:	40011000 	.word	0x40011000
 8004354:	40011400 	.word	0x40011400
 8004358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800435c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004360:	2200      	movs	r2, #0
 8004362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004366:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800436a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800436e:	4642      	mov	r2, r8
 8004370:	464b      	mov	r3, r9
 8004372:	1891      	adds	r1, r2, r2
 8004374:	6239      	str	r1, [r7, #32]
 8004376:	415b      	adcs	r3, r3
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
 800437a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800437e:	4641      	mov	r1, r8
 8004380:	1854      	adds	r4, r2, r1
 8004382:	4649      	mov	r1, r9
 8004384:	eb43 0501 	adc.w	r5, r3, r1
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	00eb      	lsls	r3, r5, #3
 8004392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004396:	00e2      	lsls	r2, r4, #3
 8004398:	4614      	mov	r4, r2
 800439a:	461d      	mov	r5, r3
 800439c:	4643      	mov	r3, r8
 800439e:	18e3      	adds	r3, r4, r3
 80043a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043a4:	464b      	mov	r3, r9
 80043a6:	eb45 0303 	adc.w	r3, r5, r3
 80043aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043ca:	4629      	mov	r1, r5
 80043cc:	008b      	lsls	r3, r1, #2
 80043ce:	4621      	mov	r1, r4
 80043d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d4:	4621      	mov	r1, r4
 80043d6:	008a      	lsls	r2, r1, #2
 80043d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043dc:	f7fc fbec 	bl	8000bb8 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4b60      	ldr	r3, [pc, #384]	; (8004568 <UART_SetConfig+0x4e4>)
 80043e6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	011c      	lsls	r4, r3, #4
 80043ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	1891      	adds	r1, r2, r2
 8004406:	61b9      	str	r1, [r7, #24]
 8004408:	415b      	adcs	r3, r3
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004410:	4641      	mov	r1, r8
 8004412:	1851      	adds	r1, r2, r1
 8004414:	6139      	str	r1, [r7, #16]
 8004416:	4649      	mov	r1, r9
 8004418:	414b      	adcs	r3, r1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004428:	4659      	mov	r1, fp
 800442a:	00cb      	lsls	r3, r1, #3
 800442c:	4651      	mov	r1, sl
 800442e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004432:	4651      	mov	r1, sl
 8004434:	00ca      	lsls	r2, r1, #3
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	4603      	mov	r3, r0
 800443c:	4642      	mov	r2, r8
 800443e:	189b      	adds	r3, r3, r2
 8004440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004444:	464b      	mov	r3, r9
 8004446:	460a      	mov	r2, r1
 8004448:	eb42 0303 	adc.w	r3, r2, r3
 800444c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	67bb      	str	r3, [r7, #120]	; 0x78
 800445a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004468:	4649      	mov	r1, r9
 800446a:	008b      	lsls	r3, r1, #2
 800446c:	4641      	mov	r1, r8
 800446e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004472:	4641      	mov	r1, r8
 8004474:	008a      	lsls	r2, r1, #2
 8004476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800447a:	f7fc fb9d 	bl	8000bb8 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4611      	mov	r1, r2
 8004484:	4b38      	ldr	r3, [pc, #224]	; (8004568 <UART_SetConfig+0x4e4>)
 8004486:	fba3 2301 	umull	r2, r3, r3, r1
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2264      	movs	r2, #100	; 0x64
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	1acb      	subs	r3, r1, r3
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	3332      	adds	r3, #50	; 0x32
 8004498:	4a33      	ldr	r2, [pc, #204]	; (8004568 <UART_SetConfig+0x4e4>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a4:	441c      	add	r4, r3
 80044a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044aa:	2200      	movs	r2, #0
 80044ac:	673b      	str	r3, [r7, #112]	; 0x70
 80044ae:	677a      	str	r2, [r7, #116]	; 0x74
 80044b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	415b      	adcs	r3, r3
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6039      	str	r1, [r7, #0]
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f6:	464b      	mov	r3, r9
 80044f8:	460a      	mov	r2, r1
 80044fa:	eb42 0303 	adc.w	r3, r2, r3
 80044fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	663b      	str	r3, [r7, #96]	; 0x60
 800450a:	667a      	str	r2, [r7, #100]	; 0x64
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004518:	4649      	mov	r1, r9
 800451a:	008b      	lsls	r3, r1, #2
 800451c:	4641      	mov	r1, r8
 800451e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004522:	4641      	mov	r1, r8
 8004524:	008a      	lsls	r2, r1, #2
 8004526:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800452a:	f7fc fb45 	bl	8000bb8 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <UART_SetConfig+0x4e4>)
 8004534:	fba3 1302 	umull	r1, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2164      	movs	r1, #100	; 0x64
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a08      	ldr	r2, [pc, #32]	; (8004568 <UART_SetConfig+0x4e4>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4422      	add	r2, r4
 800455a:	609a      	str	r2, [r3, #8]
}
 800455c:	bf00      	nop
 800455e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004562:	46bd      	mov	sp, r7
 8004564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004568:	51eb851f 	.word	0x51eb851f

0800456c <iis3dwb_read_reg>:
  *
  */
int32_t __weak iis3dwb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	461a      	mov	r2, r3
 8004578:	460b      	mov	r3, r1
 800457a:	72fb      	strb	r3, [r7, #11]
 800457c:	4613      	mov	r3, r2
 800457e:	813b      	strh	r3, [r7, #8]
  return ctx->read_reg(ctx->handle, reg, data, len);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685c      	ldr	r4, [r3, #4]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68d8      	ldr	r0, [r3, #12]
 8004588:	893b      	ldrh	r3, [r7, #8]
 800458a:	7af9      	ldrb	r1, [r7, #11]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	47a0      	blx	r4
 8004590:	4603      	mov	r3, r0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	bd90      	pop	{r4, r7, pc}

0800459a <iis3dwb_write_reg>:
  *
  */
int32_t __weak iis3dwb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800459a:	b590      	push	{r4, r7, lr}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	461a      	mov	r2, r3
 80045a6:	460b      	mov	r3, r1
 80045a8:	72fb      	strb	r3, [r7, #11]
 80045aa:	4613      	mov	r3, r2
 80045ac:	813b      	strh	r3, [r7, #8]
  return ctx->write_reg(ctx->handle, reg, data, len);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681c      	ldr	r4, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	68d8      	ldr	r0, [r3, #12]
 80045b6:	893b      	ldrh	r3, [r7, #8]
 80045b8:	7af9      	ldrb	r1, [r7, #11]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	47a0      	blx	r4
 80045be:	4603      	mov	r3, r0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd90      	pop	{r4, r7, pc}

080045c8 <iis3dwb_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t iis3dwb_from_fs4g_to_mg(int16_t lsb)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 80045d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045de:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80045f4 <iis3dwb_from_fs4g_to_mg+0x2c>
 80045e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80045e6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	3df9db23 	.word	0x3df9db23

080045f8 <iis3dwb_acceleration_raw_get>:
  * @param  val    Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];

  const int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
 8004602:	f107 020c 	add.w	r2, r7, #12
 8004606:	2306      	movs	r3, #6
 8004608:	2128      	movs	r1, #40	; 0x28
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ffae 	bl	800456c <iis3dwb_read_reg>
 8004610:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004612:	7b7b      	ldrb	r3, [r7, #13]
 8004614:	b21a      	sxth	r2, r3
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004620:	b29b      	uxth	r3, r3
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	b29a      	uxth	r2, r3
 8004626:	7b3b      	ldrb	r3, [r7, #12]
 8004628:	b29b      	uxth	r3, r3
 800462a:	4413      	add	r3, r2
 800462c:	b29b      	uxth	r3, r3
 800462e:	b21a      	sxth	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	3302      	adds	r3, #2
 800463a:	b212      	sxth	r2, r2
 800463c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	3302      	adds	r3, #2
 8004642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004646:	b29b      	uxth	r3, r3
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	b29a      	uxth	r2, r3
 800464c:	7bbb      	ldrb	r3, [r7, #14]
 800464e:	b29b      	uxth	r3, r3
 8004650:	4413      	add	r3, r2
 8004652:	b29a      	uxth	r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	3302      	adds	r3, #2
 8004658:	b212      	sxth	r2, r2
 800465a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800465c:	7c7a      	ldrb	r2, [r7, #17]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	3304      	adds	r3, #4
 8004662:	b212      	sxth	r2, r2
 8004664:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	3304      	adds	r3, #4
 800466a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800466e:	b29b      	uxth	r3, r3
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	b29a      	uxth	r2, r3
 8004674:	7c3b      	ldrb	r3, [r7, #16]
 8004676:	b29b      	uxth	r3, r3
 8004678:	4413      	add	r3, r2
 800467a:	b29a      	uxth	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	3304      	adds	r3, #4
 8004680:	b212      	sxth	r2, r2
 8004682:	801a      	strh	r2, [r3, #0]

  return ret;
 8004684:	697b      	ldr	r3, [r7, #20]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  const int32_t ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8004698:	2301      	movs	r3, #1
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	210f      	movs	r1, #15
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ff64 	bl	800456c <iis3dwb_read_reg>
 80046a4:	60f8      	str	r0, [r7, #12]

  return ret;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <__cvt>:
 80046b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b4:	ec55 4b10 	vmov	r4, r5, d0
 80046b8:	2d00      	cmp	r5, #0
 80046ba:	460e      	mov	r6, r1
 80046bc:	4619      	mov	r1, r3
 80046be:	462b      	mov	r3, r5
 80046c0:	bfbb      	ittet	lt
 80046c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046c6:	461d      	movlt	r5, r3
 80046c8:	2300      	movge	r3, #0
 80046ca:	232d      	movlt	r3, #45	; 0x2d
 80046cc:	700b      	strb	r3, [r1, #0]
 80046ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046d4:	4691      	mov	r9, r2
 80046d6:	f023 0820 	bic.w	r8, r3, #32
 80046da:	bfbc      	itt	lt
 80046dc:	4622      	movlt	r2, r4
 80046de:	4614      	movlt	r4, r2
 80046e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046e4:	d005      	beq.n	80046f2 <__cvt+0x42>
 80046e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046ea:	d100      	bne.n	80046ee <__cvt+0x3e>
 80046ec:	3601      	adds	r6, #1
 80046ee:	2102      	movs	r1, #2
 80046f0:	e000      	b.n	80046f4 <__cvt+0x44>
 80046f2:	2103      	movs	r1, #3
 80046f4:	ab03      	add	r3, sp, #12
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	ab02      	add	r3, sp, #8
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	ec45 4b10 	vmov	d0, r4, r5
 8004700:	4653      	mov	r3, sl
 8004702:	4632      	mov	r2, r6
 8004704:	f000 fe48 	bl	8005398 <_dtoa_r>
 8004708:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800470c:	4607      	mov	r7, r0
 800470e:	d102      	bne.n	8004716 <__cvt+0x66>
 8004710:	f019 0f01 	tst.w	r9, #1
 8004714:	d022      	beq.n	800475c <__cvt+0xac>
 8004716:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800471a:	eb07 0906 	add.w	r9, r7, r6
 800471e:	d110      	bne.n	8004742 <__cvt+0x92>
 8004720:	783b      	ldrb	r3, [r7, #0]
 8004722:	2b30      	cmp	r3, #48	; 0x30
 8004724:	d10a      	bne.n	800473c <__cvt+0x8c>
 8004726:	2200      	movs	r2, #0
 8004728:	2300      	movs	r3, #0
 800472a:	4620      	mov	r0, r4
 800472c:	4629      	mov	r1, r5
 800472e:	f7fc f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004732:	b918      	cbnz	r0, 800473c <__cvt+0x8c>
 8004734:	f1c6 0601 	rsb	r6, r6, #1
 8004738:	f8ca 6000 	str.w	r6, [sl]
 800473c:	f8da 3000 	ldr.w	r3, [sl]
 8004740:	4499      	add	r9, r3
 8004742:	2200      	movs	r2, #0
 8004744:	2300      	movs	r3, #0
 8004746:	4620      	mov	r0, r4
 8004748:	4629      	mov	r1, r5
 800474a:	f7fc f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800474e:	b108      	cbz	r0, 8004754 <__cvt+0xa4>
 8004750:	f8cd 900c 	str.w	r9, [sp, #12]
 8004754:	2230      	movs	r2, #48	; 0x30
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	454b      	cmp	r3, r9
 800475a:	d307      	bcc.n	800476c <__cvt+0xbc>
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004760:	1bdb      	subs	r3, r3, r7
 8004762:	4638      	mov	r0, r7
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	b004      	add	sp, #16
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	1c59      	adds	r1, r3, #1
 800476e:	9103      	str	r1, [sp, #12]
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e7f0      	b.n	8004756 <__cvt+0xa6>

08004774 <__exponent>:
 8004774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004776:	4603      	mov	r3, r0
 8004778:	2900      	cmp	r1, #0
 800477a:	bfb8      	it	lt
 800477c:	4249      	neglt	r1, r1
 800477e:	f803 2b02 	strb.w	r2, [r3], #2
 8004782:	bfb4      	ite	lt
 8004784:	222d      	movlt	r2, #45	; 0x2d
 8004786:	222b      	movge	r2, #43	; 0x2b
 8004788:	2909      	cmp	r1, #9
 800478a:	7042      	strb	r2, [r0, #1]
 800478c:	dd2a      	ble.n	80047e4 <__exponent+0x70>
 800478e:	f10d 0207 	add.w	r2, sp, #7
 8004792:	4617      	mov	r7, r2
 8004794:	260a      	movs	r6, #10
 8004796:	4694      	mov	ip, r2
 8004798:	fb91 f5f6 	sdiv	r5, r1, r6
 800479c:	fb06 1415 	mls	r4, r6, r5, r1
 80047a0:	3430      	adds	r4, #48	; 0x30
 80047a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80047a6:	460c      	mov	r4, r1
 80047a8:	2c63      	cmp	r4, #99	; 0x63
 80047aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80047ae:	4629      	mov	r1, r5
 80047b0:	dcf1      	bgt.n	8004796 <__exponent+0x22>
 80047b2:	3130      	adds	r1, #48	; 0x30
 80047b4:	f1ac 0402 	sub.w	r4, ip, #2
 80047b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80047bc:	1c41      	adds	r1, r0, #1
 80047be:	4622      	mov	r2, r4
 80047c0:	42ba      	cmp	r2, r7
 80047c2:	d30a      	bcc.n	80047da <__exponent+0x66>
 80047c4:	f10d 0209 	add.w	r2, sp, #9
 80047c8:	eba2 020c 	sub.w	r2, r2, ip
 80047cc:	42bc      	cmp	r4, r7
 80047ce:	bf88      	it	hi
 80047d0:	2200      	movhi	r2, #0
 80047d2:	4413      	add	r3, r2
 80047d4:	1a18      	subs	r0, r3, r0
 80047d6:	b003      	add	sp, #12
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80047de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80047e2:	e7ed      	b.n	80047c0 <__exponent+0x4c>
 80047e4:	2330      	movs	r3, #48	; 0x30
 80047e6:	3130      	adds	r1, #48	; 0x30
 80047e8:	7083      	strb	r3, [r0, #2]
 80047ea:	70c1      	strb	r1, [r0, #3]
 80047ec:	1d03      	adds	r3, r0, #4
 80047ee:	e7f1      	b.n	80047d4 <__exponent+0x60>

080047f0 <_printf_float>:
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	ed2d 8b02 	vpush	{d8}
 80047f8:	b08d      	sub	sp, #52	; 0x34
 80047fa:	460c      	mov	r4, r1
 80047fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004800:	4616      	mov	r6, r2
 8004802:	461f      	mov	r7, r3
 8004804:	4605      	mov	r5, r0
 8004806:	f000 fcc7 	bl	8005198 <_localeconv_r>
 800480a:	f8d0 a000 	ldr.w	sl, [r0]
 800480e:	4650      	mov	r0, sl
 8004810:	f7fb fd36 	bl	8000280 <strlen>
 8004814:	2300      	movs	r3, #0
 8004816:	930a      	str	r3, [sp, #40]	; 0x28
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	9305      	str	r3, [sp, #20]
 800481c:	f8d8 3000 	ldr.w	r3, [r8]
 8004820:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004824:	3307      	adds	r3, #7
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	f103 0208 	add.w	r2, r3, #8
 800482e:	f8c8 2000 	str.w	r2, [r8]
 8004832:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800483a:	9307      	str	r3, [sp, #28]
 800483c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004840:	ee08 0a10 	vmov	s16, r0
 8004844:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800484c:	4b9e      	ldr	r3, [pc, #632]	; (8004ac8 <_printf_float+0x2d8>)
 800484e:	f04f 32ff 	mov.w	r2, #4294967295
 8004852:	f7fc f973 	bl	8000b3c <__aeabi_dcmpun>
 8004856:	bb88      	cbnz	r0, 80048bc <_printf_float+0xcc>
 8004858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800485c:	4b9a      	ldr	r3, [pc, #616]	; (8004ac8 <_printf_float+0x2d8>)
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	f7fc f94d 	bl	8000b00 <__aeabi_dcmple>
 8004866:	bb48      	cbnz	r0, 80048bc <_printf_float+0xcc>
 8004868:	2200      	movs	r2, #0
 800486a:	2300      	movs	r3, #0
 800486c:	4640      	mov	r0, r8
 800486e:	4649      	mov	r1, r9
 8004870:	f7fc f93c 	bl	8000aec <__aeabi_dcmplt>
 8004874:	b110      	cbz	r0, 800487c <_printf_float+0x8c>
 8004876:	232d      	movs	r3, #45	; 0x2d
 8004878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487c:	4a93      	ldr	r2, [pc, #588]	; (8004acc <_printf_float+0x2dc>)
 800487e:	4b94      	ldr	r3, [pc, #592]	; (8004ad0 <_printf_float+0x2e0>)
 8004880:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004884:	bf94      	ite	ls
 8004886:	4690      	movls	r8, r2
 8004888:	4698      	movhi	r8, r3
 800488a:	2303      	movs	r3, #3
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	9b05      	ldr	r3, [sp, #20]
 8004890:	f023 0304 	bic.w	r3, r3, #4
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	f04f 0900 	mov.w	r9, #0
 800489a:	9700      	str	r7, [sp, #0]
 800489c:	4633      	mov	r3, r6
 800489e:	aa0b      	add	r2, sp, #44	; 0x2c
 80048a0:	4621      	mov	r1, r4
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 f9da 	bl	8004c5c <_printf_common>
 80048a8:	3001      	adds	r0, #1
 80048aa:	f040 8090 	bne.w	80049ce <_printf_float+0x1de>
 80048ae:	f04f 30ff 	mov.w	r0, #4294967295
 80048b2:	b00d      	add	sp, #52	; 0x34
 80048b4:	ecbd 8b02 	vpop	{d8}
 80048b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	4640      	mov	r0, r8
 80048c2:	4649      	mov	r1, r9
 80048c4:	f7fc f93a 	bl	8000b3c <__aeabi_dcmpun>
 80048c8:	b140      	cbz	r0, 80048dc <_printf_float+0xec>
 80048ca:	464b      	mov	r3, r9
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bfbc      	itt	lt
 80048d0:	232d      	movlt	r3, #45	; 0x2d
 80048d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048d6:	4a7f      	ldr	r2, [pc, #508]	; (8004ad4 <_printf_float+0x2e4>)
 80048d8:	4b7f      	ldr	r3, [pc, #508]	; (8004ad8 <_printf_float+0x2e8>)
 80048da:	e7d1      	b.n	8004880 <_printf_float+0x90>
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80048e2:	9206      	str	r2, [sp, #24]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	d13f      	bne.n	8004968 <_printf_float+0x178>
 80048e8:	2306      	movs	r3, #6
 80048ea:	6063      	str	r3, [r4, #4]
 80048ec:	9b05      	ldr	r3, [sp, #20]
 80048ee:	6861      	ldr	r1, [r4, #4]
 80048f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048f4:	2300      	movs	r3, #0
 80048f6:	9303      	str	r3, [sp, #12]
 80048f8:	ab0a      	add	r3, sp, #40	; 0x28
 80048fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048fe:	ab09      	add	r3, sp, #36	; 0x24
 8004900:	ec49 8b10 	vmov	d0, r8, r9
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800490c:	4628      	mov	r0, r5
 800490e:	f7ff fecf 	bl	80046b0 <__cvt>
 8004912:	9b06      	ldr	r3, [sp, #24]
 8004914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004916:	2b47      	cmp	r3, #71	; 0x47
 8004918:	4680      	mov	r8, r0
 800491a:	d108      	bne.n	800492e <_printf_float+0x13e>
 800491c:	1cc8      	adds	r0, r1, #3
 800491e:	db02      	blt.n	8004926 <_printf_float+0x136>
 8004920:	6863      	ldr	r3, [r4, #4]
 8004922:	4299      	cmp	r1, r3
 8004924:	dd41      	ble.n	80049aa <_printf_float+0x1ba>
 8004926:	f1ab 0302 	sub.w	r3, fp, #2
 800492a:	fa5f fb83 	uxtb.w	fp, r3
 800492e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004932:	d820      	bhi.n	8004976 <_printf_float+0x186>
 8004934:	3901      	subs	r1, #1
 8004936:	465a      	mov	r2, fp
 8004938:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800493c:	9109      	str	r1, [sp, #36]	; 0x24
 800493e:	f7ff ff19 	bl	8004774 <__exponent>
 8004942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004944:	1813      	adds	r3, r2, r0
 8004946:	2a01      	cmp	r2, #1
 8004948:	4681      	mov	r9, r0
 800494a:	6123      	str	r3, [r4, #16]
 800494c:	dc02      	bgt.n	8004954 <_printf_float+0x164>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	07d2      	lsls	r2, r2, #31
 8004952:	d501      	bpl.n	8004958 <_printf_float+0x168>
 8004954:	3301      	adds	r3, #1
 8004956:	6123      	str	r3, [r4, #16]
 8004958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800495c:	2b00      	cmp	r3, #0
 800495e:	d09c      	beq.n	800489a <_printf_float+0xaa>
 8004960:	232d      	movs	r3, #45	; 0x2d
 8004962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004966:	e798      	b.n	800489a <_printf_float+0xaa>
 8004968:	9a06      	ldr	r2, [sp, #24]
 800496a:	2a47      	cmp	r2, #71	; 0x47
 800496c:	d1be      	bne.n	80048ec <_printf_float+0xfc>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1bc      	bne.n	80048ec <_printf_float+0xfc>
 8004972:	2301      	movs	r3, #1
 8004974:	e7b9      	b.n	80048ea <_printf_float+0xfa>
 8004976:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800497a:	d118      	bne.n	80049ae <_printf_float+0x1be>
 800497c:	2900      	cmp	r1, #0
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	dd0b      	ble.n	800499a <_printf_float+0x1aa>
 8004982:	6121      	str	r1, [r4, #16]
 8004984:	b913      	cbnz	r3, 800498c <_printf_float+0x19c>
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	07d0      	lsls	r0, r2, #31
 800498a:	d502      	bpl.n	8004992 <_printf_float+0x1a2>
 800498c:	3301      	adds	r3, #1
 800498e:	440b      	add	r3, r1
 8004990:	6123      	str	r3, [r4, #16]
 8004992:	65a1      	str	r1, [r4, #88]	; 0x58
 8004994:	f04f 0900 	mov.w	r9, #0
 8004998:	e7de      	b.n	8004958 <_printf_float+0x168>
 800499a:	b913      	cbnz	r3, 80049a2 <_printf_float+0x1b2>
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	07d2      	lsls	r2, r2, #31
 80049a0:	d501      	bpl.n	80049a6 <_printf_float+0x1b6>
 80049a2:	3302      	adds	r3, #2
 80049a4:	e7f4      	b.n	8004990 <_printf_float+0x1a0>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e7f2      	b.n	8004990 <_printf_float+0x1a0>
 80049aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80049ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049b0:	4299      	cmp	r1, r3
 80049b2:	db05      	blt.n	80049c0 <_printf_float+0x1d0>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	6121      	str	r1, [r4, #16]
 80049b8:	07d8      	lsls	r0, r3, #31
 80049ba:	d5ea      	bpl.n	8004992 <_printf_float+0x1a2>
 80049bc:	1c4b      	adds	r3, r1, #1
 80049be:	e7e7      	b.n	8004990 <_printf_float+0x1a0>
 80049c0:	2900      	cmp	r1, #0
 80049c2:	bfd4      	ite	le
 80049c4:	f1c1 0202 	rsble	r2, r1, #2
 80049c8:	2201      	movgt	r2, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	e7e0      	b.n	8004990 <_printf_float+0x1a0>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	055a      	lsls	r2, r3, #21
 80049d2:	d407      	bmi.n	80049e4 <_printf_float+0x1f4>
 80049d4:	6923      	ldr	r3, [r4, #16]
 80049d6:	4642      	mov	r2, r8
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	d12c      	bne.n	8004a3c <_printf_float+0x24c>
 80049e2:	e764      	b.n	80048ae <_printf_float+0xbe>
 80049e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049e8:	f240 80e0 	bls.w	8004bac <_printf_float+0x3bc>
 80049ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	f7fc f870 	bl	8000ad8 <__aeabi_dcmpeq>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d034      	beq.n	8004a66 <_printf_float+0x276>
 80049fc:	4a37      	ldr	r2, [pc, #220]	; (8004adc <_printf_float+0x2ec>)
 80049fe:	2301      	movs	r3, #1
 8004a00:	4631      	mov	r1, r6
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	f43f af51 	beq.w	80048ae <_printf_float+0xbe>
 8004a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a10:	429a      	cmp	r2, r3
 8004a12:	db02      	blt.n	8004a1a <_printf_float+0x22a>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	07d8      	lsls	r0, r3, #31
 8004a18:	d510      	bpl.n	8004a3c <_printf_float+0x24c>
 8004a1a:	ee18 3a10 	vmov	r3, s16
 8004a1e:	4652      	mov	r2, sl
 8004a20:	4631      	mov	r1, r6
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b8      	blx	r7
 8004a26:	3001      	adds	r0, #1
 8004a28:	f43f af41 	beq.w	80048ae <_printf_float+0xbe>
 8004a2c:	f04f 0800 	mov.w	r8, #0
 8004a30:	f104 091a 	add.w	r9, r4, #26
 8004a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a36:	3b01      	subs	r3, #1
 8004a38:	4543      	cmp	r3, r8
 8004a3a:	dc09      	bgt.n	8004a50 <_printf_float+0x260>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	079b      	lsls	r3, r3, #30
 8004a40:	f100 8107 	bmi.w	8004c52 <_printf_float+0x462>
 8004a44:	68e0      	ldr	r0, [r4, #12]
 8004a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a48:	4298      	cmp	r0, r3
 8004a4a:	bfb8      	it	lt
 8004a4c:	4618      	movlt	r0, r3
 8004a4e:	e730      	b.n	80048b2 <_printf_float+0xc2>
 8004a50:	2301      	movs	r3, #1
 8004a52:	464a      	mov	r2, r9
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f af27 	beq.w	80048ae <_printf_float+0xbe>
 8004a60:	f108 0801 	add.w	r8, r8, #1
 8004a64:	e7e6      	b.n	8004a34 <_printf_float+0x244>
 8004a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	dc39      	bgt.n	8004ae0 <_printf_float+0x2f0>
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <_printf_float+0x2ec>)
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	f43f af19 	beq.w	80048ae <_printf_float+0xbe>
 8004a7c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a80:	4313      	orrs	r3, r2
 8004a82:	d102      	bne.n	8004a8a <_printf_float+0x29a>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	07d9      	lsls	r1, r3, #31
 8004a88:	d5d8      	bpl.n	8004a3c <_printf_float+0x24c>
 8004a8a:	ee18 3a10 	vmov	r3, s16
 8004a8e:	4652      	mov	r2, sl
 8004a90:	4631      	mov	r1, r6
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b8      	blx	r7
 8004a96:	3001      	adds	r0, #1
 8004a98:	f43f af09 	beq.w	80048ae <_printf_float+0xbe>
 8004a9c:	f04f 0900 	mov.w	r9, #0
 8004aa0:	f104 0a1a 	add.w	sl, r4, #26
 8004aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa6:	425b      	negs	r3, r3
 8004aa8:	454b      	cmp	r3, r9
 8004aaa:	dc01      	bgt.n	8004ab0 <_printf_float+0x2c0>
 8004aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aae:	e792      	b.n	80049d6 <_printf_float+0x1e6>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4652      	mov	r2, sl
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	47b8      	blx	r7
 8004aba:	3001      	adds	r0, #1
 8004abc:	f43f aef7 	beq.w	80048ae <_printf_float+0xbe>
 8004ac0:	f109 0901 	add.w	r9, r9, #1
 8004ac4:	e7ee      	b.n	8004aa4 <_printf_float+0x2b4>
 8004ac6:	bf00      	nop
 8004ac8:	7fefffff 	.word	0x7fefffff
 8004acc:	08007058 	.word	0x08007058
 8004ad0:	0800705c 	.word	0x0800705c
 8004ad4:	08007060 	.word	0x08007060
 8004ad8:	08007064 	.word	0x08007064
 8004adc:	08007068 	.word	0x08007068
 8004ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	bfa8      	it	ge
 8004ae8:	461a      	movge	r2, r3
 8004aea:	2a00      	cmp	r2, #0
 8004aec:	4691      	mov	r9, r2
 8004aee:	dc37      	bgt.n	8004b60 <_printf_float+0x370>
 8004af0:	f04f 0b00 	mov.w	fp, #0
 8004af4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004af8:	f104 021a 	add.w	r2, r4, #26
 8004afc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004afe:	9305      	str	r3, [sp, #20]
 8004b00:	eba3 0309 	sub.w	r3, r3, r9
 8004b04:	455b      	cmp	r3, fp
 8004b06:	dc33      	bgt.n	8004b70 <_printf_float+0x380>
 8004b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	db3b      	blt.n	8004b88 <_printf_float+0x398>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	07da      	lsls	r2, r3, #31
 8004b14:	d438      	bmi.n	8004b88 <_printf_float+0x398>
 8004b16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b1a:	eba2 0903 	sub.w	r9, r2, r3
 8004b1e:	9b05      	ldr	r3, [sp, #20]
 8004b20:	1ad2      	subs	r2, r2, r3
 8004b22:	4591      	cmp	r9, r2
 8004b24:	bfa8      	it	ge
 8004b26:	4691      	movge	r9, r2
 8004b28:	f1b9 0f00 	cmp.w	r9, #0
 8004b2c:	dc35      	bgt.n	8004b9a <_printf_float+0x3aa>
 8004b2e:	f04f 0800 	mov.w	r8, #0
 8004b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b36:	f104 0a1a 	add.w	sl, r4, #26
 8004b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	eba3 0309 	sub.w	r3, r3, r9
 8004b44:	4543      	cmp	r3, r8
 8004b46:	f77f af79 	ble.w	8004a3c <_printf_float+0x24c>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4652      	mov	r2, sl
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b8      	blx	r7
 8004b54:	3001      	adds	r0, #1
 8004b56:	f43f aeaa 	beq.w	80048ae <_printf_float+0xbe>
 8004b5a:	f108 0801 	add.w	r8, r8, #1
 8004b5e:	e7ec      	b.n	8004b3a <_printf_float+0x34a>
 8004b60:	4613      	mov	r3, r2
 8004b62:	4631      	mov	r1, r6
 8004b64:	4642      	mov	r2, r8
 8004b66:	4628      	mov	r0, r5
 8004b68:	47b8      	blx	r7
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d1c0      	bne.n	8004af0 <_printf_float+0x300>
 8004b6e:	e69e      	b.n	80048ae <_printf_float+0xbe>
 8004b70:	2301      	movs	r3, #1
 8004b72:	4631      	mov	r1, r6
 8004b74:	4628      	mov	r0, r5
 8004b76:	9205      	str	r2, [sp, #20]
 8004b78:	47b8      	blx	r7
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	f43f ae97 	beq.w	80048ae <_printf_float+0xbe>
 8004b80:	9a05      	ldr	r2, [sp, #20]
 8004b82:	f10b 0b01 	add.w	fp, fp, #1
 8004b86:	e7b9      	b.n	8004afc <_printf_float+0x30c>
 8004b88:	ee18 3a10 	vmov	r3, s16
 8004b8c:	4652      	mov	r2, sl
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	47b8      	blx	r7
 8004b94:	3001      	adds	r0, #1
 8004b96:	d1be      	bne.n	8004b16 <_printf_float+0x326>
 8004b98:	e689      	b.n	80048ae <_printf_float+0xbe>
 8004b9a:	9a05      	ldr	r2, [sp, #20]
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	4442      	add	r2, r8
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d1c1      	bne.n	8004b2e <_printf_float+0x33e>
 8004baa:	e680      	b.n	80048ae <_printf_float+0xbe>
 8004bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bae:	2a01      	cmp	r2, #1
 8004bb0:	dc01      	bgt.n	8004bb6 <_printf_float+0x3c6>
 8004bb2:	07db      	lsls	r3, r3, #31
 8004bb4:	d53a      	bpl.n	8004c2c <_printf_float+0x43c>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4642      	mov	r2, r8
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f ae74 	beq.w	80048ae <_printf_float+0xbe>
 8004bc6:	ee18 3a10 	vmov	r3, s16
 8004bca:	4652      	mov	r2, sl
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f ae6b 	beq.w	80048ae <_printf_float+0xbe>
 8004bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004be4:	f7fb ff78 	bl	8000ad8 <__aeabi_dcmpeq>
 8004be8:	b9d8      	cbnz	r0, 8004c22 <_printf_float+0x432>
 8004bea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004bee:	f108 0201 	add.w	r2, r8, #1
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d10e      	bne.n	8004c1a <_printf_float+0x42a>
 8004bfc:	e657      	b.n	80048ae <_printf_float+0xbe>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4652      	mov	r2, sl
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	47b8      	blx	r7
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f43f ae50 	beq.w	80048ae <_printf_float+0xbe>
 8004c0e:	f108 0801 	add.w	r8, r8, #1
 8004c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	4543      	cmp	r3, r8
 8004c18:	dcf1      	bgt.n	8004bfe <_printf_float+0x40e>
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c20:	e6da      	b.n	80049d8 <_printf_float+0x1e8>
 8004c22:	f04f 0800 	mov.w	r8, #0
 8004c26:	f104 0a1a 	add.w	sl, r4, #26
 8004c2a:	e7f2      	b.n	8004c12 <_printf_float+0x422>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4642      	mov	r2, r8
 8004c30:	e7df      	b.n	8004bf2 <_printf_float+0x402>
 8004c32:	2301      	movs	r3, #1
 8004c34:	464a      	mov	r2, r9
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f43f ae36 	beq.w	80048ae <_printf_float+0xbe>
 8004c42:	f108 0801 	add.w	r8, r8, #1
 8004c46:	68e3      	ldr	r3, [r4, #12]
 8004c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c4a:	1a5b      	subs	r3, r3, r1
 8004c4c:	4543      	cmp	r3, r8
 8004c4e:	dcf0      	bgt.n	8004c32 <_printf_float+0x442>
 8004c50:	e6f8      	b.n	8004a44 <_printf_float+0x254>
 8004c52:	f04f 0800 	mov.w	r8, #0
 8004c56:	f104 0919 	add.w	r9, r4, #25
 8004c5a:	e7f4      	b.n	8004c46 <_printf_float+0x456>

08004c5c <_printf_common>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	4616      	mov	r6, r2
 8004c62:	4699      	mov	r9, r3
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	690b      	ldr	r3, [r1, #16]
 8004c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bfb8      	it	lt
 8004c70:	4613      	movlt	r3, r2
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c78:	4607      	mov	r7, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	b10a      	cbz	r2, 8004c82 <_printf_common+0x26>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	0699      	lsls	r1, r3, #26
 8004c86:	bf42      	ittt	mi
 8004c88:	6833      	ldrmi	r3, [r6, #0]
 8004c8a:	3302      	addmi	r3, #2
 8004c8c:	6033      	strmi	r3, [r6, #0]
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	f015 0506 	ands.w	r5, r5, #6
 8004c94:	d106      	bne.n	8004ca4 <_printf_common+0x48>
 8004c96:	f104 0a19 	add.w	sl, r4, #25
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	6832      	ldr	r2, [r6, #0]
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	dc26      	bgt.n	8004cf2 <_printf_common+0x96>
 8004ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca8:	1e13      	subs	r3, r2, #0
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	bf18      	it	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	0692      	lsls	r2, r2, #26
 8004cb2:	d42b      	bmi.n	8004d0c <_printf_common+0xb0>
 8004cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c0      	blx	r8
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d01e      	beq.n	8004d00 <_printf_common+0xa4>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	6922      	ldr	r2, [r4, #16]
 8004cc6:	f003 0306 	and.w	r3, r3, #6
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	bf02      	ittt	eq
 8004cce:	68e5      	ldreq	r5, [r4, #12]
 8004cd0:	6833      	ldreq	r3, [r6, #0]
 8004cd2:	1aed      	subeq	r5, r5, r3
 8004cd4:	68a3      	ldr	r3, [r4, #8]
 8004cd6:	bf0c      	ite	eq
 8004cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cdc:	2500      	movne	r5, #0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	bfc4      	itt	gt
 8004ce2:	1a9b      	subgt	r3, r3, r2
 8004ce4:	18ed      	addgt	r5, r5, r3
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	341a      	adds	r4, #26
 8004cea:	42b5      	cmp	r5, r6
 8004cec:	d11a      	bne.n	8004d24 <_printf_common+0xc8>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e008      	b.n	8004d04 <_printf_common+0xa8>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c0      	blx	r8
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d103      	bne.n	8004d08 <_printf_common+0xac>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7c6      	b.n	8004c9a <_printf_common+0x3e>
 8004d0c:	18e1      	adds	r1, r4, r3
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	2030      	movs	r0, #48	; 0x30
 8004d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d16:	4422      	add	r2, r4
 8004d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d20:	3302      	adds	r3, #2
 8004d22:	e7c7      	b.n	8004cb4 <_printf_common+0x58>
 8004d24:	2301      	movs	r3, #1
 8004d26:	4622      	mov	r2, r4
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	47c0      	blx	r8
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0e6      	beq.n	8004d00 <_printf_common+0xa4>
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7d9      	b.n	8004cea <_printf_common+0x8e>
	...

08004d38 <_printf_i>:
 8004d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	7e0f      	ldrb	r7, [r1, #24]
 8004d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d40:	2f78      	cmp	r7, #120	; 0x78
 8004d42:	4691      	mov	r9, r2
 8004d44:	4680      	mov	r8, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	469a      	mov	sl, r3
 8004d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d4e:	d807      	bhi.n	8004d60 <_printf_i+0x28>
 8004d50:	2f62      	cmp	r7, #98	; 0x62
 8004d52:	d80a      	bhi.n	8004d6a <_printf_i+0x32>
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	f000 80d4 	beq.w	8004f02 <_printf_i+0x1ca>
 8004d5a:	2f58      	cmp	r7, #88	; 0x58
 8004d5c:	f000 80c0 	beq.w	8004ee0 <_printf_i+0x1a8>
 8004d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d68:	e03a      	b.n	8004de0 <_printf_i+0xa8>
 8004d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d6e:	2b15      	cmp	r3, #21
 8004d70:	d8f6      	bhi.n	8004d60 <_printf_i+0x28>
 8004d72:	a101      	add	r1, pc, #4	; (adr r1, 8004d78 <_printf_i+0x40>)
 8004d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004d61 	.word	0x08004d61
 8004d84:	08004d61 	.word	0x08004d61
 8004d88:	08004d61 	.word	0x08004d61
 8004d8c:	08004d61 	.word	0x08004d61
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004d61 	.word	0x08004d61
 8004d98:	08004d61 	.word	0x08004d61
 8004d9c:	08004d61 	.word	0x08004d61
 8004da0:	08004d61 	.word	0x08004d61
 8004da4:	08004ee9 	.word	0x08004ee9
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004ea3 	.word	0x08004ea3
 8004db0:	08004d61 	.word	0x08004d61
 8004db4:	08004d61 	.word	0x08004d61
 8004db8:	08004f0b 	.word	0x08004f0b
 8004dbc:	08004d61 	.word	0x08004d61
 8004dc0:	08004e11 	.word	0x08004e11
 8004dc4:	08004d61 	.word	0x08004d61
 8004dc8:	08004d61 	.word	0x08004d61
 8004dcc:	08004eab 	.word	0x08004eab
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	602a      	str	r2, [r5, #0]
 8004dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de0:	2301      	movs	r3, #1
 8004de2:	e09f      	b.n	8004f24 <_printf_i+0x1ec>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	682b      	ldr	r3, [r5, #0]
 8004de8:	0607      	lsls	r7, r0, #24
 8004dea:	f103 0104 	add.w	r1, r3, #4
 8004dee:	6029      	str	r1, [r5, #0]
 8004df0:	d501      	bpl.n	8004df6 <_printf_i+0xbe>
 8004df2:	681e      	ldr	r6, [r3, #0]
 8004df4:	e003      	b.n	8004dfe <_printf_i+0xc6>
 8004df6:	0646      	lsls	r6, r0, #25
 8004df8:	d5fb      	bpl.n	8004df2 <_printf_i+0xba>
 8004dfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	da03      	bge.n	8004e0a <_printf_i+0xd2>
 8004e02:	232d      	movs	r3, #45	; 0x2d
 8004e04:	4276      	negs	r6, r6
 8004e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e0a:	485a      	ldr	r0, [pc, #360]	; (8004f74 <_printf_i+0x23c>)
 8004e0c:	230a      	movs	r3, #10
 8004e0e:	e012      	b.n	8004e36 <_printf_i+0xfe>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	6820      	ldr	r0, [r4, #0]
 8004e14:	1d19      	adds	r1, r3, #4
 8004e16:	6029      	str	r1, [r5, #0]
 8004e18:	0605      	lsls	r5, r0, #24
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0xe8>
 8004e1c:	681e      	ldr	r6, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <_printf_i+0xee>
 8004e20:	0641      	lsls	r1, r0, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0xe4>
 8004e24:	881e      	ldrh	r6, [r3, #0]
 8004e26:	4853      	ldr	r0, [pc, #332]	; (8004f74 <_printf_i+0x23c>)
 8004e28:	2f6f      	cmp	r7, #111	; 0x6f
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2308      	moveq	r3, #8
 8004e2e:	230a      	movne	r3, #10
 8004e30:	2100      	movs	r1, #0
 8004e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e36:	6865      	ldr	r5, [r4, #4]
 8004e38:	60a5      	str	r5, [r4, #8]
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	bfa2      	ittt	ge
 8004e3e:	6821      	ldrge	r1, [r4, #0]
 8004e40:	f021 0104 	bicge.w	r1, r1, #4
 8004e44:	6021      	strge	r1, [r4, #0]
 8004e46:	b90e      	cbnz	r6, 8004e4c <_printf_i+0x114>
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	d04b      	beq.n	8004ee4 <_printf_i+0x1ac>
 8004e4c:	4615      	mov	r5, r2
 8004e4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e52:	fb03 6711 	mls	r7, r3, r1, r6
 8004e56:	5dc7      	ldrb	r7, [r0, r7]
 8004e58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e5c:	4637      	mov	r7, r6
 8004e5e:	42bb      	cmp	r3, r7
 8004e60:	460e      	mov	r6, r1
 8004e62:	d9f4      	bls.n	8004e4e <_printf_i+0x116>
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d10b      	bne.n	8004e80 <_printf_i+0x148>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	07de      	lsls	r6, r3, #31
 8004e6c:	d508      	bpl.n	8004e80 <_printf_i+0x148>
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	6861      	ldr	r1, [r4, #4]
 8004e72:	4299      	cmp	r1, r3
 8004e74:	bfde      	ittt	le
 8004e76:	2330      	movle	r3, #48	; 0x30
 8004e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e80:	1b52      	subs	r2, r2, r5
 8004e82:	6122      	str	r2, [r4, #16]
 8004e84:	f8cd a000 	str.w	sl, [sp]
 8004e88:	464b      	mov	r3, r9
 8004e8a:	aa03      	add	r2, sp, #12
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4640      	mov	r0, r8
 8004e90:	f7ff fee4 	bl	8004c5c <_printf_common>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d14a      	bne.n	8004f2e <_printf_i+0x1f6>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	b004      	add	sp, #16
 8004e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	f043 0320 	orr.w	r3, r3, #32
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	4833      	ldr	r0, [pc, #204]	; (8004f78 <_printf_i+0x240>)
 8004eac:	2778      	movs	r7, #120	; 0x78
 8004eae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	6829      	ldr	r1, [r5, #0]
 8004eb6:	061f      	lsls	r7, r3, #24
 8004eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ebc:	d402      	bmi.n	8004ec4 <_printf_i+0x18c>
 8004ebe:	065f      	lsls	r7, r3, #25
 8004ec0:	bf48      	it	mi
 8004ec2:	b2b6      	uxthmi	r6, r6
 8004ec4:	07df      	lsls	r7, r3, #31
 8004ec6:	bf48      	it	mi
 8004ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8004ecc:	6029      	str	r1, [r5, #0]
 8004ece:	bf48      	it	mi
 8004ed0:	6023      	strmi	r3, [r4, #0]
 8004ed2:	b91e      	cbnz	r6, 8004edc <_printf_i+0x1a4>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	f023 0320 	bic.w	r3, r3, #32
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	2310      	movs	r3, #16
 8004ede:	e7a7      	b.n	8004e30 <_printf_i+0xf8>
 8004ee0:	4824      	ldr	r0, [pc, #144]	; (8004f74 <_printf_i+0x23c>)
 8004ee2:	e7e4      	b.n	8004eae <_printf_i+0x176>
 8004ee4:	4615      	mov	r5, r2
 8004ee6:	e7bd      	b.n	8004e64 <_printf_i+0x12c>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	6826      	ldr	r6, [r4, #0]
 8004eec:	6961      	ldr	r1, [r4, #20]
 8004eee:	1d18      	adds	r0, r3, #4
 8004ef0:	6028      	str	r0, [r5, #0]
 8004ef2:	0635      	lsls	r5, r6, #24
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	d501      	bpl.n	8004efc <_printf_i+0x1c4>
 8004ef8:	6019      	str	r1, [r3, #0]
 8004efa:	e002      	b.n	8004f02 <_printf_i+0x1ca>
 8004efc:	0670      	lsls	r0, r6, #25
 8004efe:	d5fb      	bpl.n	8004ef8 <_printf_i+0x1c0>
 8004f00:	8019      	strh	r1, [r3, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	6123      	str	r3, [r4, #16]
 8004f06:	4615      	mov	r5, r2
 8004f08:	e7bc      	b.n	8004e84 <_printf_i+0x14c>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	1d1a      	adds	r2, r3, #4
 8004f0e:	602a      	str	r2, [r5, #0]
 8004f10:	681d      	ldr	r5, [r3, #0]
 8004f12:	6862      	ldr	r2, [r4, #4]
 8004f14:	2100      	movs	r1, #0
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7fb f962 	bl	80001e0 <memchr>
 8004f1c:	b108      	cbz	r0, 8004f22 <_printf_i+0x1ea>
 8004f1e:	1b40      	subs	r0, r0, r5
 8004f20:	6060      	str	r0, [r4, #4]
 8004f22:	6863      	ldr	r3, [r4, #4]
 8004f24:	6123      	str	r3, [r4, #16]
 8004f26:	2300      	movs	r3, #0
 8004f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f2c:	e7aa      	b.n	8004e84 <_printf_i+0x14c>
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	462a      	mov	r2, r5
 8004f32:	4649      	mov	r1, r9
 8004f34:	4640      	mov	r0, r8
 8004f36:	47d0      	blx	sl
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d0ad      	beq.n	8004e98 <_printf_i+0x160>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	079b      	lsls	r3, r3, #30
 8004f40:	d413      	bmi.n	8004f6a <_printf_i+0x232>
 8004f42:	68e0      	ldr	r0, [r4, #12]
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	4298      	cmp	r0, r3
 8004f48:	bfb8      	it	lt
 8004f4a:	4618      	movlt	r0, r3
 8004f4c:	e7a6      	b.n	8004e9c <_printf_i+0x164>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4632      	mov	r2, r6
 8004f52:	4649      	mov	r1, r9
 8004f54:	4640      	mov	r0, r8
 8004f56:	47d0      	blx	sl
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d09d      	beq.n	8004e98 <_printf_i+0x160>
 8004f5c:	3501      	adds	r5, #1
 8004f5e:	68e3      	ldr	r3, [r4, #12]
 8004f60:	9903      	ldr	r1, [sp, #12]
 8004f62:	1a5b      	subs	r3, r3, r1
 8004f64:	42ab      	cmp	r3, r5
 8004f66:	dcf2      	bgt.n	8004f4e <_printf_i+0x216>
 8004f68:	e7eb      	b.n	8004f42 <_printf_i+0x20a>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	f104 0619 	add.w	r6, r4, #25
 8004f70:	e7f5      	b.n	8004f5e <_printf_i+0x226>
 8004f72:	bf00      	nop
 8004f74:	0800706a 	.word	0x0800706a
 8004f78:	0800707b 	.word	0x0800707b

08004f7c <std>:
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	4604      	mov	r4, r0
 8004f82:	e9c0 3300 	strd	r3, r3, [r0]
 8004f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f8a:	6083      	str	r3, [r0, #8]
 8004f8c:	8181      	strh	r1, [r0, #12]
 8004f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f90:	81c2      	strh	r2, [r0, #14]
 8004f92:	6183      	str	r3, [r0, #24]
 8004f94:	4619      	mov	r1, r3
 8004f96:	2208      	movs	r2, #8
 8004f98:	305c      	adds	r0, #92	; 0x5c
 8004f9a:	f000 f8f4 	bl	8005186 <memset>
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <std+0x58>)
 8004fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <std+0x5c>)
 8004fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <std+0x60>)
 8004fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <std+0x64>)
 8004fac:	6323      	str	r3, [r4, #48]	; 0x30
 8004fae:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <std+0x68>)
 8004fb0:	6224      	str	r4, [r4, #32]
 8004fb2:	429c      	cmp	r4, r3
 8004fb4:	d006      	beq.n	8004fc4 <std+0x48>
 8004fb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004fba:	4294      	cmp	r4, r2
 8004fbc:	d002      	beq.n	8004fc4 <std+0x48>
 8004fbe:	33d0      	adds	r3, #208	; 0xd0
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	d105      	bne.n	8004fd0 <std+0x54>
 8004fc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fcc:	f000 b958 	b.w	8005280 <__retarget_lock_init_recursive>
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08005101 	.word	0x08005101
 8004fd8:	08005123 	.word	0x08005123
 8004fdc:	0800515b 	.word	0x0800515b
 8004fe0:	0800517f 	.word	0x0800517f
 8004fe4:	200002cc 	.word	0x200002cc

08004fe8 <stdio_exit_handler>:
 8004fe8:	4a02      	ldr	r2, [pc, #8]	; (8004ff4 <stdio_exit_handler+0xc>)
 8004fea:	4903      	ldr	r1, [pc, #12]	; (8004ff8 <stdio_exit_handler+0x10>)
 8004fec:	4803      	ldr	r0, [pc, #12]	; (8004ffc <stdio_exit_handler+0x14>)
 8004fee:	f000 b869 	b.w	80050c4 <_fwalk_sglue>
 8004ff2:	bf00      	nop
 8004ff4:	20000010 	.word	0x20000010
 8004ff8:	08006981 	.word	0x08006981
 8004ffc:	2000001c 	.word	0x2000001c

08005000 <cleanup_stdio>:
 8005000:	6841      	ldr	r1, [r0, #4]
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <cleanup_stdio+0x34>)
 8005004:	4299      	cmp	r1, r3
 8005006:	b510      	push	{r4, lr}
 8005008:	4604      	mov	r4, r0
 800500a:	d001      	beq.n	8005010 <cleanup_stdio+0x10>
 800500c:	f001 fcb8 	bl	8006980 <_fflush_r>
 8005010:	68a1      	ldr	r1, [r4, #8]
 8005012:	4b09      	ldr	r3, [pc, #36]	; (8005038 <cleanup_stdio+0x38>)
 8005014:	4299      	cmp	r1, r3
 8005016:	d002      	beq.n	800501e <cleanup_stdio+0x1e>
 8005018:	4620      	mov	r0, r4
 800501a:	f001 fcb1 	bl	8006980 <_fflush_r>
 800501e:	68e1      	ldr	r1, [r4, #12]
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <cleanup_stdio+0x3c>)
 8005022:	4299      	cmp	r1, r3
 8005024:	d004      	beq.n	8005030 <cleanup_stdio+0x30>
 8005026:	4620      	mov	r0, r4
 8005028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800502c:	f001 bca8 	b.w	8006980 <_fflush_r>
 8005030:	bd10      	pop	{r4, pc}
 8005032:	bf00      	nop
 8005034:	200002cc 	.word	0x200002cc
 8005038:	20000334 	.word	0x20000334
 800503c:	2000039c 	.word	0x2000039c

08005040 <global_stdio_init.part.0>:
 8005040:	b510      	push	{r4, lr}
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <global_stdio_init.part.0+0x30>)
 8005044:	4c0b      	ldr	r4, [pc, #44]	; (8005074 <global_stdio_init.part.0+0x34>)
 8005046:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <global_stdio_init.part.0+0x38>)
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	4620      	mov	r0, r4
 800504c:	2200      	movs	r2, #0
 800504e:	2104      	movs	r1, #4
 8005050:	f7ff ff94 	bl	8004f7c <std>
 8005054:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005058:	2201      	movs	r2, #1
 800505a:	2109      	movs	r1, #9
 800505c:	f7ff ff8e 	bl	8004f7c <std>
 8005060:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005064:	2202      	movs	r2, #2
 8005066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506a:	2112      	movs	r1, #18
 800506c:	f7ff bf86 	b.w	8004f7c <std>
 8005070:	20000404 	.word	0x20000404
 8005074:	200002cc 	.word	0x200002cc
 8005078:	08004fe9 	.word	0x08004fe9

0800507c <__sfp_lock_acquire>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__sfp_lock_acquire+0x8>)
 800507e:	f000 b900 	b.w	8005282 <__retarget_lock_acquire_recursive>
 8005082:	bf00      	nop
 8005084:	2000040d 	.word	0x2000040d

08005088 <__sfp_lock_release>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__sfp_lock_release+0x8>)
 800508a:	f000 b8fb 	b.w	8005284 <__retarget_lock_release_recursive>
 800508e:	bf00      	nop
 8005090:	2000040d 	.word	0x2000040d

08005094 <__sinit>:
 8005094:	b510      	push	{r4, lr}
 8005096:	4604      	mov	r4, r0
 8005098:	f7ff fff0 	bl	800507c <__sfp_lock_acquire>
 800509c:	6a23      	ldr	r3, [r4, #32]
 800509e:	b11b      	cbz	r3, 80050a8 <__sinit+0x14>
 80050a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a4:	f7ff bff0 	b.w	8005088 <__sfp_lock_release>
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <__sinit+0x28>)
 80050aa:	6223      	str	r3, [r4, #32]
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <__sinit+0x2c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f5      	bne.n	80050a0 <__sinit+0xc>
 80050b4:	f7ff ffc4 	bl	8005040 <global_stdio_init.part.0>
 80050b8:	e7f2      	b.n	80050a0 <__sinit+0xc>
 80050ba:	bf00      	nop
 80050bc:	08005001 	.word	0x08005001
 80050c0:	20000404 	.word	0x20000404

080050c4 <_fwalk_sglue>:
 80050c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c8:	4607      	mov	r7, r0
 80050ca:	4688      	mov	r8, r1
 80050cc:	4614      	mov	r4, r2
 80050ce:	2600      	movs	r6, #0
 80050d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050d4:	f1b9 0901 	subs.w	r9, r9, #1
 80050d8:	d505      	bpl.n	80050e6 <_fwalk_sglue+0x22>
 80050da:	6824      	ldr	r4, [r4, #0]
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d1f7      	bne.n	80050d0 <_fwalk_sglue+0xc>
 80050e0:	4630      	mov	r0, r6
 80050e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e6:	89ab      	ldrh	r3, [r5, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d907      	bls.n	80050fc <_fwalk_sglue+0x38>
 80050ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050f0:	3301      	adds	r3, #1
 80050f2:	d003      	beq.n	80050fc <_fwalk_sglue+0x38>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4638      	mov	r0, r7
 80050f8:	47c0      	blx	r8
 80050fa:	4306      	orrs	r6, r0
 80050fc:	3568      	adds	r5, #104	; 0x68
 80050fe:	e7e9      	b.n	80050d4 <_fwalk_sglue+0x10>

08005100 <__sread>:
 8005100:	b510      	push	{r4, lr}
 8005102:	460c      	mov	r4, r1
 8005104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005108:	f000 f86c 	bl	80051e4 <_read_r>
 800510c:	2800      	cmp	r0, #0
 800510e:	bfab      	itete	ge
 8005110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005112:	89a3      	ldrhlt	r3, [r4, #12]
 8005114:	181b      	addge	r3, r3, r0
 8005116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800511a:	bfac      	ite	ge
 800511c:	6563      	strge	r3, [r4, #84]	; 0x54
 800511e:	81a3      	strhlt	r3, [r4, #12]
 8005120:	bd10      	pop	{r4, pc}

08005122 <__swrite>:
 8005122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005126:	461f      	mov	r7, r3
 8005128:	898b      	ldrh	r3, [r1, #12]
 800512a:	05db      	lsls	r3, r3, #23
 800512c:	4605      	mov	r5, r0
 800512e:	460c      	mov	r4, r1
 8005130:	4616      	mov	r6, r2
 8005132:	d505      	bpl.n	8005140 <__swrite+0x1e>
 8005134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005138:	2302      	movs	r3, #2
 800513a:	2200      	movs	r2, #0
 800513c:	f000 f840 	bl	80051c0 <_lseek_r>
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	4632      	mov	r2, r6
 800514e:	463b      	mov	r3, r7
 8005150:	4628      	mov	r0, r5
 8005152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005156:	f000 b857 	b.w	8005208 <_write_r>

0800515a <__sseek>:
 800515a:	b510      	push	{r4, lr}
 800515c:	460c      	mov	r4, r1
 800515e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005162:	f000 f82d 	bl	80051c0 <_lseek_r>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	bf15      	itete	ne
 800516c:	6560      	strne	r0, [r4, #84]	; 0x54
 800516e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005176:	81a3      	strheq	r3, [r4, #12]
 8005178:	bf18      	it	ne
 800517a:	81a3      	strhne	r3, [r4, #12]
 800517c:	bd10      	pop	{r4, pc}

0800517e <__sclose>:
 800517e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005182:	f000 b80d 	b.w	80051a0 <_close_r>

08005186 <memset>:
 8005186:	4402      	add	r2, r0
 8005188:	4603      	mov	r3, r0
 800518a:	4293      	cmp	r3, r2
 800518c:	d100      	bne.n	8005190 <memset+0xa>
 800518e:	4770      	bx	lr
 8005190:	f803 1b01 	strb.w	r1, [r3], #1
 8005194:	e7f9      	b.n	800518a <memset+0x4>
	...

08005198 <_localeconv_r>:
 8005198:	4800      	ldr	r0, [pc, #0]	; (800519c <_localeconv_r+0x4>)
 800519a:	4770      	bx	lr
 800519c:	2000015c 	.word	0x2000015c

080051a0 <_close_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d06      	ldr	r5, [pc, #24]	; (80051bc <_close_r+0x1c>)
 80051a4:	2300      	movs	r3, #0
 80051a6:	4604      	mov	r4, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	602b      	str	r3, [r5, #0]
 80051ac:	f7fc faa3 	bl	80016f6 <_close>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d102      	bne.n	80051ba <_close_r+0x1a>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	b103      	cbz	r3, 80051ba <_close_r+0x1a>
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	20000408 	.word	0x20000408

080051c0 <_lseek_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d07      	ldr	r5, [pc, #28]	; (80051e0 <_lseek_r+0x20>)
 80051c4:	4604      	mov	r4, r0
 80051c6:	4608      	mov	r0, r1
 80051c8:	4611      	mov	r1, r2
 80051ca:	2200      	movs	r2, #0
 80051cc:	602a      	str	r2, [r5, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f7fc fab8 	bl	8001744 <_lseek>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_lseek_r+0x1e>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_lseek_r+0x1e>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	20000408 	.word	0x20000408

080051e4 <_read_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d07      	ldr	r5, [pc, #28]	; (8005204 <_read_r+0x20>)
 80051e8:	4604      	mov	r4, r0
 80051ea:	4608      	mov	r0, r1
 80051ec:	4611      	mov	r1, r2
 80051ee:	2200      	movs	r2, #0
 80051f0:	602a      	str	r2, [r5, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f7fc fa46 	bl	8001684 <_read>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_read_r+0x1e>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_read_r+0x1e>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20000408 	.word	0x20000408

08005208 <_write_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	; (8005228 <_write_r+0x20>)
 800520c:	4604      	mov	r4, r0
 800520e:	4608      	mov	r0, r1
 8005210:	4611      	mov	r1, r2
 8005212:	2200      	movs	r2, #0
 8005214:	602a      	str	r2, [r5, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	f7fc fa51 	bl	80016be <_write>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_write_r+0x1e>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_write_r+0x1e>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	20000408 	.word	0x20000408

0800522c <__errno>:
 800522c:	4b01      	ldr	r3, [pc, #4]	; (8005234 <__errno+0x8>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000068 	.word	0x20000068

08005238 <__libc_init_array>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	4d0d      	ldr	r5, [pc, #52]	; (8005270 <__libc_init_array+0x38>)
 800523c:	4c0d      	ldr	r4, [pc, #52]	; (8005274 <__libc_init_array+0x3c>)
 800523e:	1b64      	subs	r4, r4, r5
 8005240:	10a4      	asrs	r4, r4, #2
 8005242:	2600      	movs	r6, #0
 8005244:	42a6      	cmp	r6, r4
 8005246:	d109      	bne.n	800525c <__libc_init_array+0x24>
 8005248:	4d0b      	ldr	r5, [pc, #44]	; (8005278 <__libc_init_array+0x40>)
 800524a:	4c0c      	ldr	r4, [pc, #48]	; (800527c <__libc_init_array+0x44>)
 800524c:	f001 feec 	bl	8007028 <_init>
 8005250:	1b64      	subs	r4, r4, r5
 8005252:	10a4      	asrs	r4, r4, #2
 8005254:	2600      	movs	r6, #0
 8005256:	42a6      	cmp	r6, r4
 8005258:	d105      	bne.n	8005266 <__libc_init_array+0x2e>
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005260:	4798      	blx	r3
 8005262:	3601      	adds	r6, #1
 8005264:	e7ee      	b.n	8005244 <__libc_init_array+0xc>
 8005266:	f855 3b04 	ldr.w	r3, [r5], #4
 800526a:	4798      	blx	r3
 800526c:	3601      	adds	r6, #1
 800526e:	e7f2      	b.n	8005256 <__libc_init_array+0x1e>
 8005270:	080073d4 	.word	0x080073d4
 8005274:	080073d4 	.word	0x080073d4
 8005278:	080073d4 	.word	0x080073d4
 800527c:	080073d8 	.word	0x080073d8

08005280 <__retarget_lock_init_recursive>:
 8005280:	4770      	bx	lr

08005282 <__retarget_lock_acquire_recursive>:
 8005282:	4770      	bx	lr

08005284 <__retarget_lock_release_recursive>:
 8005284:	4770      	bx	lr

08005286 <quorem>:
 8005286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	6903      	ldr	r3, [r0, #16]
 800528c:	690c      	ldr	r4, [r1, #16]
 800528e:	42a3      	cmp	r3, r4
 8005290:	4607      	mov	r7, r0
 8005292:	db7e      	blt.n	8005392 <quorem+0x10c>
 8005294:	3c01      	subs	r4, #1
 8005296:	f101 0814 	add.w	r8, r1, #20
 800529a:	f100 0514 	add.w	r5, r0, #20
 800529e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052ac:	3301      	adds	r3, #1
 80052ae:	429a      	cmp	r2, r3
 80052b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052bc:	d331      	bcc.n	8005322 <quorem+0x9c>
 80052be:	f04f 0e00 	mov.w	lr, #0
 80052c2:	4640      	mov	r0, r8
 80052c4:	46ac      	mov	ip, r5
 80052c6:	46f2      	mov	sl, lr
 80052c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80052cc:	b293      	uxth	r3, r2
 80052ce:	fb06 e303 	mla	r3, r6, r3, lr
 80052d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052d6:	0c1a      	lsrs	r2, r3, #16
 80052d8:	b29b      	uxth	r3, r3
 80052da:	ebaa 0303 	sub.w	r3, sl, r3
 80052de:	f8dc a000 	ldr.w	sl, [ip]
 80052e2:	fa13 f38a 	uxtah	r3, r3, sl
 80052e6:	fb06 220e 	mla	r2, r6, lr, r2
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	9b00      	ldr	r3, [sp, #0]
 80052ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052f2:	b292      	uxth	r2, r2
 80052f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005300:	4581      	cmp	r9, r0
 8005302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005306:	f84c 3b04 	str.w	r3, [ip], #4
 800530a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800530e:	d2db      	bcs.n	80052c8 <quorem+0x42>
 8005310:	f855 300b 	ldr.w	r3, [r5, fp]
 8005314:	b92b      	cbnz	r3, 8005322 <quorem+0x9c>
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	3b04      	subs	r3, #4
 800531a:	429d      	cmp	r5, r3
 800531c:	461a      	mov	r2, r3
 800531e:	d32c      	bcc.n	800537a <quorem+0xf4>
 8005320:	613c      	str	r4, [r7, #16]
 8005322:	4638      	mov	r0, r7
 8005324:	f001 f9a6 	bl	8006674 <__mcmp>
 8005328:	2800      	cmp	r0, #0
 800532a:	db22      	blt.n	8005372 <quorem+0xec>
 800532c:	3601      	adds	r6, #1
 800532e:	4629      	mov	r1, r5
 8005330:	2000      	movs	r0, #0
 8005332:	f858 2b04 	ldr.w	r2, [r8], #4
 8005336:	f8d1 c000 	ldr.w	ip, [r1]
 800533a:	b293      	uxth	r3, r2
 800533c:	1ac3      	subs	r3, r0, r3
 800533e:	0c12      	lsrs	r2, r2, #16
 8005340:	fa13 f38c 	uxtah	r3, r3, ip
 8005344:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005352:	45c1      	cmp	r9, r8
 8005354:	f841 3b04 	str.w	r3, [r1], #4
 8005358:	ea4f 4022 	mov.w	r0, r2, asr #16
 800535c:	d2e9      	bcs.n	8005332 <quorem+0xac>
 800535e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005366:	b922      	cbnz	r2, 8005372 <quorem+0xec>
 8005368:	3b04      	subs	r3, #4
 800536a:	429d      	cmp	r5, r3
 800536c:	461a      	mov	r2, r3
 800536e:	d30a      	bcc.n	8005386 <quorem+0x100>
 8005370:	613c      	str	r4, [r7, #16]
 8005372:	4630      	mov	r0, r6
 8005374:	b003      	add	sp, #12
 8005376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	3b04      	subs	r3, #4
 800537e:	2a00      	cmp	r2, #0
 8005380:	d1ce      	bne.n	8005320 <quorem+0x9a>
 8005382:	3c01      	subs	r4, #1
 8005384:	e7c9      	b.n	800531a <quorem+0x94>
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	3b04      	subs	r3, #4
 800538a:	2a00      	cmp	r2, #0
 800538c:	d1f0      	bne.n	8005370 <quorem+0xea>
 800538e:	3c01      	subs	r4, #1
 8005390:	e7eb      	b.n	800536a <quorem+0xe4>
 8005392:	2000      	movs	r0, #0
 8005394:	e7ee      	b.n	8005374 <quorem+0xee>
	...

08005398 <_dtoa_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	ed2d 8b04 	vpush	{d8-d9}
 80053a0:	69c5      	ldr	r5, [r0, #28]
 80053a2:	b093      	sub	sp, #76	; 0x4c
 80053a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053a8:	ec57 6b10 	vmov	r6, r7, d0
 80053ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053b0:	9107      	str	r1, [sp, #28]
 80053b2:	4604      	mov	r4, r0
 80053b4:	920a      	str	r2, [sp, #40]	; 0x28
 80053b6:	930d      	str	r3, [sp, #52]	; 0x34
 80053b8:	b975      	cbnz	r5, 80053d8 <_dtoa_r+0x40>
 80053ba:	2010      	movs	r0, #16
 80053bc:	f000 fe2a 	bl	8006014 <malloc>
 80053c0:	4602      	mov	r2, r0
 80053c2:	61e0      	str	r0, [r4, #28]
 80053c4:	b920      	cbnz	r0, 80053d0 <_dtoa_r+0x38>
 80053c6:	4bae      	ldr	r3, [pc, #696]	; (8005680 <_dtoa_r+0x2e8>)
 80053c8:	21ef      	movs	r1, #239	; 0xef
 80053ca:	48ae      	ldr	r0, [pc, #696]	; (8005684 <_dtoa_r+0x2ec>)
 80053cc:	f001 fb1e 	bl	8006a0c <__assert_func>
 80053d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053d4:	6005      	str	r5, [r0, #0]
 80053d6:	60c5      	str	r5, [r0, #12]
 80053d8:	69e3      	ldr	r3, [r4, #28]
 80053da:	6819      	ldr	r1, [r3, #0]
 80053dc:	b151      	cbz	r1, 80053f4 <_dtoa_r+0x5c>
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	604a      	str	r2, [r1, #4]
 80053e2:	2301      	movs	r3, #1
 80053e4:	4093      	lsls	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 ff07 	bl	80061fc <_Bfree>
 80053ee:	69e3      	ldr	r3, [r4, #28]
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	1e3b      	subs	r3, r7, #0
 80053f6:	bfbb      	ittet	lt
 80053f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053fc:	9303      	strlt	r3, [sp, #12]
 80053fe:	2300      	movge	r3, #0
 8005400:	2201      	movlt	r2, #1
 8005402:	bfac      	ite	ge
 8005404:	f8c8 3000 	strge.w	r3, [r8]
 8005408:	f8c8 2000 	strlt.w	r2, [r8]
 800540c:	4b9e      	ldr	r3, [pc, #632]	; (8005688 <_dtoa_r+0x2f0>)
 800540e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005412:	ea33 0308 	bics.w	r3, r3, r8
 8005416:	d11b      	bne.n	8005450 <_dtoa_r+0xb8>
 8005418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800541a:	f242 730f 	movw	r3, #9999	; 0x270f
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005424:	4333      	orrs	r3, r6
 8005426:	f000 8593 	beq.w	8005f50 <_dtoa_r+0xbb8>
 800542a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800542c:	b963      	cbnz	r3, 8005448 <_dtoa_r+0xb0>
 800542e:	4b97      	ldr	r3, [pc, #604]	; (800568c <_dtoa_r+0x2f4>)
 8005430:	e027      	b.n	8005482 <_dtoa_r+0xea>
 8005432:	4b97      	ldr	r3, [pc, #604]	; (8005690 <_dtoa_r+0x2f8>)
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	3308      	adds	r3, #8
 8005438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	9800      	ldr	r0, [sp, #0]
 800543e:	b013      	add	sp, #76	; 0x4c
 8005440:	ecbd 8b04 	vpop	{d8-d9}
 8005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005448:	4b90      	ldr	r3, [pc, #576]	; (800568c <_dtoa_r+0x2f4>)
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	3303      	adds	r3, #3
 800544e:	e7f3      	b.n	8005438 <_dtoa_r+0xa0>
 8005450:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	ec51 0b17 	vmov	r0, r1, d7
 800545a:	eeb0 8a47 	vmov.f32	s16, s14
 800545e:	eef0 8a67 	vmov.f32	s17, s15
 8005462:	2300      	movs	r3, #0
 8005464:	f7fb fb38 	bl	8000ad8 <__aeabi_dcmpeq>
 8005468:	4681      	mov	r9, r0
 800546a:	b160      	cbz	r0, 8005486 <_dtoa_r+0xee>
 800546c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800546e:	2301      	movs	r3, #1
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8568 	beq.w	8005f4a <_dtoa_r+0xbb2>
 800547a:	4b86      	ldr	r3, [pc, #536]	; (8005694 <_dtoa_r+0x2fc>)
 800547c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	e7da      	b.n	800543c <_dtoa_r+0xa4>
 8005486:	aa10      	add	r2, sp, #64	; 0x40
 8005488:	a911      	add	r1, sp, #68	; 0x44
 800548a:	4620      	mov	r0, r4
 800548c:	eeb0 0a48 	vmov.f32	s0, s16
 8005490:	eef0 0a68 	vmov.f32	s1, s17
 8005494:	f001 f994 	bl	80067c0 <__d2b>
 8005498:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800549c:	4682      	mov	sl, r0
 800549e:	2d00      	cmp	r5, #0
 80054a0:	d07f      	beq.n	80055a2 <_dtoa_r+0x20a>
 80054a2:	ee18 3a90 	vmov	r3, s17
 80054a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80054ae:	ec51 0b18 	vmov	r0, r1, d8
 80054b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80054be:	4619      	mov	r1, r3
 80054c0:	2200      	movs	r2, #0
 80054c2:	4b75      	ldr	r3, [pc, #468]	; (8005698 <_dtoa_r+0x300>)
 80054c4:	f7fa fee8 	bl	8000298 <__aeabi_dsub>
 80054c8:	a367      	add	r3, pc, #412	; (adr r3, 8005668 <_dtoa_r+0x2d0>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fb f89b 	bl	8000608 <__aeabi_dmul>
 80054d2:	a367      	add	r3, pc, #412	; (adr r3, 8005670 <_dtoa_r+0x2d8>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fa fee0 	bl	800029c <__adddf3>
 80054dc:	4606      	mov	r6, r0
 80054de:	4628      	mov	r0, r5
 80054e0:	460f      	mov	r7, r1
 80054e2:	f7fb f827 	bl	8000534 <__aeabi_i2d>
 80054e6:	a364      	add	r3, pc, #400	; (adr r3, 8005678 <_dtoa_r+0x2e0>)
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f7fb f88c 	bl	8000608 <__aeabi_dmul>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4630      	mov	r0, r6
 80054f6:	4639      	mov	r1, r7
 80054f8:	f7fa fed0 	bl	800029c <__adddf3>
 80054fc:	4606      	mov	r6, r0
 80054fe:	460f      	mov	r7, r1
 8005500:	f7fb fb32 	bl	8000b68 <__aeabi_d2iz>
 8005504:	2200      	movs	r2, #0
 8005506:	4683      	mov	fp, r0
 8005508:	2300      	movs	r3, #0
 800550a:	4630      	mov	r0, r6
 800550c:	4639      	mov	r1, r7
 800550e:	f7fb faed 	bl	8000aec <__aeabi_dcmplt>
 8005512:	b148      	cbz	r0, 8005528 <_dtoa_r+0x190>
 8005514:	4658      	mov	r0, fp
 8005516:	f7fb f80d 	bl	8000534 <__aeabi_i2d>
 800551a:	4632      	mov	r2, r6
 800551c:	463b      	mov	r3, r7
 800551e:	f7fb fadb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005522:	b908      	cbnz	r0, 8005528 <_dtoa_r+0x190>
 8005524:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005528:	f1bb 0f16 	cmp.w	fp, #22
 800552c:	d857      	bhi.n	80055de <_dtoa_r+0x246>
 800552e:	4b5b      	ldr	r3, [pc, #364]	; (800569c <_dtoa_r+0x304>)
 8005530:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	ec51 0b18 	vmov	r0, r1, d8
 800553c:	f7fb fad6 	bl	8000aec <__aeabi_dcmplt>
 8005540:	2800      	cmp	r0, #0
 8005542:	d04e      	beq.n	80055e2 <_dtoa_r+0x24a>
 8005544:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005548:	2300      	movs	r3, #0
 800554a:	930c      	str	r3, [sp, #48]	; 0x30
 800554c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800554e:	1b5b      	subs	r3, r3, r5
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	bf45      	ittet	mi
 8005554:	f1c3 0301 	rsbmi	r3, r3, #1
 8005558:	9305      	strmi	r3, [sp, #20]
 800555a:	2300      	movpl	r3, #0
 800555c:	2300      	movmi	r3, #0
 800555e:	9206      	str	r2, [sp, #24]
 8005560:	bf54      	ite	pl
 8005562:	9305      	strpl	r3, [sp, #20]
 8005564:	9306      	strmi	r3, [sp, #24]
 8005566:	f1bb 0f00 	cmp.w	fp, #0
 800556a:	db3c      	blt.n	80055e6 <_dtoa_r+0x24e>
 800556c:	9b06      	ldr	r3, [sp, #24]
 800556e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005572:	445b      	add	r3, fp
 8005574:	9306      	str	r3, [sp, #24]
 8005576:	2300      	movs	r3, #0
 8005578:	9308      	str	r3, [sp, #32]
 800557a:	9b07      	ldr	r3, [sp, #28]
 800557c:	2b09      	cmp	r3, #9
 800557e:	d868      	bhi.n	8005652 <_dtoa_r+0x2ba>
 8005580:	2b05      	cmp	r3, #5
 8005582:	bfc4      	itt	gt
 8005584:	3b04      	subgt	r3, #4
 8005586:	9307      	strgt	r3, [sp, #28]
 8005588:	9b07      	ldr	r3, [sp, #28]
 800558a:	f1a3 0302 	sub.w	r3, r3, #2
 800558e:	bfcc      	ite	gt
 8005590:	2500      	movgt	r5, #0
 8005592:	2501      	movle	r5, #1
 8005594:	2b03      	cmp	r3, #3
 8005596:	f200 8085 	bhi.w	80056a4 <_dtoa_r+0x30c>
 800559a:	e8df f003 	tbb	[pc, r3]
 800559e:	3b2e      	.short	0x3b2e
 80055a0:	5839      	.short	0x5839
 80055a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055a6:	441d      	add	r5, r3
 80055a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	bfc1      	itttt	gt
 80055b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80055b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80055bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80055c0:	bfd6      	itet	le
 80055c2:	f1c3 0320 	rsble	r3, r3, #32
 80055c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80055ca:	fa06 f003 	lslle.w	r0, r6, r3
 80055ce:	f7fa ffa1 	bl	8000514 <__aeabi_ui2d>
 80055d2:	2201      	movs	r2, #1
 80055d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80055d8:	3d01      	subs	r5, #1
 80055da:	920e      	str	r2, [sp, #56]	; 0x38
 80055dc:	e76f      	b.n	80054be <_dtoa_r+0x126>
 80055de:	2301      	movs	r3, #1
 80055e0:	e7b3      	b.n	800554a <_dtoa_r+0x1b2>
 80055e2:	900c      	str	r0, [sp, #48]	; 0x30
 80055e4:	e7b2      	b.n	800554c <_dtoa_r+0x1b4>
 80055e6:	9b05      	ldr	r3, [sp, #20]
 80055e8:	eba3 030b 	sub.w	r3, r3, fp
 80055ec:	9305      	str	r3, [sp, #20]
 80055ee:	f1cb 0300 	rsb	r3, fp, #0
 80055f2:	9308      	str	r3, [sp, #32]
 80055f4:	2300      	movs	r3, #0
 80055f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80055f8:	e7bf      	b.n	800557a <_dtoa_r+0x1e2>
 80055fa:	2300      	movs	r3, #0
 80055fc:	9309      	str	r3, [sp, #36]	; 0x24
 80055fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	dc52      	bgt.n	80056aa <_dtoa_r+0x312>
 8005604:	2301      	movs	r3, #1
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	461a      	mov	r2, r3
 800560c:	920a      	str	r2, [sp, #40]	; 0x28
 800560e:	e00b      	b.n	8005628 <_dtoa_r+0x290>
 8005610:	2301      	movs	r3, #1
 8005612:	e7f3      	b.n	80055fc <_dtoa_r+0x264>
 8005614:	2300      	movs	r3, #0
 8005616:	9309      	str	r3, [sp, #36]	; 0x24
 8005618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561a:	445b      	add	r3, fp
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	3301      	adds	r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	9304      	str	r3, [sp, #16]
 8005624:	bfb8      	it	lt
 8005626:	2301      	movlt	r3, #1
 8005628:	69e0      	ldr	r0, [r4, #28]
 800562a:	2100      	movs	r1, #0
 800562c:	2204      	movs	r2, #4
 800562e:	f102 0614 	add.w	r6, r2, #20
 8005632:	429e      	cmp	r6, r3
 8005634:	d93d      	bls.n	80056b2 <_dtoa_r+0x31a>
 8005636:	6041      	str	r1, [r0, #4]
 8005638:	4620      	mov	r0, r4
 800563a:	f000 fd9f 	bl	800617c <_Balloc>
 800563e:	9000      	str	r0, [sp, #0]
 8005640:	2800      	cmp	r0, #0
 8005642:	d139      	bne.n	80056b8 <_dtoa_r+0x320>
 8005644:	4b16      	ldr	r3, [pc, #88]	; (80056a0 <_dtoa_r+0x308>)
 8005646:	4602      	mov	r2, r0
 8005648:	f240 11af 	movw	r1, #431	; 0x1af
 800564c:	e6bd      	b.n	80053ca <_dtoa_r+0x32>
 800564e:	2301      	movs	r3, #1
 8005650:	e7e1      	b.n	8005616 <_dtoa_r+0x27e>
 8005652:	2501      	movs	r5, #1
 8005654:	2300      	movs	r3, #0
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	9509      	str	r5, [sp, #36]	; 0x24
 800565a:	f04f 33ff 	mov.w	r3, #4294967295
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	9304      	str	r3, [sp, #16]
 8005662:	2200      	movs	r2, #0
 8005664:	2312      	movs	r3, #18
 8005666:	e7d1      	b.n	800560c <_dtoa_r+0x274>
 8005668:	636f4361 	.word	0x636f4361
 800566c:	3fd287a7 	.word	0x3fd287a7
 8005670:	8b60c8b3 	.word	0x8b60c8b3
 8005674:	3fc68a28 	.word	0x3fc68a28
 8005678:	509f79fb 	.word	0x509f79fb
 800567c:	3fd34413 	.word	0x3fd34413
 8005680:	08007099 	.word	0x08007099
 8005684:	080070b0 	.word	0x080070b0
 8005688:	7ff00000 	.word	0x7ff00000
 800568c:	08007095 	.word	0x08007095
 8005690:	0800708c 	.word	0x0800708c
 8005694:	08007069 	.word	0x08007069
 8005698:	3ff80000 	.word	0x3ff80000
 800569c:	080071a0 	.word	0x080071a0
 80056a0:	08007108 	.word	0x08007108
 80056a4:	2301      	movs	r3, #1
 80056a6:	9309      	str	r3, [sp, #36]	; 0x24
 80056a8:	e7d7      	b.n	800565a <_dtoa_r+0x2c2>
 80056aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	9304      	str	r3, [sp, #16]
 80056b0:	e7ba      	b.n	8005628 <_dtoa_r+0x290>
 80056b2:	3101      	adds	r1, #1
 80056b4:	0052      	lsls	r2, r2, #1
 80056b6:	e7ba      	b.n	800562e <_dtoa_r+0x296>
 80056b8:	69e3      	ldr	r3, [r4, #28]
 80056ba:	9a00      	ldr	r2, [sp, #0]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	9b04      	ldr	r3, [sp, #16]
 80056c0:	2b0e      	cmp	r3, #14
 80056c2:	f200 80a8 	bhi.w	8005816 <_dtoa_r+0x47e>
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	f000 80a5 	beq.w	8005816 <_dtoa_r+0x47e>
 80056cc:	f1bb 0f00 	cmp.w	fp, #0
 80056d0:	dd38      	ble.n	8005744 <_dtoa_r+0x3ac>
 80056d2:	4bc0      	ldr	r3, [pc, #768]	; (80059d4 <_dtoa_r+0x63c>)
 80056d4:	f00b 020f 	and.w	r2, fp, #15
 80056d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80056e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80056e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80056e8:	d019      	beq.n	800571e <_dtoa_r+0x386>
 80056ea:	4bbb      	ldr	r3, [pc, #748]	; (80059d8 <_dtoa_r+0x640>)
 80056ec:	ec51 0b18 	vmov	r0, r1, d8
 80056f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056f4:	f7fb f8b2 	bl	800085c <__aeabi_ddiv>
 80056f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056fc:	f008 080f 	and.w	r8, r8, #15
 8005700:	2503      	movs	r5, #3
 8005702:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80059d8 <_dtoa_r+0x640>
 8005706:	f1b8 0f00 	cmp.w	r8, #0
 800570a:	d10a      	bne.n	8005722 <_dtoa_r+0x38a>
 800570c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005710:	4632      	mov	r2, r6
 8005712:	463b      	mov	r3, r7
 8005714:	f7fb f8a2 	bl	800085c <__aeabi_ddiv>
 8005718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800571c:	e02b      	b.n	8005776 <_dtoa_r+0x3de>
 800571e:	2502      	movs	r5, #2
 8005720:	e7ef      	b.n	8005702 <_dtoa_r+0x36a>
 8005722:	f018 0f01 	tst.w	r8, #1
 8005726:	d008      	beq.n	800573a <_dtoa_r+0x3a2>
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005730:	f7fa ff6a 	bl	8000608 <__aeabi_dmul>
 8005734:	3501      	adds	r5, #1
 8005736:	4606      	mov	r6, r0
 8005738:	460f      	mov	r7, r1
 800573a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800573e:	f109 0908 	add.w	r9, r9, #8
 8005742:	e7e0      	b.n	8005706 <_dtoa_r+0x36e>
 8005744:	f000 809f 	beq.w	8005886 <_dtoa_r+0x4ee>
 8005748:	f1cb 0600 	rsb	r6, fp, #0
 800574c:	4ba1      	ldr	r3, [pc, #644]	; (80059d4 <_dtoa_r+0x63c>)
 800574e:	4fa2      	ldr	r7, [pc, #648]	; (80059d8 <_dtoa_r+0x640>)
 8005750:	f006 020f 	and.w	r2, r6, #15
 8005754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	ec51 0b18 	vmov	r0, r1, d8
 8005760:	f7fa ff52 	bl	8000608 <__aeabi_dmul>
 8005764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005768:	1136      	asrs	r6, r6, #4
 800576a:	2300      	movs	r3, #0
 800576c:	2502      	movs	r5, #2
 800576e:	2e00      	cmp	r6, #0
 8005770:	d17e      	bne.n	8005870 <_dtoa_r+0x4d8>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1d0      	bne.n	8005718 <_dtoa_r+0x380>
 8005776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005778:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8084 	beq.w	800588a <_dtoa_r+0x4f2>
 8005782:	4b96      	ldr	r3, [pc, #600]	; (80059dc <_dtoa_r+0x644>)
 8005784:	2200      	movs	r2, #0
 8005786:	4640      	mov	r0, r8
 8005788:	4649      	mov	r1, r9
 800578a:	f7fb f9af 	bl	8000aec <__aeabi_dcmplt>
 800578e:	2800      	cmp	r0, #0
 8005790:	d07b      	beq.n	800588a <_dtoa_r+0x4f2>
 8005792:	9b04      	ldr	r3, [sp, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d078      	beq.n	800588a <_dtoa_r+0x4f2>
 8005798:	9b01      	ldr	r3, [sp, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	dd39      	ble.n	8005812 <_dtoa_r+0x47a>
 800579e:	4b90      	ldr	r3, [pc, #576]	; (80059e0 <_dtoa_r+0x648>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	4640      	mov	r0, r8
 80057a4:	4649      	mov	r1, r9
 80057a6:	f7fa ff2f 	bl	8000608 <__aeabi_dmul>
 80057aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057ae:	9e01      	ldr	r6, [sp, #4]
 80057b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80057b4:	3501      	adds	r5, #1
 80057b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80057ba:	4628      	mov	r0, r5
 80057bc:	f7fa feba 	bl	8000534 <__aeabi_i2d>
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	f7fa ff20 	bl	8000608 <__aeabi_dmul>
 80057c8:	4b86      	ldr	r3, [pc, #536]	; (80059e4 <_dtoa_r+0x64c>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	f7fa fd66 	bl	800029c <__adddf3>
 80057d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80057d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057d8:	9303      	str	r3, [sp, #12]
 80057da:	2e00      	cmp	r6, #0
 80057dc:	d158      	bne.n	8005890 <_dtoa_r+0x4f8>
 80057de:	4b82      	ldr	r3, [pc, #520]	; (80059e8 <_dtoa_r+0x650>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	f7fa fd57 	bl	8000298 <__aeabi_dsub>
 80057ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ee:	4680      	mov	r8, r0
 80057f0:	4689      	mov	r9, r1
 80057f2:	f7fb f999 	bl	8000b28 <__aeabi_dcmpgt>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	f040 8296 	bne.w	8005d28 <_dtoa_r+0x990>
 80057fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005800:	4640      	mov	r0, r8
 8005802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005806:	4649      	mov	r1, r9
 8005808:	f7fb f970 	bl	8000aec <__aeabi_dcmplt>
 800580c:	2800      	cmp	r0, #0
 800580e:	f040 8289 	bne.w	8005d24 <_dtoa_r+0x98c>
 8005812:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005818:	2b00      	cmp	r3, #0
 800581a:	f2c0 814e 	blt.w	8005aba <_dtoa_r+0x722>
 800581e:	f1bb 0f0e 	cmp.w	fp, #14
 8005822:	f300 814a 	bgt.w	8005aba <_dtoa_r+0x722>
 8005826:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <_dtoa_r+0x63c>)
 8005828:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800582c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	f280 80dc 	bge.w	80059f0 <_dtoa_r+0x658>
 8005838:	9b04      	ldr	r3, [sp, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f300 80d8 	bgt.w	80059f0 <_dtoa_r+0x658>
 8005840:	f040 826f 	bne.w	8005d22 <_dtoa_r+0x98a>
 8005844:	4b68      	ldr	r3, [pc, #416]	; (80059e8 <_dtoa_r+0x650>)
 8005846:	2200      	movs	r2, #0
 8005848:	4640      	mov	r0, r8
 800584a:	4649      	mov	r1, r9
 800584c:	f7fa fedc 	bl	8000608 <__aeabi_dmul>
 8005850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005854:	f7fb f95e 	bl	8000b14 <__aeabi_dcmpge>
 8005858:	9e04      	ldr	r6, [sp, #16]
 800585a:	4637      	mov	r7, r6
 800585c:	2800      	cmp	r0, #0
 800585e:	f040 8245 	bne.w	8005cec <_dtoa_r+0x954>
 8005862:	9d00      	ldr	r5, [sp, #0]
 8005864:	2331      	movs	r3, #49	; 0x31
 8005866:	f805 3b01 	strb.w	r3, [r5], #1
 800586a:	f10b 0b01 	add.w	fp, fp, #1
 800586e:	e241      	b.n	8005cf4 <_dtoa_r+0x95c>
 8005870:	07f2      	lsls	r2, r6, #31
 8005872:	d505      	bpl.n	8005880 <_dtoa_r+0x4e8>
 8005874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005878:	f7fa fec6 	bl	8000608 <__aeabi_dmul>
 800587c:	3501      	adds	r5, #1
 800587e:	2301      	movs	r3, #1
 8005880:	1076      	asrs	r6, r6, #1
 8005882:	3708      	adds	r7, #8
 8005884:	e773      	b.n	800576e <_dtoa_r+0x3d6>
 8005886:	2502      	movs	r5, #2
 8005888:	e775      	b.n	8005776 <_dtoa_r+0x3de>
 800588a:	9e04      	ldr	r6, [sp, #16]
 800588c:	465f      	mov	r7, fp
 800588e:	e792      	b.n	80057b6 <_dtoa_r+0x41e>
 8005890:	9900      	ldr	r1, [sp, #0]
 8005892:	4b50      	ldr	r3, [pc, #320]	; (80059d4 <_dtoa_r+0x63c>)
 8005894:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005898:	4431      	add	r1, r6
 800589a:	9102      	str	r1, [sp, #8]
 800589c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800589e:	eeb0 9a47 	vmov.f32	s18, s14
 80058a2:	eef0 9a67 	vmov.f32	s19, s15
 80058a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058ae:	2900      	cmp	r1, #0
 80058b0:	d044      	beq.n	800593c <_dtoa_r+0x5a4>
 80058b2:	494e      	ldr	r1, [pc, #312]	; (80059ec <_dtoa_r+0x654>)
 80058b4:	2000      	movs	r0, #0
 80058b6:	f7fa ffd1 	bl	800085c <__aeabi_ddiv>
 80058ba:	ec53 2b19 	vmov	r2, r3, d9
 80058be:	f7fa fceb 	bl	8000298 <__aeabi_dsub>
 80058c2:	9d00      	ldr	r5, [sp, #0]
 80058c4:	ec41 0b19 	vmov	d9, r0, r1
 80058c8:	4649      	mov	r1, r9
 80058ca:	4640      	mov	r0, r8
 80058cc:	f7fb f94c 	bl	8000b68 <__aeabi_d2iz>
 80058d0:	4606      	mov	r6, r0
 80058d2:	f7fa fe2f 	bl	8000534 <__aeabi_i2d>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f7fa fcdb 	bl	8000298 <__aeabi_dsub>
 80058e2:	3630      	adds	r6, #48	; 0x30
 80058e4:	f805 6b01 	strb.w	r6, [r5], #1
 80058e8:	ec53 2b19 	vmov	r2, r3, d9
 80058ec:	4680      	mov	r8, r0
 80058ee:	4689      	mov	r9, r1
 80058f0:	f7fb f8fc 	bl	8000aec <__aeabi_dcmplt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d164      	bne.n	80059c2 <_dtoa_r+0x62a>
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	4937      	ldr	r1, [pc, #220]	; (80059dc <_dtoa_r+0x644>)
 80058fe:	2000      	movs	r0, #0
 8005900:	f7fa fcca 	bl	8000298 <__aeabi_dsub>
 8005904:	ec53 2b19 	vmov	r2, r3, d9
 8005908:	f7fb f8f0 	bl	8000aec <__aeabi_dcmplt>
 800590c:	2800      	cmp	r0, #0
 800590e:	f040 80b6 	bne.w	8005a7e <_dtoa_r+0x6e6>
 8005912:	9b02      	ldr	r3, [sp, #8]
 8005914:	429d      	cmp	r5, r3
 8005916:	f43f af7c 	beq.w	8005812 <_dtoa_r+0x47a>
 800591a:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <_dtoa_r+0x648>)
 800591c:	ec51 0b19 	vmov	r0, r1, d9
 8005920:	2200      	movs	r2, #0
 8005922:	f7fa fe71 	bl	8000608 <__aeabi_dmul>
 8005926:	4b2e      	ldr	r3, [pc, #184]	; (80059e0 <_dtoa_r+0x648>)
 8005928:	ec41 0b19 	vmov	d9, r0, r1
 800592c:	2200      	movs	r2, #0
 800592e:	4640      	mov	r0, r8
 8005930:	4649      	mov	r1, r9
 8005932:	f7fa fe69 	bl	8000608 <__aeabi_dmul>
 8005936:	4680      	mov	r8, r0
 8005938:	4689      	mov	r9, r1
 800593a:	e7c5      	b.n	80058c8 <_dtoa_r+0x530>
 800593c:	ec51 0b17 	vmov	r0, r1, d7
 8005940:	f7fa fe62 	bl	8000608 <__aeabi_dmul>
 8005944:	9b02      	ldr	r3, [sp, #8]
 8005946:	9d00      	ldr	r5, [sp, #0]
 8005948:	930f      	str	r3, [sp, #60]	; 0x3c
 800594a:	ec41 0b19 	vmov	d9, r0, r1
 800594e:	4649      	mov	r1, r9
 8005950:	4640      	mov	r0, r8
 8005952:	f7fb f909 	bl	8000b68 <__aeabi_d2iz>
 8005956:	4606      	mov	r6, r0
 8005958:	f7fa fdec 	bl	8000534 <__aeabi_i2d>
 800595c:	3630      	adds	r6, #48	; 0x30
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4640      	mov	r0, r8
 8005964:	4649      	mov	r1, r9
 8005966:	f7fa fc97 	bl	8000298 <__aeabi_dsub>
 800596a:	f805 6b01 	strb.w	r6, [r5], #1
 800596e:	9b02      	ldr	r3, [sp, #8]
 8005970:	429d      	cmp	r5, r3
 8005972:	4680      	mov	r8, r0
 8005974:	4689      	mov	r9, r1
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	d124      	bne.n	80059c6 <_dtoa_r+0x62e>
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <_dtoa_r+0x654>)
 800597e:	ec51 0b19 	vmov	r0, r1, d9
 8005982:	f7fa fc8b 	bl	800029c <__adddf3>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4640      	mov	r0, r8
 800598c:	4649      	mov	r1, r9
 800598e:	f7fb f8cb 	bl	8000b28 <__aeabi_dcmpgt>
 8005992:	2800      	cmp	r0, #0
 8005994:	d173      	bne.n	8005a7e <_dtoa_r+0x6e6>
 8005996:	ec53 2b19 	vmov	r2, r3, d9
 800599a:	4914      	ldr	r1, [pc, #80]	; (80059ec <_dtoa_r+0x654>)
 800599c:	2000      	movs	r0, #0
 800599e:	f7fa fc7b 	bl	8000298 <__aeabi_dsub>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4640      	mov	r0, r8
 80059a8:	4649      	mov	r1, r9
 80059aa:	f7fb f89f 	bl	8000aec <__aeabi_dcmplt>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	f43f af2f 	beq.w	8005812 <_dtoa_r+0x47a>
 80059b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80059b6:	1e6b      	subs	r3, r5, #1
 80059b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80059ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059be:	2b30      	cmp	r3, #48	; 0x30
 80059c0:	d0f8      	beq.n	80059b4 <_dtoa_r+0x61c>
 80059c2:	46bb      	mov	fp, r7
 80059c4:	e04a      	b.n	8005a5c <_dtoa_r+0x6c4>
 80059c6:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <_dtoa_r+0x648>)
 80059c8:	f7fa fe1e 	bl	8000608 <__aeabi_dmul>
 80059cc:	4680      	mov	r8, r0
 80059ce:	4689      	mov	r9, r1
 80059d0:	e7bd      	b.n	800594e <_dtoa_r+0x5b6>
 80059d2:	bf00      	nop
 80059d4:	080071a0 	.word	0x080071a0
 80059d8:	08007178 	.word	0x08007178
 80059dc:	3ff00000 	.word	0x3ff00000
 80059e0:	40240000 	.word	0x40240000
 80059e4:	401c0000 	.word	0x401c0000
 80059e8:	40140000 	.word	0x40140000
 80059ec:	3fe00000 	.word	0x3fe00000
 80059f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059f4:	9d00      	ldr	r5, [sp, #0]
 80059f6:	4642      	mov	r2, r8
 80059f8:	464b      	mov	r3, r9
 80059fa:	4630      	mov	r0, r6
 80059fc:	4639      	mov	r1, r7
 80059fe:	f7fa ff2d 	bl	800085c <__aeabi_ddiv>
 8005a02:	f7fb f8b1 	bl	8000b68 <__aeabi_d2iz>
 8005a06:	9001      	str	r0, [sp, #4]
 8005a08:	f7fa fd94 	bl	8000534 <__aeabi_i2d>
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	f7fa fdfa 	bl	8000608 <__aeabi_dmul>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	f7fa fc3c 	bl	8000298 <__aeabi_dsub>
 8005a20:	9e01      	ldr	r6, [sp, #4]
 8005a22:	9f04      	ldr	r7, [sp, #16]
 8005a24:	3630      	adds	r6, #48	; 0x30
 8005a26:	f805 6b01 	strb.w	r6, [r5], #1
 8005a2a:	9e00      	ldr	r6, [sp, #0]
 8005a2c:	1bae      	subs	r6, r5, r6
 8005a2e:	42b7      	cmp	r7, r6
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	d134      	bne.n	8005aa0 <_dtoa_r+0x708>
 8005a36:	f7fa fc31 	bl	800029c <__adddf3>
 8005a3a:	4642      	mov	r2, r8
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460f      	mov	r7, r1
 8005a42:	f7fb f871 	bl	8000b28 <__aeabi_dcmpgt>
 8005a46:	b9c8      	cbnz	r0, 8005a7c <_dtoa_r+0x6e4>
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	4639      	mov	r1, r7
 8005a50:	f7fb f842 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a54:	b110      	cbz	r0, 8005a5c <_dtoa_r+0x6c4>
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	07db      	lsls	r3, r3, #31
 8005a5a:	d40f      	bmi.n	8005a7c <_dtoa_r+0x6e4>
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 fbcc 	bl	80061fc <_Bfree>
 8005a64:	2300      	movs	r3, #0
 8005a66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a68:	702b      	strb	r3, [r5, #0]
 8005a6a:	f10b 0301 	add.w	r3, fp, #1
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f43f ace2 	beq.w	800543c <_dtoa_r+0xa4>
 8005a78:	601d      	str	r5, [r3, #0]
 8005a7a:	e4df      	b.n	800543c <_dtoa_r+0xa4>
 8005a7c:	465f      	mov	r7, fp
 8005a7e:	462b      	mov	r3, r5
 8005a80:	461d      	mov	r5, r3
 8005a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a86:	2a39      	cmp	r2, #57	; 0x39
 8005a88:	d106      	bne.n	8005a98 <_dtoa_r+0x700>
 8005a8a:	9a00      	ldr	r2, [sp, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d1f7      	bne.n	8005a80 <_dtoa_r+0x6e8>
 8005a90:	9900      	ldr	r1, [sp, #0]
 8005a92:	2230      	movs	r2, #48	; 0x30
 8005a94:	3701      	adds	r7, #1
 8005a96:	700a      	strb	r2, [r1, #0]
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	3201      	adds	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e790      	b.n	80059c2 <_dtoa_r+0x62a>
 8005aa0:	4ba3      	ldr	r3, [pc, #652]	; (8005d30 <_dtoa_r+0x998>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f7fa fdb0 	bl	8000608 <__aeabi_dmul>
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4606      	mov	r6, r0
 8005aae:	460f      	mov	r7, r1
 8005ab0:	f7fb f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d09e      	beq.n	80059f6 <_dtoa_r+0x65e>
 8005ab8:	e7d0      	b.n	8005a5c <_dtoa_r+0x6c4>
 8005aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	f000 80ca 	beq.w	8005c56 <_dtoa_r+0x8be>
 8005ac2:	9a07      	ldr	r2, [sp, #28]
 8005ac4:	2a01      	cmp	r2, #1
 8005ac6:	f300 80ad 	bgt.w	8005c24 <_dtoa_r+0x88c>
 8005aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	f000 80a5 	beq.w	8005c1c <_dtoa_r+0x884>
 8005ad2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ad6:	9e08      	ldr	r6, [sp, #32]
 8005ad8:	9d05      	ldr	r5, [sp, #20]
 8005ada:	9a05      	ldr	r2, [sp, #20]
 8005adc:	441a      	add	r2, r3
 8005ade:	9205      	str	r2, [sp, #20]
 8005ae0:	9a06      	ldr	r2, [sp, #24]
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	441a      	add	r2, r3
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	9206      	str	r2, [sp, #24]
 8005aea:	f000 fc3d 	bl	8006368 <__i2b>
 8005aee:	4607      	mov	r7, r0
 8005af0:	b165      	cbz	r5, 8005b0c <_dtoa_r+0x774>
 8005af2:	9b06      	ldr	r3, [sp, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	dd09      	ble.n	8005b0c <_dtoa_r+0x774>
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	9a05      	ldr	r2, [sp, #20]
 8005afc:	bfa8      	it	ge
 8005afe:	462b      	movge	r3, r5
 8005b00:	1ad2      	subs	r2, r2, r3
 8005b02:	9205      	str	r2, [sp, #20]
 8005b04:	9a06      	ldr	r2, [sp, #24]
 8005b06:	1aed      	subs	r5, r5, r3
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	9306      	str	r3, [sp, #24]
 8005b0c:	9b08      	ldr	r3, [sp, #32]
 8005b0e:	b1f3      	cbz	r3, 8005b4e <_dtoa_r+0x7b6>
 8005b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80a3 	beq.w	8005c5e <_dtoa_r+0x8c6>
 8005b18:	2e00      	cmp	r6, #0
 8005b1a:	dd10      	ble.n	8005b3e <_dtoa_r+0x7a6>
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4632      	mov	r2, r6
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fce1 	bl	80064e8 <__pow5mult>
 8005b26:	4652      	mov	r2, sl
 8005b28:	4601      	mov	r1, r0
 8005b2a:	4607      	mov	r7, r0
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fc31 	bl	8006394 <__multiply>
 8005b32:	4651      	mov	r1, sl
 8005b34:	4680      	mov	r8, r0
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 fb60 	bl	80061fc <_Bfree>
 8005b3c:	46c2      	mov	sl, r8
 8005b3e:	9b08      	ldr	r3, [sp, #32]
 8005b40:	1b9a      	subs	r2, r3, r6
 8005b42:	d004      	beq.n	8005b4e <_dtoa_r+0x7b6>
 8005b44:	4651      	mov	r1, sl
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 fcce 	bl	80064e8 <__pow5mult>
 8005b4c:	4682      	mov	sl, r0
 8005b4e:	2101      	movs	r1, #1
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 fc09 	bl	8006368 <__i2b>
 8005b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	f340 8081 	ble.w	8005c62 <_dtoa_r+0x8ca>
 8005b60:	461a      	mov	r2, r3
 8005b62:	4601      	mov	r1, r0
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fcbf 	bl	80064e8 <__pow5mult>
 8005b6a:	9b07      	ldr	r3, [sp, #28]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	4606      	mov	r6, r0
 8005b70:	dd7a      	ble.n	8005c68 <_dtoa_r+0x8d0>
 8005b72:	f04f 0800 	mov.w	r8, #0
 8005b76:	6933      	ldr	r3, [r6, #16]
 8005b78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b7c:	6918      	ldr	r0, [r3, #16]
 8005b7e:	f000 fba5 	bl	80062cc <__hi0bits>
 8005b82:	f1c0 0020 	rsb	r0, r0, #32
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	4418      	add	r0, r3
 8005b8a:	f010 001f 	ands.w	r0, r0, #31
 8005b8e:	f000 8094 	beq.w	8005cba <_dtoa_r+0x922>
 8005b92:	f1c0 0320 	rsb	r3, r0, #32
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	f340 8085 	ble.w	8005ca6 <_dtoa_r+0x90e>
 8005b9c:	9b05      	ldr	r3, [sp, #20]
 8005b9e:	f1c0 001c 	rsb	r0, r0, #28
 8005ba2:	4403      	add	r3, r0
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	9b06      	ldr	r3, [sp, #24]
 8005ba8:	4403      	add	r3, r0
 8005baa:	4405      	add	r5, r0
 8005bac:	9306      	str	r3, [sp, #24]
 8005bae:	9b05      	ldr	r3, [sp, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dd05      	ble.n	8005bc0 <_dtoa_r+0x828>
 8005bb4:	4651      	mov	r1, sl
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fcef 	bl	800659c <__lshift>
 8005bbe:	4682      	mov	sl, r0
 8005bc0:	9b06      	ldr	r3, [sp, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	dd05      	ble.n	8005bd2 <_dtoa_r+0x83a>
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 fce6 	bl	800659c <__lshift>
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d072      	beq.n	8005cbe <_dtoa_r+0x926>
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4650      	mov	r0, sl
 8005bdc:	f000 fd4a 	bl	8006674 <__mcmp>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	da6c      	bge.n	8005cbe <_dtoa_r+0x926>
 8005be4:	2300      	movs	r3, #0
 8005be6:	4651      	mov	r1, sl
 8005be8:	220a      	movs	r2, #10
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 fb28 	bl	8006240 <__multadd>
 8005bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bf6:	4682      	mov	sl, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 81b0 	beq.w	8005f5e <_dtoa_r+0xbc6>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4639      	mov	r1, r7
 8005c02:	220a      	movs	r2, #10
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 fb1b 	bl	8006240 <__multadd>
 8005c0a:	9b01      	ldr	r3, [sp, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	4607      	mov	r7, r0
 8005c10:	f300 8096 	bgt.w	8005d40 <_dtoa_r+0x9a8>
 8005c14:	9b07      	ldr	r3, [sp, #28]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	dc59      	bgt.n	8005cce <_dtoa_r+0x936>
 8005c1a:	e091      	b.n	8005d40 <_dtoa_r+0x9a8>
 8005c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c22:	e758      	b.n	8005ad6 <_dtoa_r+0x73e>
 8005c24:	9b04      	ldr	r3, [sp, #16]
 8005c26:	1e5e      	subs	r6, r3, #1
 8005c28:	9b08      	ldr	r3, [sp, #32]
 8005c2a:	42b3      	cmp	r3, r6
 8005c2c:	bfbf      	itttt	lt
 8005c2e:	9b08      	ldrlt	r3, [sp, #32]
 8005c30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005c32:	9608      	strlt	r6, [sp, #32]
 8005c34:	1af3      	sublt	r3, r6, r3
 8005c36:	bfb4      	ite	lt
 8005c38:	18d2      	addlt	r2, r2, r3
 8005c3a:	1b9e      	subge	r6, r3, r6
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	bfbc      	itt	lt
 8005c40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005c42:	2600      	movlt	r6, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfb7      	itett	lt
 8005c48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005c4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005c50:	1a9d      	sublt	r5, r3, r2
 8005c52:	2300      	movlt	r3, #0
 8005c54:	e741      	b.n	8005ada <_dtoa_r+0x742>
 8005c56:	9e08      	ldr	r6, [sp, #32]
 8005c58:	9d05      	ldr	r5, [sp, #20]
 8005c5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c5c:	e748      	b.n	8005af0 <_dtoa_r+0x758>
 8005c5e:	9a08      	ldr	r2, [sp, #32]
 8005c60:	e770      	b.n	8005b44 <_dtoa_r+0x7ac>
 8005c62:	9b07      	ldr	r3, [sp, #28]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	dc19      	bgt.n	8005c9c <_dtoa_r+0x904>
 8005c68:	9b02      	ldr	r3, [sp, #8]
 8005c6a:	b9bb      	cbnz	r3, 8005c9c <_dtoa_r+0x904>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c72:	b99b      	cbnz	r3, 8005c9c <_dtoa_r+0x904>
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c7a:	0d1b      	lsrs	r3, r3, #20
 8005c7c:	051b      	lsls	r3, r3, #20
 8005c7e:	b183      	cbz	r3, 8005ca2 <_dtoa_r+0x90a>
 8005c80:	9b05      	ldr	r3, [sp, #20]
 8005c82:	3301      	adds	r3, #1
 8005c84:	9305      	str	r3, [sp, #20]
 8005c86:	9b06      	ldr	r3, [sp, #24]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	9306      	str	r3, [sp, #24]
 8005c8c:	f04f 0801 	mov.w	r8, #1
 8005c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f47f af6f 	bne.w	8005b76 <_dtoa_r+0x7de>
 8005c98:	2001      	movs	r0, #1
 8005c9a:	e774      	b.n	8005b86 <_dtoa_r+0x7ee>
 8005c9c:	f04f 0800 	mov.w	r8, #0
 8005ca0:	e7f6      	b.n	8005c90 <_dtoa_r+0x8f8>
 8005ca2:	4698      	mov	r8, r3
 8005ca4:	e7f4      	b.n	8005c90 <_dtoa_r+0x8f8>
 8005ca6:	d082      	beq.n	8005bae <_dtoa_r+0x816>
 8005ca8:	9a05      	ldr	r2, [sp, #20]
 8005caa:	331c      	adds	r3, #28
 8005cac:	441a      	add	r2, r3
 8005cae:	9205      	str	r2, [sp, #20]
 8005cb0:	9a06      	ldr	r2, [sp, #24]
 8005cb2:	441a      	add	r2, r3
 8005cb4:	441d      	add	r5, r3
 8005cb6:	9206      	str	r2, [sp, #24]
 8005cb8:	e779      	b.n	8005bae <_dtoa_r+0x816>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	e7f4      	b.n	8005ca8 <_dtoa_r+0x910>
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dc37      	bgt.n	8005d34 <_dtoa_r+0x99c>
 8005cc4:	9b07      	ldr	r3, [sp, #28]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	dd34      	ble.n	8005d34 <_dtoa_r+0x99c>
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	b963      	cbnz	r3, 8005cec <_dtoa_r+0x954>
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	2205      	movs	r2, #5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 fab2 	bl	8006240 <__multadd>
 8005cdc:	4601      	mov	r1, r0
 8005cde:	4606      	mov	r6, r0
 8005ce0:	4650      	mov	r0, sl
 8005ce2:	f000 fcc7 	bl	8006674 <__mcmp>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f73f adbb 	bgt.w	8005862 <_dtoa_r+0x4ca>
 8005cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cee:	9d00      	ldr	r5, [sp, #0]
 8005cf0:	ea6f 0b03 	mvn.w	fp, r3
 8005cf4:	f04f 0800 	mov.w	r8, #0
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 fa7e 	bl	80061fc <_Bfree>
 8005d00:	2f00      	cmp	r7, #0
 8005d02:	f43f aeab 	beq.w	8005a5c <_dtoa_r+0x6c4>
 8005d06:	f1b8 0f00 	cmp.w	r8, #0
 8005d0a:	d005      	beq.n	8005d18 <_dtoa_r+0x980>
 8005d0c:	45b8      	cmp	r8, r7
 8005d0e:	d003      	beq.n	8005d18 <_dtoa_r+0x980>
 8005d10:	4641      	mov	r1, r8
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 fa72 	bl	80061fc <_Bfree>
 8005d18:	4639      	mov	r1, r7
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 fa6e 	bl	80061fc <_Bfree>
 8005d20:	e69c      	b.n	8005a5c <_dtoa_r+0x6c4>
 8005d22:	2600      	movs	r6, #0
 8005d24:	4637      	mov	r7, r6
 8005d26:	e7e1      	b.n	8005cec <_dtoa_r+0x954>
 8005d28:	46bb      	mov	fp, r7
 8005d2a:	4637      	mov	r7, r6
 8005d2c:	e599      	b.n	8005862 <_dtoa_r+0x4ca>
 8005d2e:	bf00      	nop
 8005d30:	40240000 	.word	0x40240000
 8005d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80c8 	beq.w	8005ecc <_dtoa_r+0xb34>
 8005d3c:	9b04      	ldr	r3, [sp, #16]
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	dd05      	ble.n	8005d50 <_dtoa_r+0x9b8>
 8005d44:	4639      	mov	r1, r7
 8005d46:	462a      	mov	r2, r5
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fc27 	bl	800659c <__lshift>
 8005d4e:	4607      	mov	r7, r0
 8005d50:	f1b8 0f00 	cmp.w	r8, #0
 8005d54:	d05b      	beq.n	8005e0e <_dtoa_r+0xa76>
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 fa0f 	bl	800617c <_Balloc>
 8005d5e:	4605      	mov	r5, r0
 8005d60:	b928      	cbnz	r0, 8005d6e <_dtoa_r+0x9d6>
 8005d62:	4b83      	ldr	r3, [pc, #524]	; (8005f70 <_dtoa_r+0xbd8>)
 8005d64:	4602      	mov	r2, r0
 8005d66:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005d6a:	f7ff bb2e 	b.w	80053ca <_dtoa_r+0x32>
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	3202      	adds	r2, #2
 8005d72:	0092      	lsls	r2, r2, #2
 8005d74:	f107 010c 	add.w	r1, r7, #12
 8005d78:	300c      	adds	r0, #12
 8005d7a:	f000 fe39 	bl	80069f0 <memcpy>
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4629      	mov	r1, r5
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 fc0a 	bl	800659c <__lshift>
 8005d88:	9b00      	ldr	r3, [sp, #0]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d92:	4413      	add	r3, r2
 8005d94:	9308      	str	r3, [sp, #32]
 8005d96:	9b02      	ldr	r3, [sp, #8]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	46b8      	mov	r8, r7
 8005d9e:	9306      	str	r3, [sp, #24]
 8005da0:	4607      	mov	r7, r0
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	4631      	mov	r1, r6
 8005da6:	3b01      	subs	r3, #1
 8005da8:	4650      	mov	r0, sl
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	f7ff fa6b 	bl	8005286 <quorem>
 8005db0:	4641      	mov	r1, r8
 8005db2:	9002      	str	r0, [sp, #8]
 8005db4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005db8:	4650      	mov	r0, sl
 8005dba:	f000 fc5b 	bl	8006674 <__mcmp>
 8005dbe:	463a      	mov	r2, r7
 8005dc0:	9005      	str	r0, [sp, #20]
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 fc71 	bl	80066ac <__mdiff>
 8005dca:	68c2      	ldr	r2, [r0, #12]
 8005dcc:	4605      	mov	r5, r0
 8005dce:	bb02      	cbnz	r2, 8005e12 <_dtoa_r+0xa7a>
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	f000 fc4e 	bl	8006674 <__mcmp>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4620      	mov	r0, r4
 8005dde:	9209      	str	r2, [sp, #36]	; 0x24
 8005de0:	f000 fa0c 	bl	80061fc <_Bfree>
 8005de4:	9b07      	ldr	r3, [sp, #28]
 8005de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de8:	9d04      	ldr	r5, [sp, #16]
 8005dea:	ea43 0102 	orr.w	r1, r3, r2
 8005dee:	9b06      	ldr	r3, [sp, #24]
 8005df0:	4319      	orrs	r1, r3
 8005df2:	d110      	bne.n	8005e16 <_dtoa_r+0xa7e>
 8005df4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005df8:	d029      	beq.n	8005e4e <_dtoa_r+0xab6>
 8005dfa:	9b05      	ldr	r3, [sp, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dd02      	ble.n	8005e06 <_dtoa_r+0xa6e>
 8005e00:	9b02      	ldr	r3, [sp, #8]
 8005e02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005e06:	9b01      	ldr	r3, [sp, #4]
 8005e08:	f883 9000 	strb.w	r9, [r3]
 8005e0c:	e774      	b.n	8005cf8 <_dtoa_r+0x960>
 8005e0e:	4638      	mov	r0, r7
 8005e10:	e7ba      	b.n	8005d88 <_dtoa_r+0x9f0>
 8005e12:	2201      	movs	r2, #1
 8005e14:	e7e1      	b.n	8005dda <_dtoa_r+0xa42>
 8005e16:	9b05      	ldr	r3, [sp, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	db04      	blt.n	8005e26 <_dtoa_r+0xa8e>
 8005e1c:	9907      	ldr	r1, [sp, #28]
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	9906      	ldr	r1, [sp, #24]
 8005e22:	430b      	orrs	r3, r1
 8005e24:	d120      	bne.n	8005e68 <_dtoa_r+0xad0>
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	dded      	ble.n	8005e06 <_dtoa_r+0xa6e>
 8005e2a:	4651      	mov	r1, sl
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 fbb4 	bl	800659c <__lshift>
 8005e34:	4631      	mov	r1, r6
 8005e36:	4682      	mov	sl, r0
 8005e38:	f000 fc1c 	bl	8006674 <__mcmp>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	dc03      	bgt.n	8005e48 <_dtoa_r+0xab0>
 8005e40:	d1e1      	bne.n	8005e06 <_dtoa_r+0xa6e>
 8005e42:	f019 0f01 	tst.w	r9, #1
 8005e46:	d0de      	beq.n	8005e06 <_dtoa_r+0xa6e>
 8005e48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e4c:	d1d8      	bne.n	8005e00 <_dtoa_r+0xa68>
 8005e4e:	9a01      	ldr	r2, [sp, #4]
 8005e50:	2339      	movs	r3, #57	; 0x39
 8005e52:	7013      	strb	r3, [r2, #0]
 8005e54:	462b      	mov	r3, r5
 8005e56:	461d      	mov	r5, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e5e:	2a39      	cmp	r2, #57	; 0x39
 8005e60:	d06c      	beq.n	8005f3c <_dtoa_r+0xba4>
 8005e62:	3201      	adds	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e747      	b.n	8005cf8 <_dtoa_r+0x960>
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	dd07      	ble.n	8005e7c <_dtoa_r+0xae4>
 8005e6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e70:	d0ed      	beq.n	8005e4e <_dtoa_r+0xab6>
 8005e72:	9a01      	ldr	r2, [sp, #4]
 8005e74:	f109 0301 	add.w	r3, r9, #1
 8005e78:	7013      	strb	r3, [r2, #0]
 8005e7a:	e73d      	b.n	8005cf8 <_dtoa_r+0x960>
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	9a08      	ldr	r2, [sp, #32]
 8005e80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d043      	beq.n	8005f10 <_dtoa_r+0xb78>
 8005e88:	4651      	mov	r1, sl
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f9d6 	bl	8006240 <__multadd>
 8005e94:	45b8      	cmp	r8, r7
 8005e96:	4682      	mov	sl, r0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	f04f 020a 	mov.w	r2, #10
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	d107      	bne.n	8005eb6 <_dtoa_r+0xb1e>
 8005ea6:	f000 f9cb 	bl	8006240 <__multadd>
 8005eaa:	4680      	mov	r8, r0
 8005eac:	4607      	mov	r7, r0
 8005eae:	9b04      	ldr	r3, [sp, #16]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	e775      	b.n	8005da2 <_dtoa_r+0xa0a>
 8005eb6:	f000 f9c3 	bl	8006240 <__multadd>
 8005eba:	4639      	mov	r1, r7
 8005ebc:	4680      	mov	r8, r0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	220a      	movs	r2, #10
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 f9bc 	bl	8006240 <__multadd>
 8005ec8:	4607      	mov	r7, r0
 8005eca:	e7f0      	b.n	8005eae <_dtoa_r+0xb16>
 8005ecc:	9b04      	ldr	r3, [sp, #16]
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	9d00      	ldr	r5, [sp, #0]
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	f7ff f9d6 	bl	8005286 <quorem>
 8005eda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ede:	9b00      	ldr	r3, [sp, #0]
 8005ee0:	f805 9b01 	strb.w	r9, [r5], #1
 8005ee4:	1aea      	subs	r2, r5, r3
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	dd07      	ble.n	8005efc <_dtoa_r+0xb64>
 8005eec:	4651      	mov	r1, sl
 8005eee:	2300      	movs	r3, #0
 8005ef0:	220a      	movs	r2, #10
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f9a4 	bl	8006240 <__multadd>
 8005ef8:	4682      	mov	sl, r0
 8005efa:	e7ea      	b.n	8005ed2 <_dtoa_r+0xb3a>
 8005efc:	9b01      	ldr	r3, [sp, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfc8      	it	gt
 8005f02:	461d      	movgt	r5, r3
 8005f04:	9b00      	ldr	r3, [sp, #0]
 8005f06:	bfd8      	it	le
 8005f08:	2501      	movle	r5, #1
 8005f0a:	441d      	add	r5, r3
 8005f0c:	f04f 0800 	mov.w	r8, #0
 8005f10:	4651      	mov	r1, sl
 8005f12:	2201      	movs	r2, #1
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 fb41 	bl	800659c <__lshift>
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4682      	mov	sl, r0
 8005f1e:	f000 fba9 	bl	8006674 <__mcmp>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	dc96      	bgt.n	8005e54 <_dtoa_r+0xabc>
 8005f26:	d102      	bne.n	8005f2e <_dtoa_r+0xb96>
 8005f28:	f019 0f01 	tst.w	r9, #1
 8005f2c:	d192      	bne.n	8005e54 <_dtoa_r+0xabc>
 8005f2e:	462b      	mov	r3, r5
 8005f30:	461d      	mov	r5, r3
 8005f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f36:	2a30      	cmp	r2, #48	; 0x30
 8005f38:	d0fa      	beq.n	8005f30 <_dtoa_r+0xb98>
 8005f3a:	e6dd      	b.n	8005cf8 <_dtoa_r+0x960>
 8005f3c:	9a00      	ldr	r2, [sp, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d189      	bne.n	8005e56 <_dtoa_r+0xabe>
 8005f42:	f10b 0b01 	add.w	fp, fp, #1
 8005f46:	2331      	movs	r3, #49	; 0x31
 8005f48:	e796      	b.n	8005e78 <_dtoa_r+0xae0>
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <_dtoa_r+0xbdc>)
 8005f4c:	f7ff ba99 	b.w	8005482 <_dtoa_r+0xea>
 8005f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f47f aa6d 	bne.w	8005432 <_dtoa_r+0x9a>
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <_dtoa_r+0xbe0>)
 8005f5a:	f7ff ba92 	b.w	8005482 <_dtoa_r+0xea>
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	dcb5      	bgt.n	8005ed0 <_dtoa_r+0xb38>
 8005f64:	9b07      	ldr	r3, [sp, #28]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	f73f aeb1 	bgt.w	8005cce <_dtoa_r+0x936>
 8005f6c:	e7b0      	b.n	8005ed0 <_dtoa_r+0xb38>
 8005f6e:	bf00      	nop
 8005f70:	08007108 	.word	0x08007108
 8005f74:	08007068 	.word	0x08007068
 8005f78:	0800708c 	.word	0x0800708c

08005f7c <_free_r>:
 8005f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f7e:	2900      	cmp	r1, #0
 8005f80:	d044      	beq.n	800600c <_free_r+0x90>
 8005f82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f86:	9001      	str	r0, [sp, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f8e:	bfb8      	it	lt
 8005f90:	18e4      	addlt	r4, r4, r3
 8005f92:	f000 f8e7 	bl	8006164 <__malloc_lock>
 8005f96:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <_free_r+0x94>)
 8005f98:	9801      	ldr	r0, [sp, #4]
 8005f9a:	6813      	ldr	r3, [r2, #0]
 8005f9c:	b933      	cbnz	r3, 8005fac <_free_r+0x30>
 8005f9e:	6063      	str	r3, [r4, #4]
 8005fa0:	6014      	str	r4, [r2, #0]
 8005fa2:	b003      	add	sp, #12
 8005fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fa8:	f000 b8e2 	b.w	8006170 <__malloc_unlock>
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	d908      	bls.n	8005fc2 <_free_r+0x46>
 8005fb0:	6825      	ldr	r5, [r4, #0]
 8005fb2:	1961      	adds	r1, r4, r5
 8005fb4:	428b      	cmp	r3, r1
 8005fb6:	bf01      	itttt	eq
 8005fb8:	6819      	ldreq	r1, [r3, #0]
 8005fba:	685b      	ldreq	r3, [r3, #4]
 8005fbc:	1949      	addeq	r1, r1, r5
 8005fbe:	6021      	streq	r1, [r4, #0]
 8005fc0:	e7ed      	b.n	8005f9e <_free_r+0x22>
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	b10b      	cbz	r3, 8005fcc <_free_r+0x50>
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	d9fa      	bls.n	8005fc2 <_free_r+0x46>
 8005fcc:	6811      	ldr	r1, [r2, #0]
 8005fce:	1855      	adds	r5, r2, r1
 8005fd0:	42a5      	cmp	r5, r4
 8005fd2:	d10b      	bne.n	8005fec <_free_r+0x70>
 8005fd4:	6824      	ldr	r4, [r4, #0]
 8005fd6:	4421      	add	r1, r4
 8005fd8:	1854      	adds	r4, r2, r1
 8005fda:	42a3      	cmp	r3, r4
 8005fdc:	6011      	str	r1, [r2, #0]
 8005fde:	d1e0      	bne.n	8005fa2 <_free_r+0x26>
 8005fe0:	681c      	ldr	r4, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	6053      	str	r3, [r2, #4]
 8005fe6:	440c      	add	r4, r1
 8005fe8:	6014      	str	r4, [r2, #0]
 8005fea:	e7da      	b.n	8005fa2 <_free_r+0x26>
 8005fec:	d902      	bls.n	8005ff4 <_free_r+0x78>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	6003      	str	r3, [r0, #0]
 8005ff2:	e7d6      	b.n	8005fa2 <_free_r+0x26>
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1961      	adds	r1, r4, r5
 8005ff8:	428b      	cmp	r3, r1
 8005ffa:	bf04      	itt	eq
 8005ffc:	6819      	ldreq	r1, [r3, #0]
 8005ffe:	685b      	ldreq	r3, [r3, #4]
 8006000:	6063      	str	r3, [r4, #4]
 8006002:	bf04      	itt	eq
 8006004:	1949      	addeq	r1, r1, r5
 8006006:	6021      	streq	r1, [r4, #0]
 8006008:	6054      	str	r4, [r2, #4]
 800600a:	e7ca      	b.n	8005fa2 <_free_r+0x26>
 800600c:	b003      	add	sp, #12
 800600e:	bd30      	pop	{r4, r5, pc}
 8006010:	20000410 	.word	0x20000410

08006014 <malloc>:
 8006014:	4b02      	ldr	r3, [pc, #8]	; (8006020 <malloc+0xc>)
 8006016:	4601      	mov	r1, r0
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	f000 b823 	b.w	8006064 <_malloc_r>
 800601e:	bf00      	nop
 8006020:	20000068 	.word	0x20000068

08006024 <sbrk_aligned>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4e0e      	ldr	r6, [pc, #56]	; (8006060 <sbrk_aligned+0x3c>)
 8006028:	460c      	mov	r4, r1
 800602a:	6831      	ldr	r1, [r6, #0]
 800602c:	4605      	mov	r5, r0
 800602e:	b911      	cbnz	r1, 8006036 <sbrk_aligned+0x12>
 8006030:	f000 fcce 	bl	80069d0 <_sbrk_r>
 8006034:	6030      	str	r0, [r6, #0]
 8006036:	4621      	mov	r1, r4
 8006038:	4628      	mov	r0, r5
 800603a:	f000 fcc9 	bl	80069d0 <_sbrk_r>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d00a      	beq.n	8006058 <sbrk_aligned+0x34>
 8006042:	1cc4      	adds	r4, r0, #3
 8006044:	f024 0403 	bic.w	r4, r4, #3
 8006048:	42a0      	cmp	r0, r4
 800604a:	d007      	beq.n	800605c <sbrk_aligned+0x38>
 800604c:	1a21      	subs	r1, r4, r0
 800604e:	4628      	mov	r0, r5
 8006050:	f000 fcbe 	bl	80069d0 <_sbrk_r>
 8006054:	3001      	adds	r0, #1
 8006056:	d101      	bne.n	800605c <sbrk_aligned+0x38>
 8006058:	f04f 34ff 	mov.w	r4, #4294967295
 800605c:	4620      	mov	r0, r4
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	20000414 	.word	0x20000414

08006064 <_malloc_r>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	1ccd      	adds	r5, r1, #3
 800606a:	f025 0503 	bic.w	r5, r5, #3
 800606e:	3508      	adds	r5, #8
 8006070:	2d0c      	cmp	r5, #12
 8006072:	bf38      	it	cc
 8006074:	250c      	movcc	r5, #12
 8006076:	2d00      	cmp	r5, #0
 8006078:	4607      	mov	r7, r0
 800607a:	db01      	blt.n	8006080 <_malloc_r+0x1c>
 800607c:	42a9      	cmp	r1, r5
 800607e:	d905      	bls.n	800608c <_malloc_r+0x28>
 8006080:	230c      	movs	r3, #12
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	2600      	movs	r6, #0
 8006086:	4630      	mov	r0, r6
 8006088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800608c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006160 <_malloc_r+0xfc>
 8006090:	f000 f868 	bl	8006164 <__malloc_lock>
 8006094:	f8d8 3000 	ldr.w	r3, [r8]
 8006098:	461c      	mov	r4, r3
 800609a:	bb5c      	cbnz	r4, 80060f4 <_malloc_r+0x90>
 800609c:	4629      	mov	r1, r5
 800609e:	4638      	mov	r0, r7
 80060a0:	f7ff ffc0 	bl	8006024 <sbrk_aligned>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	4604      	mov	r4, r0
 80060a8:	d155      	bne.n	8006156 <_malloc_r+0xf2>
 80060aa:	f8d8 4000 	ldr.w	r4, [r8]
 80060ae:	4626      	mov	r6, r4
 80060b0:	2e00      	cmp	r6, #0
 80060b2:	d145      	bne.n	8006140 <_malloc_r+0xdc>
 80060b4:	2c00      	cmp	r4, #0
 80060b6:	d048      	beq.n	800614a <_malloc_r+0xe6>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	4631      	mov	r1, r6
 80060bc:	4638      	mov	r0, r7
 80060be:	eb04 0903 	add.w	r9, r4, r3
 80060c2:	f000 fc85 	bl	80069d0 <_sbrk_r>
 80060c6:	4581      	cmp	r9, r0
 80060c8:	d13f      	bne.n	800614a <_malloc_r+0xe6>
 80060ca:	6821      	ldr	r1, [r4, #0]
 80060cc:	1a6d      	subs	r5, r5, r1
 80060ce:	4629      	mov	r1, r5
 80060d0:	4638      	mov	r0, r7
 80060d2:	f7ff ffa7 	bl	8006024 <sbrk_aligned>
 80060d6:	3001      	adds	r0, #1
 80060d8:	d037      	beq.n	800614a <_malloc_r+0xe6>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	442b      	add	r3, r5
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	f8d8 3000 	ldr.w	r3, [r8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d038      	beq.n	800615a <_malloc_r+0xf6>
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	42a2      	cmp	r2, r4
 80060ec:	d12b      	bne.n	8006146 <_malloc_r+0xe2>
 80060ee:	2200      	movs	r2, #0
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	e00f      	b.n	8006114 <_malloc_r+0xb0>
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	1b52      	subs	r2, r2, r5
 80060f8:	d41f      	bmi.n	800613a <_malloc_r+0xd6>
 80060fa:	2a0b      	cmp	r2, #11
 80060fc:	d917      	bls.n	800612e <_malloc_r+0xca>
 80060fe:	1961      	adds	r1, r4, r5
 8006100:	42a3      	cmp	r3, r4
 8006102:	6025      	str	r5, [r4, #0]
 8006104:	bf18      	it	ne
 8006106:	6059      	strne	r1, [r3, #4]
 8006108:	6863      	ldr	r3, [r4, #4]
 800610a:	bf08      	it	eq
 800610c:	f8c8 1000 	streq.w	r1, [r8]
 8006110:	5162      	str	r2, [r4, r5]
 8006112:	604b      	str	r3, [r1, #4]
 8006114:	4638      	mov	r0, r7
 8006116:	f104 060b 	add.w	r6, r4, #11
 800611a:	f000 f829 	bl	8006170 <__malloc_unlock>
 800611e:	f026 0607 	bic.w	r6, r6, #7
 8006122:	1d23      	adds	r3, r4, #4
 8006124:	1af2      	subs	r2, r6, r3
 8006126:	d0ae      	beq.n	8006086 <_malloc_r+0x22>
 8006128:	1b9b      	subs	r3, r3, r6
 800612a:	50a3      	str	r3, [r4, r2]
 800612c:	e7ab      	b.n	8006086 <_malloc_r+0x22>
 800612e:	42a3      	cmp	r3, r4
 8006130:	6862      	ldr	r2, [r4, #4]
 8006132:	d1dd      	bne.n	80060f0 <_malloc_r+0x8c>
 8006134:	f8c8 2000 	str.w	r2, [r8]
 8006138:	e7ec      	b.n	8006114 <_malloc_r+0xb0>
 800613a:	4623      	mov	r3, r4
 800613c:	6864      	ldr	r4, [r4, #4]
 800613e:	e7ac      	b.n	800609a <_malloc_r+0x36>
 8006140:	4634      	mov	r4, r6
 8006142:	6876      	ldr	r6, [r6, #4]
 8006144:	e7b4      	b.n	80060b0 <_malloc_r+0x4c>
 8006146:	4613      	mov	r3, r2
 8006148:	e7cc      	b.n	80060e4 <_malloc_r+0x80>
 800614a:	230c      	movs	r3, #12
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	4638      	mov	r0, r7
 8006150:	f000 f80e 	bl	8006170 <__malloc_unlock>
 8006154:	e797      	b.n	8006086 <_malloc_r+0x22>
 8006156:	6025      	str	r5, [r4, #0]
 8006158:	e7dc      	b.n	8006114 <_malloc_r+0xb0>
 800615a:	605b      	str	r3, [r3, #4]
 800615c:	deff      	udf	#255	; 0xff
 800615e:	bf00      	nop
 8006160:	20000410 	.word	0x20000410

08006164 <__malloc_lock>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__malloc_lock+0x8>)
 8006166:	f7ff b88c 	b.w	8005282 <__retarget_lock_acquire_recursive>
 800616a:	bf00      	nop
 800616c:	2000040c 	.word	0x2000040c

08006170 <__malloc_unlock>:
 8006170:	4801      	ldr	r0, [pc, #4]	; (8006178 <__malloc_unlock+0x8>)
 8006172:	f7ff b887 	b.w	8005284 <__retarget_lock_release_recursive>
 8006176:	bf00      	nop
 8006178:	2000040c 	.word	0x2000040c

0800617c <_Balloc>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	69c6      	ldr	r6, [r0, #28]
 8006180:	4604      	mov	r4, r0
 8006182:	460d      	mov	r5, r1
 8006184:	b976      	cbnz	r6, 80061a4 <_Balloc+0x28>
 8006186:	2010      	movs	r0, #16
 8006188:	f7ff ff44 	bl	8006014 <malloc>
 800618c:	4602      	mov	r2, r0
 800618e:	61e0      	str	r0, [r4, #28]
 8006190:	b920      	cbnz	r0, 800619c <_Balloc+0x20>
 8006192:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <_Balloc+0x78>)
 8006194:	4818      	ldr	r0, [pc, #96]	; (80061f8 <_Balloc+0x7c>)
 8006196:	216b      	movs	r1, #107	; 0x6b
 8006198:	f000 fc38 	bl	8006a0c <__assert_func>
 800619c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061a0:	6006      	str	r6, [r0, #0]
 80061a2:	60c6      	str	r6, [r0, #12]
 80061a4:	69e6      	ldr	r6, [r4, #28]
 80061a6:	68f3      	ldr	r3, [r6, #12]
 80061a8:	b183      	cbz	r3, 80061cc <_Balloc+0x50>
 80061aa:	69e3      	ldr	r3, [r4, #28]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061b2:	b9b8      	cbnz	r0, 80061e4 <_Balloc+0x68>
 80061b4:	2101      	movs	r1, #1
 80061b6:	fa01 f605 	lsl.w	r6, r1, r5
 80061ba:	1d72      	adds	r2, r6, #5
 80061bc:	0092      	lsls	r2, r2, #2
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 fc42 	bl	8006a48 <_calloc_r>
 80061c4:	b160      	cbz	r0, 80061e0 <_Balloc+0x64>
 80061c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061ca:	e00e      	b.n	80061ea <_Balloc+0x6e>
 80061cc:	2221      	movs	r2, #33	; 0x21
 80061ce:	2104      	movs	r1, #4
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fc39 	bl	8006a48 <_calloc_r>
 80061d6:	69e3      	ldr	r3, [r4, #28]
 80061d8:	60f0      	str	r0, [r6, #12]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e4      	bne.n	80061aa <_Balloc+0x2e>
 80061e0:	2000      	movs	r0, #0
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	6802      	ldr	r2, [r0, #0]
 80061e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061ea:	2300      	movs	r3, #0
 80061ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061f0:	e7f7      	b.n	80061e2 <_Balloc+0x66>
 80061f2:	bf00      	nop
 80061f4:	08007099 	.word	0x08007099
 80061f8:	08007119 	.word	0x08007119

080061fc <_Bfree>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	69c6      	ldr	r6, [r0, #28]
 8006200:	4605      	mov	r5, r0
 8006202:	460c      	mov	r4, r1
 8006204:	b976      	cbnz	r6, 8006224 <_Bfree+0x28>
 8006206:	2010      	movs	r0, #16
 8006208:	f7ff ff04 	bl	8006014 <malloc>
 800620c:	4602      	mov	r2, r0
 800620e:	61e8      	str	r0, [r5, #28]
 8006210:	b920      	cbnz	r0, 800621c <_Bfree+0x20>
 8006212:	4b09      	ldr	r3, [pc, #36]	; (8006238 <_Bfree+0x3c>)
 8006214:	4809      	ldr	r0, [pc, #36]	; (800623c <_Bfree+0x40>)
 8006216:	218f      	movs	r1, #143	; 0x8f
 8006218:	f000 fbf8 	bl	8006a0c <__assert_func>
 800621c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006220:	6006      	str	r6, [r0, #0]
 8006222:	60c6      	str	r6, [r0, #12]
 8006224:	b13c      	cbz	r4, 8006236 <_Bfree+0x3a>
 8006226:	69eb      	ldr	r3, [r5, #28]
 8006228:	6862      	ldr	r2, [r4, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006230:	6021      	str	r1, [r4, #0]
 8006232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	08007099 	.word	0x08007099
 800623c:	08007119 	.word	0x08007119

08006240 <__multadd>:
 8006240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006244:	690d      	ldr	r5, [r1, #16]
 8006246:	4607      	mov	r7, r0
 8006248:	460c      	mov	r4, r1
 800624a:	461e      	mov	r6, r3
 800624c:	f101 0c14 	add.w	ip, r1, #20
 8006250:	2000      	movs	r0, #0
 8006252:	f8dc 3000 	ldr.w	r3, [ip]
 8006256:	b299      	uxth	r1, r3
 8006258:	fb02 6101 	mla	r1, r2, r1, r6
 800625c:	0c1e      	lsrs	r6, r3, #16
 800625e:	0c0b      	lsrs	r3, r1, #16
 8006260:	fb02 3306 	mla	r3, r2, r6, r3
 8006264:	b289      	uxth	r1, r1
 8006266:	3001      	adds	r0, #1
 8006268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800626c:	4285      	cmp	r5, r0
 800626e:	f84c 1b04 	str.w	r1, [ip], #4
 8006272:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006276:	dcec      	bgt.n	8006252 <__multadd+0x12>
 8006278:	b30e      	cbz	r6, 80062be <__multadd+0x7e>
 800627a:	68a3      	ldr	r3, [r4, #8]
 800627c:	42ab      	cmp	r3, r5
 800627e:	dc19      	bgt.n	80062b4 <__multadd+0x74>
 8006280:	6861      	ldr	r1, [r4, #4]
 8006282:	4638      	mov	r0, r7
 8006284:	3101      	adds	r1, #1
 8006286:	f7ff ff79 	bl	800617c <_Balloc>
 800628a:	4680      	mov	r8, r0
 800628c:	b928      	cbnz	r0, 800629a <__multadd+0x5a>
 800628e:	4602      	mov	r2, r0
 8006290:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <__multadd+0x84>)
 8006292:	480d      	ldr	r0, [pc, #52]	; (80062c8 <__multadd+0x88>)
 8006294:	21ba      	movs	r1, #186	; 0xba
 8006296:	f000 fbb9 	bl	8006a0c <__assert_func>
 800629a:	6922      	ldr	r2, [r4, #16]
 800629c:	3202      	adds	r2, #2
 800629e:	f104 010c 	add.w	r1, r4, #12
 80062a2:	0092      	lsls	r2, r2, #2
 80062a4:	300c      	adds	r0, #12
 80062a6:	f000 fba3 	bl	80069f0 <memcpy>
 80062aa:	4621      	mov	r1, r4
 80062ac:	4638      	mov	r0, r7
 80062ae:	f7ff ffa5 	bl	80061fc <_Bfree>
 80062b2:	4644      	mov	r4, r8
 80062b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062b8:	3501      	adds	r5, #1
 80062ba:	615e      	str	r6, [r3, #20]
 80062bc:	6125      	str	r5, [r4, #16]
 80062be:	4620      	mov	r0, r4
 80062c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c4:	08007108 	.word	0x08007108
 80062c8:	08007119 	.word	0x08007119

080062cc <__hi0bits>:
 80062cc:	0c03      	lsrs	r3, r0, #16
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	b9d3      	cbnz	r3, 8006308 <__hi0bits+0x3c>
 80062d2:	0400      	lsls	r0, r0, #16
 80062d4:	2310      	movs	r3, #16
 80062d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80062da:	bf04      	itt	eq
 80062dc:	0200      	lsleq	r0, r0, #8
 80062de:	3308      	addeq	r3, #8
 80062e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80062e4:	bf04      	itt	eq
 80062e6:	0100      	lsleq	r0, r0, #4
 80062e8:	3304      	addeq	r3, #4
 80062ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80062ee:	bf04      	itt	eq
 80062f0:	0080      	lsleq	r0, r0, #2
 80062f2:	3302      	addeq	r3, #2
 80062f4:	2800      	cmp	r0, #0
 80062f6:	db05      	blt.n	8006304 <__hi0bits+0x38>
 80062f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80062fc:	f103 0301 	add.w	r3, r3, #1
 8006300:	bf08      	it	eq
 8006302:	2320      	moveq	r3, #32
 8006304:	4618      	mov	r0, r3
 8006306:	4770      	bx	lr
 8006308:	2300      	movs	r3, #0
 800630a:	e7e4      	b.n	80062d6 <__hi0bits+0xa>

0800630c <__lo0bits>:
 800630c:	6803      	ldr	r3, [r0, #0]
 800630e:	f013 0207 	ands.w	r2, r3, #7
 8006312:	d00c      	beq.n	800632e <__lo0bits+0x22>
 8006314:	07d9      	lsls	r1, r3, #31
 8006316:	d422      	bmi.n	800635e <__lo0bits+0x52>
 8006318:	079a      	lsls	r2, r3, #30
 800631a:	bf49      	itett	mi
 800631c:	085b      	lsrmi	r3, r3, #1
 800631e:	089b      	lsrpl	r3, r3, #2
 8006320:	6003      	strmi	r3, [r0, #0]
 8006322:	2201      	movmi	r2, #1
 8006324:	bf5c      	itt	pl
 8006326:	6003      	strpl	r3, [r0, #0]
 8006328:	2202      	movpl	r2, #2
 800632a:	4610      	mov	r0, r2
 800632c:	4770      	bx	lr
 800632e:	b299      	uxth	r1, r3
 8006330:	b909      	cbnz	r1, 8006336 <__lo0bits+0x2a>
 8006332:	0c1b      	lsrs	r3, r3, #16
 8006334:	2210      	movs	r2, #16
 8006336:	b2d9      	uxtb	r1, r3
 8006338:	b909      	cbnz	r1, 800633e <__lo0bits+0x32>
 800633a:	3208      	adds	r2, #8
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	0719      	lsls	r1, r3, #28
 8006340:	bf04      	itt	eq
 8006342:	091b      	lsreq	r3, r3, #4
 8006344:	3204      	addeq	r2, #4
 8006346:	0799      	lsls	r1, r3, #30
 8006348:	bf04      	itt	eq
 800634a:	089b      	lsreq	r3, r3, #2
 800634c:	3202      	addeq	r2, #2
 800634e:	07d9      	lsls	r1, r3, #31
 8006350:	d403      	bmi.n	800635a <__lo0bits+0x4e>
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	f102 0201 	add.w	r2, r2, #1
 8006358:	d003      	beq.n	8006362 <__lo0bits+0x56>
 800635a:	6003      	str	r3, [r0, #0]
 800635c:	e7e5      	b.n	800632a <__lo0bits+0x1e>
 800635e:	2200      	movs	r2, #0
 8006360:	e7e3      	b.n	800632a <__lo0bits+0x1e>
 8006362:	2220      	movs	r2, #32
 8006364:	e7e1      	b.n	800632a <__lo0bits+0x1e>
	...

08006368 <__i2b>:
 8006368:	b510      	push	{r4, lr}
 800636a:	460c      	mov	r4, r1
 800636c:	2101      	movs	r1, #1
 800636e:	f7ff ff05 	bl	800617c <_Balloc>
 8006372:	4602      	mov	r2, r0
 8006374:	b928      	cbnz	r0, 8006382 <__i2b+0x1a>
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <__i2b+0x24>)
 8006378:	4805      	ldr	r0, [pc, #20]	; (8006390 <__i2b+0x28>)
 800637a:	f240 1145 	movw	r1, #325	; 0x145
 800637e:	f000 fb45 	bl	8006a0c <__assert_func>
 8006382:	2301      	movs	r3, #1
 8006384:	6144      	str	r4, [r0, #20]
 8006386:	6103      	str	r3, [r0, #16]
 8006388:	bd10      	pop	{r4, pc}
 800638a:	bf00      	nop
 800638c:	08007108 	.word	0x08007108
 8006390:	08007119 	.word	0x08007119

08006394 <__multiply>:
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	4691      	mov	r9, r2
 800639a:	690a      	ldr	r2, [r1, #16]
 800639c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	bfb8      	it	lt
 80063a4:	460b      	movlt	r3, r1
 80063a6:	460c      	mov	r4, r1
 80063a8:	bfbc      	itt	lt
 80063aa:	464c      	movlt	r4, r9
 80063ac:	4699      	movlt	r9, r3
 80063ae:	6927      	ldr	r7, [r4, #16]
 80063b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063b4:	68a3      	ldr	r3, [r4, #8]
 80063b6:	6861      	ldr	r1, [r4, #4]
 80063b8:	eb07 060a 	add.w	r6, r7, sl
 80063bc:	42b3      	cmp	r3, r6
 80063be:	b085      	sub	sp, #20
 80063c0:	bfb8      	it	lt
 80063c2:	3101      	addlt	r1, #1
 80063c4:	f7ff feda 	bl	800617c <_Balloc>
 80063c8:	b930      	cbnz	r0, 80063d8 <__multiply+0x44>
 80063ca:	4602      	mov	r2, r0
 80063cc:	4b44      	ldr	r3, [pc, #272]	; (80064e0 <__multiply+0x14c>)
 80063ce:	4845      	ldr	r0, [pc, #276]	; (80064e4 <__multiply+0x150>)
 80063d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80063d4:	f000 fb1a 	bl	8006a0c <__assert_func>
 80063d8:	f100 0514 	add.w	r5, r0, #20
 80063dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063e0:	462b      	mov	r3, r5
 80063e2:	2200      	movs	r2, #0
 80063e4:	4543      	cmp	r3, r8
 80063e6:	d321      	bcc.n	800642c <__multiply+0x98>
 80063e8:	f104 0314 	add.w	r3, r4, #20
 80063ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80063f0:	f109 0314 	add.w	r3, r9, #20
 80063f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80063f8:	9202      	str	r2, [sp, #8]
 80063fa:	1b3a      	subs	r2, r7, r4
 80063fc:	3a15      	subs	r2, #21
 80063fe:	f022 0203 	bic.w	r2, r2, #3
 8006402:	3204      	adds	r2, #4
 8006404:	f104 0115 	add.w	r1, r4, #21
 8006408:	428f      	cmp	r7, r1
 800640a:	bf38      	it	cc
 800640c:	2204      	movcc	r2, #4
 800640e:	9201      	str	r2, [sp, #4]
 8006410:	9a02      	ldr	r2, [sp, #8]
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	429a      	cmp	r2, r3
 8006416:	d80c      	bhi.n	8006432 <__multiply+0x9e>
 8006418:	2e00      	cmp	r6, #0
 800641a:	dd03      	ble.n	8006424 <__multiply+0x90>
 800641c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05b      	beq.n	80064dc <__multiply+0x148>
 8006424:	6106      	str	r6, [r0, #16]
 8006426:	b005      	add	sp, #20
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	f843 2b04 	str.w	r2, [r3], #4
 8006430:	e7d8      	b.n	80063e4 <__multiply+0x50>
 8006432:	f8b3 a000 	ldrh.w	sl, [r3]
 8006436:	f1ba 0f00 	cmp.w	sl, #0
 800643a:	d024      	beq.n	8006486 <__multiply+0xf2>
 800643c:	f104 0e14 	add.w	lr, r4, #20
 8006440:	46a9      	mov	r9, r5
 8006442:	f04f 0c00 	mov.w	ip, #0
 8006446:	f85e 2b04 	ldr.w	r2, [lr], #4
 800644a:	f8d9 1000 	ldr.w	r1, [r9]
 800644e:	fa1f fb82 	uxth.w	fp, r2
 8006452:	b289      	uxth	r1, r1
 8006454:	fb0a 110b 	mla	r1, sl, fp, r1
 8006458:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800645c:	f8d9 2000 	ldr.w	r2, [r9]
 8006460:	4461      	add	r1, ip
 8006462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006466:	fb0a c20b 	mla	r2, sl, fp, ip
 800646a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800646e:	b289      	uxth	r1, r1
 8006470:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006474:	4577      	cmp	r7, lr
 8006476:	f849 1b04 	str.w	r1, [r9], #4
 800647a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800647e:	d8e2      	bhi.n	8006446 <__multiply+0xb2>
 8006480:	9a01      	ldr	r2, [sp, #4]
 8006482:	f845 c002 	str.w	ip, [r5, r2]
 8006486:	9a03      	ldr	r2, [sp, #12]
 8006488:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800648c:	3304      	adds	r3, #4
 800648e:	f1b9 0f00 	cmp.w	r9, #0
 8006492:	d021      	beq.n	80064d8 <__multiply+0x144>
 8006494:	6829      	ldr	r1, [r5, #0]
 8006496:	f104 0c14 	add.w	ip, r4, #20
 800649a:	46ae      	mov	lr, r5
 800649c:	f04f 0a00 	mov.w	sl, #0
 80064a0:	f8bc b000 	ldrh.w	fp, [ip]
 80064a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80064a8:	fb09 220b 	mla	r2, r9, fp, r2
 80064ac:	4452      	add	r2, sl
 80064ae:	b289      	uxth	r1, r1
 80064b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80064b4:	f84e 1b04 	str.w	r1, [lr], #4
 80064b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80064bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064c0:	f8be 1000 	ldrh.w	r1, [lr]
 80064c4:	fb09 110a 	mla	r1, r9, sl, r1
 80064c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80064cc:	4567      	cmp	r7, ip
 80064ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064d2:	d8e5      	bhi.n	80064a0 <__multiply+0x10c>
 80064d4:	9a01      	ldr	r2, [sp, #4]
 80064d6:	50a9      	str	r1, [r5, r2]
 80064d8:	3504      	adds	r5, #4
 80064da:	e799      	b.n	8006410 <__multiply+0x7c>
 80064dc:	3e01      	subs	r6, #1
 80064de:	e79b      	b.n	8006418 <__multiply+0x84>
 80064e0:	08007108 	.word	0x08007108
 80064e4:	08007119 	.word	0x08007119

080064e8 <__pow5mult>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	4615      	mov	r5, r2
 80064ee:	f012 0203 	ands.w	r2, r2, #3
 80064f2:	4606      	mov	r6, r0
 80064f4:	460f      	mov	r7, r1
 80064f6:	d007      	beq.n	8006508 <__pow5mult+0x20>
 80064f8:	4c25      	ldr	r4, [pc, #148]	; (8006590 <__pow5mult+0xa8>)
 80064fa:	3a01      	subs	r2, #1
 80064fc:	2300      	movs	r3, #0
 80064fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006502:	f7ff fe9d 	bl	8006240 <__multadd>
 8006506:	4607      	mov	r7, r0
 8006508:	10ad      	asrs	r5, r5, #2
 800650a:	d03d      	beq.n	8006588 <__pow5mult+0xa0>
 800650c:	69f4      	ldr	r4, [r6, #28]
 800650e:	b97c      	cbnz	r4, 8006530 <__pow5mult+0x48>
 8006510:	2010      	movs	r0, #16
 8006512:	f7ff fd7f 	bl	8006014 <malloc>
 8006516:	4602      	mov	r2, r0
 8006518:	61f0      	str	r0, [r6, #28]
 800651a:	b928      	cbnz	r0, 8006528 <__pow5mult+0x40>
 800651c:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <__pow5mult+0xac>)
 800651e:	481e      	ldr	r0, [pc, #120]	; (8006598 <__pow5mult+0xb0>)
 8006520:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006524:	f000 fa72 	bl	8006a0c <__assert_func>
 8006528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800652c:	6004      	str	r4, [r0, #0]
 800652e:	60c4      	str	r4, [r0, #12]
 8006530:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006538:	b94c      	cbnz	r4, 800654e <__pow5mult+0x66>
 800653a:	f240 2171 	movw	r1, #625	; 0x271
 800653e:	4630      	mov	r0, r6
 8006540:	f7ff ff12 	bl	8006368 <__i2b>
 8006544:	2300      	movs	r3, #0
 8006546:	f8c8 0008 	str.w	r0, [r8, #8]
 800654a:	4604      	mov	r4, r0
 800654c:	6003      	str	r3, [r0, #0]
 800654e:	f04f 0900 	mov.w	r9, #0
 8006552:	07eb      	lsls	r3, r5, #31
 8006554:	d50a      	bpl.n	800656c <__pow5mult+0x84>
 8006556:	4639      	mov	r1, r7
 8006558:	4622      	mov	r2, r4
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff ff1a 	bl	8006394 <__multiply>
 8006560:	4639      	mov	r1, r7
 8006562:	4680      	mov	r8, r0
 8006564:	4630      	mov	r0, r6
 8006566:	f7ff fe49 	bl	80061fc <_Bfree>
 800656a:	4647      	mov	r7, r8
 800656c:	106d      	asrs	r5, r5, #1
 800656e:	d00b      	beq.n	8006588 <__pow5mult+0xa0>
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	b938      	cbnz	r0, 8006584 <__pow5mult+0x9c>
 8006574:	4622      	mov	r2, r4
 8006576:	4621      	mov	r1, r4
 8006578:	4630      	mov	r0, r6
 800657a:	f7ff ff0b 	bl	8006394 <__multiply>
 800657e:	6020      	str	r0, [r4, #0]
 8006580:	f8c0 9000 	str.w	r9, [r0]
 8006584:	4604      	mov	r4, r0
 8006586:	e7e4      	b.n	8006552 <__pow5mult+0x6a>
 8006588:	4638      	mov	r0, r7
 800658a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658e:	bf00      	nop
 8006590:	08007268 	.word	0x08007268
 8006594:	08007099 	.word	0x08007099
 8006598:	08007119 	.word	0x08007119

0800659c <__lshift>:
 800659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a0:	460c      	mov	r4, r1
 80065a2:	6849      	ldr	r1, [r1, #4]
 80065a4:	6923      	ldr	r3, [r4, #16]
 80065a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	4607      	mov	r7, r0
 80065ae:	4691      	mov	r9, r2
 80065b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065b4:	f108 0601 	add.w	r6, r8, #1
 80065b8:	42b3      	cmp	r3, r6
 80065ba:	db0b      	blt.n	80065d4 <__lshift+0x38>
 80065bc:	4638      	mov	r0, r7
 80065be:	f7ff fddd 	bl	800617c <_Balloc>
 80065c2:	4605      	mov	r5, r0
 80065c4:	b948      	cbnz	r0, 80065da <__lshift+0x3e>
 80065c6:	4602      	mov	r2, r0
 80065c8:	4b28      	ldr	r3, [pc, #160]	; (800666c <__lshift+0xd0>)
 80065ca:	4829      	ldr	r0, [pc, #164]	; (8006670 <__lshift+0xd4>)
 80065cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80065d0:	f000 fa1c 	bl	8006a0c <__assert_func>
 80065d4:	3101      	adds	r1, #1
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	e7ee      	b.n	80065b8 <__lshift+0x1c>
 80065da:	2300      	movs	r3, #0
 80065dc:	f100 0114 	add.w	r1, r0, #20
 80065e0:	f100 0210 	add.w	r2, r0, #16
 80065e4:	4618      	mov	r0, r3
 80065e6:	4553      	cmp	r3, sl
 80065e8:	db33      	blt.n	8006652 <__lshift+0xb6>
 80065ea:	6920      	ldr	r0, [r4, #16]
 80065ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065f0:	f104 0314 	add.w	r3, r4, #20
 80065f4:	f019 091f 	ands.w	r9, r9, #31
 80065f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006600:	d02b      	beq.n	800665a <__lshift+0xbe>
 8006602:	f1c9 0e20 	rsb	lr, r9, #32
 8006606:	468a      	mov	sl, r1
 8006608:	2200      	movs	r2, #0
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	fa00 f009 	lsl.w	r0, r0, r9
 8006610:	4310      	orrs	r0, r2
 8006612:	f84a 0b04 	str.w	r0, [sl], #4
 8006616:	f853 2b04 	ldr.w	r2, [r3], #4
 800661a:	459c      	cmp	ip, r3
 800661c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006620:	d8f3      	bhi.n	800660a <__lshift+0x6e>
 8006622:	ebac 0304 	sub.w	r3, ip, r4
 8006626:	3b15      	subs	r3, #21
 8006628:	f023 0303 	bic.w	r3, r3, #3
 800662c:	3304      	adds	r3, #4
 800662e:	f104 0015 	add.w	r0, r4, #21
 8006632:	4584      	cmp	ip, r0
 8006634:	bf38      	it	cc
 8006636:	2304      	movcc	r3, #4
 8006638:	50ca      	str	r2, [r1, r3]
 800663a:	b10a      	cbz	r2, 8006640 <__lshift+0xa4>
 800663c:	f108 0602 	add.w	r6, r8, #2
 8006640:	3e01      	subs	r6, #1
 8006642:	4638      	mov	r0, r7
 8006644:	612e      	str	r6, [r5, #16]
 8006646:	4621      	mov	r1, r4
 8006648:	f7ff fdd8 	bl	80061fc <_Bfree>
 800664c:	4628      	mov	r0, r5
 800664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006652:	f842 0f04 	str.w	r0, [r2, #4]!
 8006656:	3301      	adds	r3, #1
 8006658:	e7c5      	b.n	80065e6 <__lshift+0x4a>
 800665a:	3904      	subs	r1, #4
 800665c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006660:	f841 2f04 	str.w	r2, [r1, #4]!
 8006664:	459c      	cmp	ip, r3
 8006666:	d8f9      	bhi.n	800665c <__lshift+0xc0>
 8006668:	e7ea      	b.n	8006640 <__lshift+0xa4>
 800666a:	bf00      	nop
 800666c:	08007108 	.word	0x08007108
 8006670:	08007119 	.word	0x08007119

08006674 <__mcmp>:
 8006674:	b530      	push	{r4, r5, lr}
 8006676:	6902      	ldr	r2, [r0, #16]
 8006678:	690c      	ldr	r4, [r1, #16]
 800667a:	1b12      	subs	r2, r2, r4
 800667c:	d10e      	bne.n	800669c <__mcmp+0x28>
 800667e:	f100 0314 	add.w	r3, r0, #20
 8006682:	3114      	adds	r1, #20
 8006684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800668c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006694:	42a5      	cmp	r5, r4
 8006696:	d003      	beq.n	80066a0 <__mcmp+0x2c>
 8006698:	d305      	bcc.n	80066a6 <__mcmp+0x32>
 800669a:	2201      	movs	r2, #1
 800669c:	4610      	mov	r0, r2
 800669e:	bd30      	pop	{r4, r5, pc}
 80066a0:	4283      	cmp	r3, r0
 80066a2:	d3f3      	bcc.n	800668c <__mcmp+0x18>
 80066a4:	e7fa      	b.n	800669c <__mcmp+0x28>
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295
 80066aa:	e7f7      	b.n	800669c <__mcmp+0x28>

080066ac <__mdiff>:
 80066ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	460c      	mov	r4, r1
 80066b2:	4606      	mov	r6, r0
 80066b4:	4611      	mov	r1, r2
 80066b6:	4620      	mov	r0, r4
 80066b8:	4690      	mov	r8, r2
 80066ba:	f7ff ffdb 	bl	8006674 <__mcmp>
 80066be:	1e05      	subs	r5, r0, #0
 80066c0:	d110      	bne.n	80066e4 <__mdiff+0x38>
 80066c2:	4629      	mov	r1, r5
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7ff fd59 	bl	800617c <_Balloc>
 80066ca:	b930      	cbnz	r0, 80066da <__mdiff+0x2e>
 80066cc:	4b3a      	ldr	r3, [pc, #232]	; (80067b8 <__mdiff+0x10c>)
 80066ce:	4602      	mov	r2, r0
 80066d0:	f240 2137 	movw	r1, #567	; 0x237
 80066d4:	4839      	ldr	r0, [pc, #228]	; (80067bc <__mdiff+0x110>)
 80066d6:	f000 f999 	bl	8006a0c <__assert_func>
 80066da:	2301      	movs	r3, #1
 80066dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	bfa4      	itt	ge
 80066e6:	4643      	movge	r3, r8
 80066e8:	46a0      	movge	r8, r4
 80066ea:	4630      	mov	r0, r6
 80066ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80066f0:	bfa6      	itte	ge
 80066f2:	461c      	movge	r4, r3
 80066f4:	2500      	movge	r5, #0
 80066f6:	2501      	movlt	r5, #1
 80066f8:	f7ff fd40 	bl	800617c <_Balloc>
 80066fc:	b920      	cbnz	r0, 8006708 <__mdiff+0x5c>
 80066fe:	4b2e      	ldr	r3, [pc, #184]	; (80067b8 <__mdiff+0x10c>)
 8006700:	4602      	mov	r2, r0
 8006702:	f240 2145 	movw	r1, #581	; 0x245
 8006706:	e7e5      	b.n	80066d4 <__mdiff+0x28>
 8006708:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800670c:	6926      	ldr	r6, [r4, #16]
 800670e:	60c5      	str	r5, [r0, #12]
 8006710:	f104 0914 	add.w	r9, r4, #20
 8006714:	f108 0514 	add.w	r5, r8, #20
 8006718:	f100 0e14 	add.w	lr, r0, #20
 800671c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006720:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006724:	f108 0210 	add.w	r2, r8, #16
 8006728:	46f2      	mov	sl, lr
 800672a:	2100      	movs	r1, #0
 800672c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006730:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006734:	fa11 f88b 	uxtah	r8, r1, fp
 8006738:	b299      	uxth	r1, r3
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	eba8 0801 	sub.w	r8, r8, r1
 8006740:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006744:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006748:	fa1f f888 	uxth.w	r8, r8
 800674c:	1419      	asrs	r1, r3, #16
 800674e:	454e      	cmp	r6, r9
 8006750:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006754:	f84a 3b04 	str.w	r3, [sl], #4
 8006758:	d8e8      	bhi.n	800672c <__mdiff+0x80>
 800675a:	1b33      	subs	r3, r6, r4
 800675c:	3b15      	subs	r3, #21
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	3304      	adds	r3, #4
 8006764:	3415      	adds	r4, #21
 8006766:	42a6      	cmp	r6, r4
 8006768:	bf38      	it	cc
 800676a:	2304      	movcc	r3, #4
 800676c:	441d      	add	r5, r3
 800676e:	4473      	add	r3, lr
 8006770:	469e      	mov	lr, r3
 8006772:	462e      	mov	r6, r5
 8006774:	4566      	cmp	r6, ip
 8006776:	d30e      	bcc.n	8006796 <__mdiff+0xea>
 8006778:	f10c 0203 	add.w	r2, ip, #3
 800677c:	1b52      	subs	r2, r2, r5
 800677e:	f022 0203 	bic.w	r2, r2, #3
 8006782:	3d03      	subs	r5, #3
 8006784:	45ac      	cmp	ip, r5
 8006786:	bf38      	it	cc
 8006788:	2200      	movcc	r2, #0
 800678a:	4413      	add	r3, r2
 800678c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006790:	b17a      	cbz	r2, 80067b2 <__mdiff+0x106>
 8006792:	6107      	str	r7, [r0, #16]
 8006794:	e7a4      	b.n	80066e0 <__mdiff+0x34>
 8006796:	f856 8b04 	ldr.w	r8, [r6], #4
 800679a:	fa11 f288 	uxtah	r2, r1, r8
 800679e:	1414      	asrs	r4, r2, #16
 80067a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80067a4:	b292      	uxth	r2, r2
 80067a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80067aa:	f84e 2b04 	str.w	r2, [lr], #4
 80067ae:	1421      	asrs	r1, r4, #16
 80067b0:	e7e0      	b.n	8006774 <__mdiff+0xc8>
 80067b2:	3f01      	subs	r7, #1
 80067b4:	e7ea      	b.n	800678c <__mdiff+0xe0>
 80067b6:	bf00      	nop
 80067b8:	08007108 	.word	0x08007108
 80067bc:	08007119 	.word	0x08007119

080067c0 <__d2b>:
 80067c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067c4:	460f      	mov	r7, r1
 80067c6:	2101      	movs	r1, #1
 80067c8:	ec59 8b10 	vmov	r8, r9, d0
 80067cc:	4616      	mov	r6, r2
 80067ce:	f7ff fcd5 	bl	800617c <_Balloc>
 80067d2:	4604      	mov	r4, r0
 80067d4:	b930      	cbnz	r0, 80067e4 <__d2b+0x24>
 80067d6:	4602      	mov	r2, r0
 80067d8:	4b24      	ldr	r3, [pc, #144]	; (800686c <__d2b+0xac>)
 80067da:	4825      	ldr	r0, [pc, #148]	; (8006870 <__d2b+0xb0>)
 80067dc:	f240 310f 	movw	r1, #783	; 0x30f
 80067e0:	f000 f914 	bl	8006a0c <__assert_func>
 80067e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067ec:	bb2d      	cbnz	r5, 800683a <__d2b+0x7a>
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	f1b8 0300 	subs.w	r3, r8, #0
 80067f4:	d026      	beq.n	8006844 <__d2b+0x84>
 80067f6:	4668      	mov	r0, sp
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	f7ff fd87 	bl	800630c <__lo0bits>
 80067fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006802:	b1e8      	cbz	r0, 8006840 <__d2b+0x80>
 8006804:	f1c0 0320 	rsb	r3, r0, #32
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	430b      	orrs	r3, r1
 800680e:	40c2      	lsrs	r2, r0
 8006810:	6163      	str	r3, [r4, #20]
 8006812:	9201      	str	r2, [sp, #4]
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	61a3      	str	r3, [r4, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf14      	ite	ne
 800681c:	2202      	movne	r2, #2
 800681e:	2201      	moveq	r2, #1
 8006820:	6122      	str	r2, [r4, #16]
 8006822:	b1bd      	cbz	r5, 8006854 <__d2b+0x94>
 8006824:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006828:	4405      	add	r5, r0
 800682a:	603d      	str	r5, [r7, #0]
 800682c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006830:	6030      	str	r0, [r6, #0]
 8006832:	4620      	mov	r0, r4
 8006834:	b003      	add	sp, #12
 8006836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800683a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800683e:	e7d6      	b.n	80067ee <__d2b+0x2e>
 8006840:	6161      	str	r1, [r4, #20]
 8006842:	e7e7      	b.n	8006814 <__d2b+0x54>
 8006844:	a801      	add	r0, sp, #4
 8006846:	f7ff fd61 	bl	800630c <__lo0bits>
 800684a:	9b01      	ldr	r3, [sp, #4]
 800684c:	6163      	str	r3, [r4, #20]
 800684e:	3020      	adds	r0, #32
 8006850:	2201      	movs	r2, #1
 8006852:	e7e5      	b.n	8006820 <__d2b+0x60>
 8006854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800685c:	6038      	str	r0, [r7, #0]
 800685e:	6918      	ldr	r0, [r3, #16]
 8006860:	f7ff fd34 	bl	80062cc <__hi0bits>
 8006864:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006868:	e7e2      	b.n	8006830 <__d2b+0x70>
 800686a:	bf00      	nop
 800686c:	08007108 	.word	0x08007108
 8006870:	08007119 	.word	0x08007119

08006874 <__sflush_r>:
 8006874:	898a      	ldrh	r2, [r1, #12]
 8006876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687a:	4605      	mov	r5, r0
 800687c:	0710      	lsls	r0, r2, #28
 800687e:	460c      	mov	r4, r1
 8006880:	d458      	bmi.n	8006934 <__sflush_r+0xc0>
 8006882:	684b      	ldr	r3, [r1, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	dc05      	bgt.n	8006894 <__sflush_r+0x20>
 8006888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800688a:	2b00      	cmp	r3, #0
 800688c:	dc02      	bgt.n	8006894 <__sflush_r+0x20>
 800688e:	2000      	movs	r0, #0
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006896:	2e00      	cmp	r6, #0
 8006898:	d0f9      	beq.n	800688e <__sflush_r+0x1a>
 800689a:	2300      	movs	r3, #0
 800689c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068a0:	682f      	ldr	r7, [r5, #0]
 80068a2:	6a21      	ldr	r1, [r4, #32]
 80068a4:	602b      	str	r3, [r5, #0]
 80068a6:	d032      	beq.n	800690e <__sflush_r+0x9a>
 80068a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	075a      	lsls	r2, r3, #29
 80068ae:	d505      	bpl.n	80068bc <__sflush_r+0x48>
 80068b0:	6863      	ldr	r3, [r4, #4]
 80068b2:	1ac0      	subs	r0, r0, r3
 80068b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068b6:	b10b      	cbz	r3, 80068bc <__sflush_r+0x48>
 80068b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068ba:	1ac0      	subs	r0, r0, r3
 80068bc:	2300      	movs	r3, #0
 80068be:	4602      	mov	r2, r0
 80068c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068c2:	6a21      	ldr	r1, [r4, #32]
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b0      	blx	r6
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	d106      	bne.n	80068dc <__sflush_r+0x68>
 80068ce:	6829      	ldr	r1, [r5, #0]
 80068d0:	291d      	cmp	r1, #29
 80068d2:	d82b      	bhi.n	800692c <__sflush_r+0xb8>
 80068d4:	4a29      	ldr	r2, [pc, #164]	; (800697c <__sflush_r+0x108>)
 80068d6:	410a      	asrs	r2, r1
 80068d8:	07d6      	lsls	r6, r2, #31
 80068da:	d427      	bmi.n	800692c <__sflush_r+0xb8>
 80068dc:	2200      	movs	r2, #0
 80068de:	6062      	str	r2, [r4, #4]
 80068e0:	04d9      	lsls	r1, r3, #19
 80068e2:	6922      	ldr	r2, [r4, #16]
 80068e4:	6022      	str	r2, [r4, #0]
 80068e6:	d504      	bpl.n	80068f2 <__sflush_r+0x7e>
 80068e8:	1c42      	adds	r2, r0, #1
 80068ea:	d101      	bne.n	80068f0 <__sflush_r+0x7c>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b903      	cbnz	r3, 80068f2 <__sflush_r+0x7e>
 80068f0:	6560      	str	r0, [r4, #84]	; 0x54
 80068f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f4:	602f      	str	r7, [r5, #0]
 80068f6:	2900      	cmp	r1, #0
 80068f8:	d0c9      	beq.n	800688e <__sflush_r+0x1a>
 80068fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068fe:	4299      	cmp	r1, r3
 8006900:	d002      	beq.n	8006908 <__sflush_r+0x94>
 8006902:	4628      	mov	r0, r5
 8006904:	f7ff fb3a 	bl	8005f7c <_free_r>
 8006908:	2000      	movs	r0, #0
 800690a:	6360      	str	r0, [r4, #52]	; 0x34
 800690c:	e7c0      	b.n	8006890 <__sflush_r+0x1c>
 800690e:	2301      	movs	r3, #1
 8006910:	4628      	mov	r0, r5
 8006912:	47b0      	blx	r6
 8006914:	1c41      	adds	r1, r0, #1
 8006916:	d1c8      	bne.n	80068aa <__sflush_r+0x36>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0c5      	beq.n	80068aa <__sflush_r+0x36>
 800691e:	2b1d      	cmp	r3, #29
 8006920:	d001      	beq.n	8006926 <__sflush_r+0xb2>
 8006922:	2b16      	cmp	r3, #22
 8006924:	d101      	bne.n	800692a <__sflush_r+0xb6>
 8006926:	602f      	str	r7, [r5, #0]
 8006928:	e7b1      	b.n	800688e <__sflush_r+0x1a>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	e7ad      	b.n	8006890 <__sflush_r+0x1c>
 8006934:	690f      	ldr	r7, [r1, #16]
 8006936:	2f00      	cmp	r7, #0
 8006938:	d0a9      	beq.n	800688e <__sflush_r+0x1a>
 800693a:	0793      	lsls	r3, r2, #30
 800693c:	680e      	ldr	r6, [r1, #0]
 800693e:	bf08      	it	eq
 8006940:	694b      	ldreq	r3, [r1, #20]
 8006942:	600f      	str	r7, [r1, #0]
 8006944:	bf18      	it	ne
 8006946:	2300      	movne	r3, #0
 8006948:	eba6 0807 	sub.w	r8, r6, r7
 800694c:	608b      	str	r3, [r1, #8]
 800694e:	f1b8 0f00 	cmp.w	r8, #0
 8006952:	dd9c      	ble.n	800688e <__sflush_r+0x1a>
 8006954:	6a21      	ldr	r1, [r4, #32]
 8006956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006958:	4643      	mov	r3, r8
 800695a:	463a      	mov	r2, r7
 800695c:	4628      	mov	r0, r5
 800695e:	47b0      	blx	r6
 8006960:	2800      	cmp	r0, #0
 8006962:	dc06      	bgt.n	8006972 <__sflush_r+0xfe>
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800696a:	81a3      	strh	r3, [r4, #12]
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	e78e      	b.n	8006890 <__sflush_r+0x1c>
 8006972:	4407      	add	r7, r0
 8006974:	eba8 0800 	sub.w	r8, r8, r0
 8006978:	e7e9      	b.n	800694e <__sflush_r+0xda>
 800697a:	bf00      	nop
 800697c:	dfbffffe 	.word	0xdfbffffe

08006980 <_fflush_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	690b      	ldr	r3, [r1, #16]
 8006984:	4605      	mov	r5, r0
 8006986:	460c      	mov	r4, r1
 8006988:	b913      	cbnz	r3, 8006990 <_fflush_r+0x10>
 800698a:	2500      	movs	r5, #0
 800698c:	4628      	mov	r0, r5
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	b118      	cbz	r0, 800699a <_fflush_r+0x1a>
 8006992:	6a03      	ldr	r3, [r0, #32]
 8006994:	b90b      	cbnz	r3, 800699a <_fflush_r+0x1a>
 8006996:	f7fe fb7d 	bl	8005094 <__sinit>
 800699a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0f3      	beq.n	800698a <_fflush_r+0xa>
 80069a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069a4:	07d0      	lsls	r0, r2, #31
 80069a6:	d404      	bmi.n	80069b2 <_fflush_r+0x32>
 80069a8:	0599      	lsls	r1, r3, #22
 80069aa:	d402      	bmi.n	80069b2 <_fflush_r+0x32>
 80069ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ae:	f7fe fc68 	bl	8005282 <__retarget_lock_acquire_recursive>
 80069b2:	4628      	mov	r0, r5
 80069b4:	4621      	mov	r1, r4
 80069b6:	f7ff ff5d 	bl	8006874 <__sflush_r>
 80069ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069bc:	07da      	lsls	r2, r3, #31
 80069be:	4605      	mov	r5, r0
 80069c0:	d4e4      	bmi.n	800698c <_fflush_r+0xc>
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	059b      	lsls	r3, r3, #22
 80069c6:	d4e1      	bmi.n	800698c <_fflush_r+0xc>
 80069c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ca:	f7fe fc5b 	bl	8005284 <__retarget_lock_release_recursive>
 80069ce:	e7dd      	b.n	800698c <_fflush_r+0xc>

080069d0 <_sbrk_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d06      	ldr	r5, [pc, #24]	; (80069ec <_sbrk_r+0x1c>)
 80069d4:	2300      	movs	r3, #0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fa fec0 	bl	8001760 <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_sbrk_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_sbrk_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20000408 	.word	0x20000408

080069f0 <memcpy>:
 80069f0:	440a      	add	r2, r1
 80069f2:	4291      	cmp	r1, r2
 80069f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069f8:	d100      	bne.n	80069fc <memcpy+0xc>
 80069fa:	4770      	bx	lr
 80069fc:	b510      	push	{r4, lr}
 80069fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a06:	4291      	cmp	r1, r2
 8006a08:	d1f9      	bne.n	80069fe <memcpy+0xe>
 8006a0a:	bd10      	pop	{r4, pc}

08006a0c <__assert_func>:
 8006a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a0e:	4614      	mov	r4, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <__assert_func+0x2c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4605      	mov	r5, r0
 8006a18:	68d8      	ldr	r0, [r3, #12]
 8006a1a:	b14c      	cbz	r4, 8006a30 <__assert_func+0x24>
 8006a1c:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <__assert_func+0x30>)
 8006a1e:	9100      	str	r1, [sp, #0]
 8006a20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a24:	4906      	ldr	r1, [pc, #24]	; (8006a40 <__assert_func+0x34>)
 8006a26:	462b      	mov	r3, r5
 8006a28:	f000 f844 	bl	8006ab4 <fiprintf>
 8006a2c:	f000 f854 	bl	8006ad8 <abort>
 8006a30:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <__assert_func+0x38>)
 8006a32:	461c      	mov	r4, r3
 8006a34:	e7f3      	b.n	8006a1e <__assert_func+0x12>
 8006a36:	bf00      	nop
 8006a38:	20000068 	.word	0x20000068
 8006a3c:	0800727e 	.word	0x0800727e
 8006a40:	0800728b 	.word	0x0800728b
 8006a44:	080072b9 	.word	0x080072b9

08006a48 <_calloc_r>:
 8006a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a4a:	fba1 2402 	umull	r2, r4, r1, r2
 8006a4e:	b94c      	cbnz	r4, 8006a64 <_calloc_r+0x1c>
 8006a50:	4611      	mov	r1, r2
 8006a52:	9201      	str	r2, [sp, #4]
 8006a54:	f7ff fb06 	bl	8006064 <_malloc_r>
 8006a58:	9a01      	ldr	r2, [sp, #4]
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	b930      	cbnz	r0, 8006a6c <_calloc_r+0x24>
 8006a5e:	4628      	mov	r0, r5
 8006a60:	b003      	add	sp, #12
 8006a62:	bd30      	pop	{r4, r5, pc}
 8006a64:	220c      	movs	r2, #12
 8006a66:	6002      	str	r2, [r0, #0]
 8006a68:	2500      	movs	r5, #0
 8006a6a:	e7f8      	b.n	8006a5e <_calloc_r+0x16>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	f7fe fb8a 	bl	8005186 <memset>
 8006a72:	e7f4      	b.n	8006a5e <_calloc_r+0x16>

08006a74 <__ascii_mbtowc>:
 8006a74:	b082      	sub	sp, #8
 8006a76:	b901      	cbnz	r1, 8006a7a <__ascii_mbtowc+0x6>
 8006a78:	a901      	add	r1, sp, #4
 8006a7a:	b142      	cbz	r2, 8006a8e <__ascii_mbtowc+0x1a>
 8006a7c:	b14b      	cbz	r3, 8006a92 <__ascii_mbtowc+0x1e>
 8006a7e:	7813      	ldrb	r3, [r2, #0]
 8006a80:	600b      	str	r3, [r1, #0]
 8006a82:	7812      	ldrb	r2, [r2, #0]
 8006a84:	1e10      	subs	r0, r2, #0
 8006a86:	bf18      	it	ne
 8006a88:	2001      	movne	r0, #1
 8006a8a:	b002      	add	sp, #8
 8006a8c:	4770      	bx	lr
 8006a8e:	4610      	mov	r0, r2
 8006a90:	e7fb      	b.n	8006a8a <__ascii_mbtowc+0x16>
 8006a92:	f06f 0001 	mvn.w	r0, #1
 8006a96:	e7f8      	b.n	8006a8a <__ascii_mbtowc+0x16>

08006a98 <__ascii_wctomb>:
 8006a98:	b149      	cbz	r1, 8006aae <__ascii_wctomb+0x16>
 8006a9a:	2aff      	cmp	r2, #255	; 0xff
 8006a9c:	bf85      	ittet	hi
 8006a9e:	238a      	movhi	r3, #138	; 0x8a
 8006aa0:	6003      	strhi	r3, [r0, #0]
 8006aa2:	700a      	strbls	r2, [r1, #0]
 8006aa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006aa8:	bf98      	it	ls
 8006aaa:	2001      	movls	r0, #1
 8006aac:	4770      	bx	lr
 8006aae:	4608      	mov	r0, r1
 8006ab0:	4770      	bx	lr
	...

08006ab4 <fiprintf>:
 8006ab4:	b40e      	push	{r1, r2, r3}
 8006ab6:	b503      	push	{r0, r1, lr}
 8006ab8:	4601      	mov	r1, r0
 8006aba:	ab03      	add	r3, sp, #12
 8006abc:	4805      	ldr	r0, [pc, #20]	; (8006ad4 <fiprintf+0x20>)
 8006abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac2:	6800      	ldr	r0, [r0, #0]
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	f000 f837 	bl	8006b38 <_vfiprintf_r>
 8006aca:	b002      	add	sp, #8
 8006acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad0:	b003      	add	sp, #12
 8006ad2:	4770      	bx	lr
 8006ad4:	20000068 	.word	0x20000068

08006ad8 <abort>:
 8006ad8:	b508      	push	{r3, lr}
 8006ada:	2006      	movs	r0, #6
 8006adc:	f000 fa04 	bl	8006ee8 <raise>
 8006ae0:	2001      	movs	r0, #1
 8006ae2:	f7fa fdc5 	bl	8001670 <_exit>

08006ae6 <__sfputc_r>:
 8006ae6:	6893      	ldr	r3, [r2, #8]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	b410      	push	{r4}
 8006aee:	6093      	str	r3, [r2, #8]
 8006af0:	da08      	bge.n	8006b04 <__sfputc_r+0x1e>
 8006af2:	6994      	ldr	r4, [r2, #24]
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	db01      	blt.n	8006afc <__sfputc_r+0x16>
 8006af8:	290a      	cmp	r1, #10
 8006afa:	d103      	bne.n	8006b04 <__sfputc_r+0x1e>
 8006afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b00:	f000 b934 	b.w	8006d6c <__swbuf_r>
 8006b04:	6813      	ldr	r3, [r2, #0]
 8006b06:	1c58      	adds	r0, r3, #1
 8006b08:	6010      	str	r0, [r2, #0]
 8006b0a:	7019      	strb	r1, [r3, #0]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <__sfputs_r>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	4606      	mov	r6, r0
 8006b18:	460f      	mov	r7, r1
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	18d5      	adds	r5, r2, r3
 8006b1e:	42ac      	cmp	r4, r5
 8006b20:	d101      	bne.n	8006b26 <__sfputs_r+0x12>
 8006b22:	2000      	movs	r0, #0
 8006b24:	e007      	b.n	8006b36 <__sfputs_r+0x22>
 8006b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b2a:	463a      	mov	r2, r7
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f7ff ffda 	bl	8006ae6 <__sfputc_r>
 8006b32:	1c43      	adds	r3, r0, #1
 8006b34:	d1f3      	bne.n	8006b1e <__sfputs_r+0xa>
 8006b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b38 <_vfiprintf_r>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	b09d      	sub	sp, #116	; 0x74
 8006b40:	4614      	mov	r4, r2
 8006b42:	4698      	mov	r8, r3
 8006b44:	4606      	mov	r6, r0
 8006b46:	b118      	cbz	r0, 8006b50 <_vfiprintf_r+0x18>
 8006b48:	6a03      	ldr	r3, [r0, #32]
 8006b4a:	b90b      	cbnz	r3, 8006b50 <_vfiprintf_r+0x18>
 8006b4c:	f7fe faa2 	bl	8005094 <__sinit>
 8006b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b52:	07d9      	lsls	r1, r3, #31
 8006b54:	d405      	bmi.n	8006b62 <_vfiprintf_r+0x2a>
 8006b56:	89ab      	ldrh	r3, [r5, #12]
 8006b58:	059a      	lsls	r2, r3, #22
 8006b5a:	d402      	bmi.n	8006b62 <_vfiprintf_r+0x2a>
 8006b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b5e:	f7fe fb90 	bl	8005282 <__retarget_lock_acquire_recursive>
 8006b62:	89ab      	ldrh	r3, [r5, #12]
 8006b64:	071b      	lsls	r3, r3, #28
 8006b66:	d501      	bpl.n	8006b6c <_vfiprintf_r+0x34>
 8006b68:	692b      	ldr	r3, [r5, #16]
 8006b6a:	b99b      	cbnz	r3, 8006b94 <_vfiprintf_r+0x5c>
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f000 f93a 	bl	8006de8 <__swsetup_r>
 8006b74:	b170      	cbz	r0, 8006b94 <_vfiprintf_r+0x5c>
 8006b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b78:	07dc      	lsls	r4, r3, #31
 8006b7a:	d504      	bpl.n	8006b86 <_vfiprintf_r+0x4e>
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	b01d      	add	sp, #116	; 0x74
 8006b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	0598      	lsls	r0, r3, #22
 8006b8a:	d4f7      	bmi.n	8006b7c <_vfiprintf_r+0x44>
 8006b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b8e:	f7fe fb79 	bl	8005284 <__retarget_lock_release_recursive>
 8006b92:	e7f3      	b.n	8006b7c <_vfiprintf_r+0x44>
 8006b94:	2300      	movs	r3, #0
 8006b96:	9309      	str	r3, [sp, #36]	; 0x24
 8006b98:	2320      	movs	r3, #32
 8006b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ba2:	2330      	movs	r3, #48	; 0x30
 8006ba4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006d58 <_vfiprintf_r+0x220>
 8006ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bac:	f04f 0901 	mov.w	r9, #1
 8006bb0:	4623      	mov	r3, r4
 8006bb2:	469a      	mov	sl, r3
 8006bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bb8:	b10a      	cbz	r2, 8006bbe <_vfiprintf_r+0x86>
 8006bba:	2a25      	cmp	r2, #37	; 0x25
 8006bbc:	d1f9      	bne.n	8006bb2 <_vfiprintf_r+0x7a>
 8006bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8006bc2:	d00b      	beq.n	8006bdc <_vfiprintf_r+0xa4>
 8006bc4:	465b      	mov	r3, fp
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7ff ffa2 	bl	8006b14 <__sfputs_r>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	f000 80a9 	beq.w	8006d28 <_vfiprintf_r+0x1f0>
 8006bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd8:	445a      	add	r2, fp
 8006bda:	9209      	str	r2, [sp, #36]	; 0x24
 8006bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 80a1 	beq.w	8006d28 <_vfiprintf_r+0x1f0>
 8006be6:	2300      	movs	r3, #0
 8006be8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bf0:	f10a 0a01 	add.w	sl, sl, #1
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	9307      	str	r3, [sp, #28]
 8006bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8006bfe:	4654      	mov	r4, sl
 8006c00:	2205      	movs	r2, #5
 8006c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c06:	4854      	ldr	r0, [pc, #336]	; (8006d58 <_vfiprintf_r+0x220>)
 8006c08:	f7f9 faea 	bl	80001e0 <memchr>
 8006c0c:	9a04      	ldr	r2, [sp, #16]
 8006c0e:	b9d8      	cbnz	r0, 8006c48 <_vfiprintf_r+0x110>
 8006c10:	06d1      	lsls	r1, r2, #27
 8006c12:	bf44      	itt	mi
 8006c14:	2320      	movmi	r3, #32
 8006c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c1a:	0713      	lsls	r3, r2, #28
 8006c1c:	bf44      	itt	mi
 8006c1e:	232b      	movmi	r3, #43	; 0x2b
 8006c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c24:	f89a 3000 	ldrb.w	r3, [sl]
 8006c28:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2a:	d015      	beq.n	8006c58 <_vfiprintf_r+0x120>
 8006c2c:	9a07      	ldr	r2, [sp, #28]
 8006c2e:	4654      	mov	r4, sl
 8006c30:	2000      	movs	r0, #0
 8006c32:	f04f 0c0a 	mov.w	ip, #10
 8006c36:	4621      	mov	r1, r4
 8006c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c3c:	3b30      	subs	r3, #48	; 0x30
 8006c3e:	2b09      	cmp	r3, #9
 8006c40:	d94d      	bls.n	8006cde <_vfiprintf_r+0x1a6>
 8006c42:	b1b0      	cbz	r0, 8006c72 <_vfiprintf_r+0x13a>
 8006c44:	9207      	str	r2, [sp, #28]
 8006c46:	e014      	b.n	8006c72 <_vfiprintf_r+0x13a>
 8006c48:	eba0 0308 	sub.w	r3, r0, r8
 8006c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c50:	4313      	orrs	r3, r2
 8006c52:	9304      	str	r3, [sp, #16]
 8006c54:	46a2      	mov	sl, r4
 8006c56:	e7d2      	b.n	8006bfe <_vfiprintf_r+0xc6>
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	1d19      	adds	r1, r3, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	9103      	str	r1, [sp, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	bfbb      	ittet	lt
 8006c64:	425b      	neglt	r3, r3
 8006c66:	f042 0202 	orrlt.w	r2, r2, #2
 8006c6a:	9307      	strge	r3, [sp, #28]
 8006c6c:	9307      	strlt	r3, [sp, #28]
 8006c6e:	bfb8      	it	lt
 8006c70:	9204      	strlt	r2, [sp, #16]
 8006c72:	7823      	ldrb	r3, [r4, #0]
 8006c74:	2b2e      	cmp	r3, #46	; 0x2e
 8006c76:	d10c      	bne.n	8006c92 <_vfiprintf_r+0x15a>
 8006c78:	7863      	ldrb	r3, [r4, #1]
 8006c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7c:	d134      	bne.n	8006ce8 <_vfiprintf_r+0x1b0>
 8006c7e:	9b03      	ldr	r3, [sp, #12]
 8006c80:	1d1a      	adds	r2, r3, #4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	9203      	str	r2, [sp, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bfb8      	it	lt
 8006c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c8e:	3402      	adds	r4, #2
 8006c90:	9305      	str	r3, [sp, #20]
 8006c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006d68 <_vfiprintf_r+0x230>
 8006c96:	7821      	ldrb	r1, [r4, #0]
 8006c98:	2203      	movs	r2, #3
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	f7f9 faa0 	bl	80001e0 <memchr>
 8006ca0:	b138      	cbz	r0, 8006cb2 <_vfiprintf_r+0x17a>
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	eba0 000a 	sub.w	r0, r0, sl
 8006ca8:	2240      	movs	r2, #64	; 0x40
 8006caa:	4082      	lsls	r2, r0
 8006cac:	4313      	orrs	r3, r2
 8006cae:	3401      	adds	r4, #1
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb6:	4829      	ldr	r0, [pc, #164]	; (8006d5c <_vfiprintf_r+0x224>)
 8006cb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cbc:	2206      	movs	r2, #6
 8006cbe:	f7f9 fa8f 	bl	80001e0 <memchr>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d03f      	beq.n	8006d46 <_vfiprintf_r+0x20e>
 8006cc6:	4b26      	ldr	r3, [pc, #152]	; (8006d60 <_vfiprintf_r+0x228>)
 8006cc8:	bb1b      	cbnz	r3, 8006d12 <_vfiprintf_r+0x1da>
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	3307      	adds	r3, #7
 8006cce:	f023 0307 	bic.w	r3, r3, #7
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	9303      	str	r3, [sp, #12]
 8006cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd8:	443b      	add	r3, r7
 8006cda:	9309      	str	r3, [sp, #36]	; 0x24
 8006cdc:	e768      	b.n	8006bb0 <_vfiprintf_r+0x78>
 8006cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	2001      	movs	r0, #1
 8006ce6:	e7a6      	b.n	8006c36 <_vfiprintf_r+0xfe>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	3401      	adds	r4, #1
 8006cec:	9305      	str	r3, [sp, #20]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	f04f 0c0a 	mov.w	ip, #10
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cfa:	3a30      	subs	r2, #48	; 0x30
 8006cfc:	2a09      	cmp	r2, #9
 8006cfe:	d903      	bls.n	8006d08 <_vfiprintf_r+0x1d0>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0c6      	beq.n	8006c92 <_vfiprintf_r+0x15a>
 8006d04:	9105      	str	r1, [sp, #20]
 8006d06:	e7c4      	b.n	8006c92 <_vfiprintf_r+0x15a>
 8006d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e7f0      	b.n	8006cf4 <_vfiprintf_r+0x1bc>
 8006d12:	ab03      	add	r3, sp, #12
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	462a      	mov	r2, r5
 8006d18:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <_vfiprintf_r+0x22c>)
 8006d1a:	a904      	add	r1, sp, #16
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f7fd fd67 	bl	80047f0 <_printf_float>
 8006d22:	4607      	mov	r7, r0
 8006d24:	1c78      	adds	r0, r7, #1
 8006d26:	d1d6      	bne.n	8006cd6 <_vfiprintf_r+0x19e>
 8006d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d2a:	07d9      	lsls	r1, r3, #31
 8006d2c:	d405      	bmi.n	8006d3a <_vfiprintf_r+0x202>
 8006d2e:	89ab      	ldrh	r3, [r5, #12]
 8006d30:	059a      	lsls	r2, r3, #22
 8006d32:	d402      	bmi.n	8006d3a <_vfiprintf_r+0x202>
 8006d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d36:	f7fe faa5 	bl	8005284 <__retarget_lock_release_recursive>
 8006d3a:	89ab      	ldrh	r3, [r5, #12]
 8006d3c:	065b      	lsls	r3, r3, #25
 8006d3e:	f53f af1d 	bmi.w	8006b7c <_vfiprintf_r+0x44>
 8006d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d44:	e71c      	b.n	8006b80 <_vfiprintf_r+0x48>
 8006d46:	ab03      	add	r3, sp, #12
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <_vfiprintf_r+0x22c>)
 8006d4e:	a904      	add	r1, sp, #16
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7fd fff1 	bl	8004d38 <_printf_i>
 8006d56:	e7e4      	b.n	8006d22 <_vfiprintf_r+0x1ea>
 8006d58:	080073bb 	.word	0x080073bb
 8006d5c:	080073c5 	.word	0x080073c5
 8006d60:	080047f1 	.word	0x080047f1
 8006d64:	08006b15 	.word	0x08006b15
 8006d68:	080073c1 	.word	0x080073c1

08006d6c <__swbuf_r>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	460e      	mov	r6, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	4605      	mov	r5, r0
 8006d74:	b118      	cbz	r0, 8006d7e <__swbuf_r+0x12>
 8006d76:	6a03      	ldr	r3, [r0, #32]
 8006d78:	b90b      	cbnz	r3, 8006d7e <__swbuf_r+0x12>
 8006d7a:	f7fe f98b 	bl	8005094 <__sinit>
 8006d7e:	69a3      	ldr	r3, [r4, #24]
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	071a      	lsls	r2, r3, #28
 8006d86:	d525      	bpl.n	8006dd4 <__swbuf_r+0x68>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	b31b      	cbz	r3, 8006dd4 <__swbuf_r+0x68>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	6922      	ldr	r2, [r4, #16]
 8006d90:	1a98      	subs	r0, r3, r2
 8006d92:	6963      	ldr	r3, [r4, #20]
 8006d94:	b2f6      	uxtb	r6, r6
 8006d96:	4283      	cmp	r3, r0
 8006d98:	4637      	mov	r7, r6
 8006d9a:	dc04      	bgt.n	8006da6 <__swbuf_r+0x3a>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f7ff fdee 	bl	8006980 <_fflush_r>
 8006da4:	b9e0      	cbnz	r0, 8006de0 <__swbuf_r+0x74>
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	60a3      	str	r3, [r4, #8]
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	6022      	str	r2, [r4, #0]
 8006db2:	701e      	strb	r6, [r3, #0]
 8006db4:	6962      	ldr	r2, [r4, #20]
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d004      	beq.n	8006dc6 <__swbuf_r+0x5a>
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	07db      	lsls	r3, r3, #31
 8006dc0:	d506      	bpl.n	8006dd0 <__swbuf_r+0x64>
 8006dc2:	2e0a      	cmp	r6, #10
 8006dc4:	d104      	bne.n	8006dd0 <__swbuf_r+0x64>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f7ff fdd9 	bl	8006980 <_fflush_r>
 8006dce:	b938      	cbnz	r0, 8006de0 <__swbuf_r+0x74>
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f806 	bl	8006de8 <__swsetup_r>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d0d5      	beq.n	8006d8c <__swbuf_r+0x20>
 8006de0:	f04f 37ff 	mov.w	r7, #4294967295
 8006de4:	e7f4      	b.n	8006dd0 <__swbuf_r+0x64>
	...

08006de8 <__swsetup_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <__swsetup_r+0xac>)
 8006dec:	4605      	mov	r5, r0
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	460c      	mov	r4, r1
 8006df2:	b118      	cbz	r0, 8006dfc <__swsetup_r+0x14>
 8006df4:	6a03      	ldr	r3, [r0, #32]
 8006df6:	b90b      	cbnz	r3, 8006dfc <__swsetup_r+0x14>
 8006df8:	f7fe f94c 	bl	8005094 <__sinit>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e02:	0718      	lsls	r0, r3, #28
 8006e04:	d422      	bmi.n	8006e4c <__swsetup_r+0x64>
 8006e06:	06d9      	lsls	r1, r3, #27
 8006e08:	d407      	bmi.n	8006e1a <__swsetup_r+0x32>
 8006e0a:	2309      	movs	r3, #9
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e034      	b.n	8006e84 <__swsetup_r+0x9c>
 8006e1a:	0758      	lsls	r0, r3, #29
 8006e1c:	d512      	bpl.n	8006e44 <__swsetup_r+0x5c>
 8006e1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e20:	b141      	cbz	r1, 8006e34 <__swsetup_r+0x4c>
 8006e22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e26:	4299      	cmp	r1, r3
 8006e28:	d002      	beq.n	8006e30 <__swsetup_r+0x48>
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f7ff f8a6 	bl	8005f7c <_free_r>
 8006e30:	2300      	movs	r3, #0
 8006e32:	6363      	str	r3, [r4, #52]	; 0x34
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e3a:	81a3      	strh	r3, [r4, #12]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6063      	str	r3, [r4, #4]
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	f043 0308 	orr.w	r3, r3, #8
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	b94b      	cbnz	r3, 8006e64 <__swsetup_r+0x7c>
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5a:	d003      	beq.n	8006e64 <__swsetup_r+0x7c>
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f000 f884 	bl	8006f6c <__smakebuf_r>
 8006e64:	89a0      	ldrh	r0, [r4, #12]
 8006e66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e6a:	f010 0301 	ands.w	r3, r0, #1
 8006e6e:	d00a      	beq.n	8006e86 <__swsetup_r+0x9e>
 8006e70:	2300      	movs	r3, #0
 8006e72:	60a3      	str	r3, [r4, #8]
 8006e74:	6963      	ldr	r3, [r4, #20]
 8006e76:	425b      	negs	r3, r3
 8006e78:	61a3      	str	r3, [r4, #24]
 8006e7a:	6923      	ldr	r3, [r4, #16]
 8006e7c:	b943      	cbnz	r3, 8006e90 <__swsetup_r+0xa8>
 8006e7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e82:	d1c4      	bne.n	8006e0e <__swsetup_r+0x26>
 8006e84:	bd38      	pop	{r3, r4, r5, pc}
 8006e86:	0781      	lsls	r1, r0, #30
 8006e88:	bf58      	it	pl
 8006e8a:	6963      	ldrpl	r3, [r4, #20]
 8006e8c:	60a3      	str	r3, [r4, #8]
 8006e8e:	e7f4      	b.n	8006e7a <__swsetup_r+0x92>
 8006e90:	2000      	movs	r0, #0
 8006e92:	e7f7      	b.n	8006e84 <__swsetup_r+0x9c>
 8006e94:	20000068 	.word	0x20000068

08006e98 <_raise_r>:
 8006e98:	291f      	cmp	r1, #31
 8006e9a:	b538      	push	{r3, r4, r5, lr}
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	460d      	mov	r5, r1
 8006ea0:	d904      	bls.n	8006eac <_raise_r+0x14>
 8006ea2:	2316      	movs	r3, #22
 8006ea4:	6003      	str	r3, [r0, #0]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006eae:	b112      	cbz	r2, 8006eb6 <_raise_r+0x1e>
 8006eb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eb4:	b94b      	cbnz	r3, 8006eca <_raise_r+0x32>
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f000 f830 	bl	8006f1c <_getpid_r>
 8006ebc:	462a      	mov	r2, r5
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec6:	f000 b817 	b.w	8006ef8 <_kill_r>
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d00a      	beq.n	8006ee4 <_raise_r+0x4c>
 8006ece:	1c59      	adds	r1, r3, #1
 8006ed0:	d103      	bne.n	8006eda <_raise_r+0x42>
 8006ed2:	2316      	movs	r3, #22
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	e7e7      	b.n	8006eaa <_raise_r+0x12>
 8006eda:	2400      	movs	r4, #0
 8006edc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	4798      	blx	r3
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e7e0      	b.n	8006eaa <_raise_r+0x12>

08006ee8 <raise>:
 8006ee8:	4b02      	ldr	r3, [pc, #8]	; (8006ef4 <raise+0xc>)
 8006eea:	4601      	mov	r1, r0
 8006eec:	6818      	ldr	r0, [r3, #0]
 8006eee:	f7ff bfd3 	b.w	8006e98 <_raise_r>
 8006ef2:	bf00      	nop
 8006ef4:	20000068 	.word	0x20000068

08006ef8 <_kill_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d07      	ldr	r5, [pc, #28]	; (8006f18 <_kill_r+0x20>)
 8006efc:	2300      	movs	r3, #0
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	f7fa fba3 	bl	8001650 <_kill>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d102      	bne.n	8006f14 <_kill_r+0x1c>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	b103      	cbz	r3, 8006f14 <_kill_r+0x1c>
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
 8006f16:	bf00      	nop
 8006f18:	20000408 	.word	0x20000408

08006f1c <_getpid_r>:
 8006f1c:	f7fa bb90 	b.w	8001640 <_getpid>

08006f20 <__swhatbuf_r>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	b096      	sub	sp, #88	; 0x58
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	461e      	mov	r6, r3
 8006f30:	da0d      	bge.n	8006f4e <__swhatbuf_r+0x2e>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f38:	f04f 0100 	mov.w	r1, #0
 8006f3c:	bf0c      	ite	eq
 8006f3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006f42:	2340      	movne	r3, #64	; 0x40
 8006f44:	2000      	movs	r0, #0
 8006f46:	6031      	str	r1, [r6, #0]
 8006f48:	602b      	str	r3, [r5, #0]
 8006f4a:	b016      	add	sp, #88	; 0x58
 8006f4c:	bd70      	pop	{r4, r5, r6, pc}
 8006f4e:	466a      	mov	r2, sp
 8006f50:	f000 f848 	bl	8006fe4 <_fstat_r>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dbec      	blt.n	8006f32 <__swhatbuf_r+0x12>
 8006f58:	9901      	ldr	r1, [sp, #4]
 8006f5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f62:	4259      	negs	r1, r3
 8006f64:	4159      	adcs	r1, r3
 8006f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f6a:	e7eb      	b.n	8006f44 <__swhatbuf_r+0x24>

08006f6c <__smakebuf_r>:
 8006f6c:	898b      	ldrh	r3, [r1, #12]
 8006f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f70:	079d      	lsls	r5, r3, #30
 8006f72:	4606      	mov	r6, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	d507      	bpl.n	8006f88 <__smakebuf_r+0x1c>
 8006f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	2301      	movs	r3, #1
 8006f82:	6163      	str	r3, [r4, #20]
 8006f84:	b002      	add	sp, #8
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	ab01      	add	r3, sp, #4
 8006f8a:	466a      	mov	r2, sp
 8006f8c:	f7ff ffc8 	bl	8006f20 <__swhatbuf_r>
 8006f90:	9900      	ldr	r1, [sp, #0]
 8006f92:	4605      	mov	r5, r0
 8006f94:	4630      	mov	r0, r6
 8006f96:	f7ff f865 	bl	8006064 <_malloc_r>
 8006f9a:	b948      	cbnz	r0, 8006fb0 <__smakebuf_r+0x44>
 8006f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa0:	059a      	lsls	r2, r3, #22
 8006fa2:	d4ef      	bmi.n	8006f84 <__smakebuf_r+0x18>
 8006fa4:	f023 0303 	bic.w	r3, r3, #3
 8006fa8:	f043 0302 	orr.w	r3, r3, #2
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	e7e3      	b.n	8006f78 <__smakebuf_r+0xc>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	6020      	str	r0, [r4, #0]
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	9b00      	ldr	r3, [sp, #0]
 8006fbc:	6163      	str	r3, [r4, #20]
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	6120      	str	r0, [r4, #16]
 8006fc2:	b15b      	cbz	r3, 8006fdc <__smakebuf_r+0x70>
 8006fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f000 f81d 	bl	8007008 <_isatty_r>
 8006fce:	b128      	cbz	r0, 8006fdc <__smakebuf_r+0x70>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	431d      	orrs	r5, r3
 8006fe0:	81a5      	strh	r5, [r4, #12]
 8006fe2:	e7cf      	b.n	8006f84 <__smakebuf_r+0x18>

08006fe4 <_fstat_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	; (8007004 <_fstat_r+0x20>)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4604      	mov	r4, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	4611      	mov	r1, r2
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	f7fa fb8c 	bl	800170e <_fstat>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d102      	bne.n	8007000 <_fstat_r+0x1c>
 8006ffa:	682b      	ldr	r3, [r5, #0]
 8006ffc:	b103      	cbz	r3, 8007000 <_fstat_r+0x1c>
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	bd38      	pop	{r3, r4, r5, pc}
 8007002:	bf00      	nop
 8007004:	20000408 	.word	0x20000408

08007008 <_isatty_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d06      	ldr	r5, [pc, #24]	; (8007024 <_isatty_r+0x1c>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	f7fa fb8b 	bl	800172e <_isatty>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_isatty_r+0x1a>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_isatty_r+0x1a>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20000408 	.word	0x20000408

08007028 <_init>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr

08007034 <_fini>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	bf00      	nop
 8007038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703a:	bc08      	pop	{r3}
 800703c:	469e      	mov	lr, r3
 800703e:	4770      	bx	lr
